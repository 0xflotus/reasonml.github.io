{"version":3,"sources":["webpack:///path---api-bigarray-array-3-html-d396c00b67100598eee5.js","webpack:///./.cache/json/api-bigarray-array-3-html.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/api-bigarray-array-3-html.json","module","exports","data","file","relativePath","childRawHtml","content","pathContext"],"mappings":"AAAAA,cAAc,MAERC,mFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,aAAA,2BACAC,cACAC,QAAA,ymTAIAC,aACAH,aAAA","file":"path---api-bigarray-array-3-html-d396c00b67100598eee5.js","sourcesContent":["webpackJsonp([304],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/api-bigarray-array-3-html.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"file\": {\n\t\t\t\t\"relativePath\": \"api/Bigarray.Array3.html\",\n\t\t\t\t\"childRawHtml\": {\n\t\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\"><a class=\\\"pre\\\" href=\\\"Bigarray.Array2.html\\\" title=\\\"Bigarray.Array2\\\">Previous</a>\\n&#xA0;<a class=\\\"up\\\" href=\\\"Bigarray.html\\\" title=\\\"Bigarray\\\">Up</a>\\n&#xA0;</div>\\n<h1>Module <a href=\\\"type_Bigarray.Array3.html\\\">Bigarray.Array3</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> Array3: sig .. end</pre><div class=\\\"info module top\\\">\\nThree-dimensional arrays. The <code class=\\\"code\\\">Array3</code> structure provides operations\\n   similar to those of <a href=\\\"Bigarray.Genarray.html\\\"><code class=\\\"code\\\">Bigarray.Genarray</code></a>, but specialized to the case\\n   of three-dimensional arrays.<br>\\n</div>\\n<hr width=\\\"100%\\\">\\n\\n<pre id=\\\"TYPEt\\\"><span class=\\\"keyword\\\">type</span> (&apos;a, &apos;b, &apos;c) t </pre>\\n<div class=\\\"info \\\">\\nThe type of three-dimensional big arrays whose elements have\\n     OCaml type <code class=\\\"code\\\">&apos;a</code>, representation kind <code class=\\\"code\\\">&apos;b</code>, and memory layout <code class=\\\"code\\\">&apos;c</code>.<br>\\n</div>\\n\\n\\n<pre id=\\\"VALcreate\\\">val create : (&apos;a, &apos;b) Bigarray.kind -&gt;       &apos;c Bigarray.layout -&gt; int -&gt; int -&gt; int -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Array3.create kind layout dim1 dim2 dim3</code> returns a new bigarray of\\n     three dimension, whose size is <code class=\\\"code\\\">dim1</code> in the first dimension,\\n     <code class=\\\"code\\\">dim2</code> in the second dimension, and <code class=\\\"code\\\">dim3</code> in the third.\\n     <code class=\\\"code\\\">kind</code> and <code class=\\\"code\\\">layout</code> determine the array element kind and\\n     the array layout as described for <a href=\\\"Bigarray.Genarray.html#VALcreate\\\"><code class=\\\"code\\\">Bigarray.Genarray.create</code></a>.<br>\\n</div>\\n\\n<pre id=\\\"VALdim1\\\">val dim1 : (&apos;a, &apos;b, &apos;c) t -&gt; int</pre><div class=\\\"info \\\">\\nReturn the first dimension of the given three-dimensional big array.<br>\\n</div>\\n\\n<pre id=\\\"VALdim2\\\">val dim2 : (&apos;a, &apos;b, &apos;c) t -&gt; int</pre><div class=\\\"info \\\">\\nReturn the second dimension of the given three-dimensional big array.<br>\\n</div>\\n\\n<pre id=\\\"VALdim3\\\">val dim3 : (&apos;a, &apos;b, &apos;c) t -&gt; int</pre><div class=\\\"info \\\">\\nReturn the third dimension of the given three-dimensional big array.<br>\\n</div>\\n\\n<pre id=\\\"VALkind\\\">val kind : (&apos;a, &apos;b, &apos;c) t -&gt; (&apos;a, &apos;b) Bigarray.kind</pre><div class=\\\"info \\\">\\nReturn the kind of the given big array.<br>\\n</div>\\n\\n<pre id=\\\"VALlayout\\\">val layout : (&apos;a, &apos;b, &apos;c) t -&gt; &apos;c Bigarray.layout</pre><div class=\\\"info \\\">\\nReturn the layout of the given big array.<br>\\n</div>\\n\\n<pre id=\\\"VALget\\\">val get : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; int -&gt; int -&gt; &apos;a</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Array3.get a x y z</code>, also written <code class=\\\"code\\\">a.{x,y,z}</code>,\\n     returns the element of <code class=\\\"code\\\">a</code> at coordinates (<code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code>, <code class=\\\"code\\\">z</code>).\\n     <code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code> and <code class=\\\"code\\\">z</code> must be within the bounds of <code class=\\\"code\\\">a</code>,\\n     as described for <a href=\\\"Bigarray.Genarray.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Genarray.get</code></a>;\\n     otherwise, <code class=\\\"code\\\">Invalid_argument</code> is raised.<br>\\n</div>\\n\\n<pre id=\\\"VALset\\\">val set : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; int -&gt; int -&gt; &apos;a -&gt; unit</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Array3.set a x y v</code>, or alternatively <code class=\\\"code\\\">a.{x,y,z} &lt;- v</code>,\\n     stores the value <code class=\\\"code\\\">v</code> at coordinates (<code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code>, <code class=\\\"code\\\">z</code>) in <code class=\\\"code\\\">a</code>.\\n     <code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code> and <code class=\\\"code\\\">z</code> must be within the bounds of <code class=\\\"code\\\">a</code>,\\n     as described for <a href=\\\"Bigarray.Genarray.html#VALset\\\"><code class=\\\"code\\\">Bigarray.Genarray.set</code></a>;\\n     otherwise, <code class=\\\"code\\\">Invalid_argument</code> is raised.<br>\\n</div>\\n\\n<pre id=\\\"VALsub_left\\\">val sub_left : (&apos;a, &apos;b, Bigarray.c_layout) t -&gt;       int -&gt; int -&gt; (&apos;a, &apos;b, Bigarray.c_layout) t</pre><div class=\\\"info \\\">\\nExtract a three-dimensional sub-array of the given\\n     three-dimensional big array by restricting the first dimension.\\n     See <a href=\\\"Bigarray.Genarray.html#VALsub_left\\\"><code class=\\\"code\\\">Bigarray.Genarray.sub_left</code></a> for more details.  <code class=\\\"code\\\">Array3.sub_left</code>\\n     applies only to arrays with C layout.<br>\\n</div>\\n\\n<pre id=\\\"VALsub_right\\\">val sub_right : (&apos;a, &apos;b, Bigarray.fortran_layout) t -&gt;       int -&gt; int -&gt; (&apos;a, &apos;b, Bigarray.fortran_layout) t</pre><div class=\\\"info \\\">\\nExtract a three-dimensional sub-array of the given\\n     three-dimensional big array by restricting the second dimension.\\n     See <a href=\\\"Bigarray.Genarray.html#VALsub_right\\\"><code class=\\\"code\\\">Bigarray.Genarray.sub_right</code></a> for more details.  <code class=\\\"code\\\">Array3.sub_right</code>\\n     applies only to arrays with Fortran layout.<br>\\n</div>\\n\\n<pre id=\\\"VALslice_left_1\\\">val slice_left_1 : (&apos;a, &apos;b, Bigarray.c_layout) t -&gt;       int -&gt; int -&gt; (&apos;a, &apos;b, Bigarray.c_layout) Bigarray.Array1.t</pre><div class=\\\"info \\\">\\nExtract a one-dimensional slice of the given three-dimensional\\n     big array by fixing the first two coordinates.\\n     The integer parameters are the coordinates of the slice to\\n     extract.  See <a href=\\\"Bigarray.Genarray.html#VALslice_left\\\"><code class=\\\"code\\\">Bigarray.Genarray.slice_left</code></a> for more details.\\n     <code class=\\\"code\\\">Array3.slice_left_1</code> applies only to arrays with C layout.<br>\\n</div>\\n\\n<pre id=\\\"VALslice_right_1\\\">val slice_right_1 : (&apos;a, &apos;b, Bigarray.fortran_layout) t -&gt;       int -&gt; int -&gt; (&apos;a, &apos;b, Bigarray.fortran_layout) Bigarray.Array1.t</pre><div class=\\\"info \\\">\\nExtract a one-dimensional slice of the given three-dimensional\\n     big array by fixing the last two coordinates.\\n     The integer parameters are the coordinates of the slice to\\n     extract.  See <a href=\\\"Bigarray.Genarray.html#VALslice_right\\\"><code class=\\\"code\\\">Bigarray.Genarray.slice_right</code></a> for more details.\\n     <code class=\\\"code\\\">Array3.slice_right_1</code> applies only to arrays with Fortran\\n     layout.<br>\\n</div>\\n\\n<pre id=\\\"VALslice_left_2\\\">val slice_left_2 : (&apos;a, &apos;b, Bigarray.c_layout) t -&gt;       int -&gt; (&apos;a, &apos;b, Bigarray.c_layout) Bigarray.Array2.t</pre><div class=\\\"info \\\">\\nExtract a  two-dimensional slice of the given three-dimensional\\n     big array by fixing the first coordinate.\\n     The integer parameter is the first coordinate of the slice to\\n     extract.  See <a href=\\\"Bigarray.Genarray.html#VALslice_left\\\"><code class=\\\"code\\\">Bigarray.Genarray.slice_left</code></a> for more details.\\n     <code class=\\\"code\\\">Array3.slice_left_2</code> applies only to arrays with C layout.<br>\\n</div>\\n\\n<pre id=\\\"VALslice_right_2\\\">val slice_right_2 : (&apos;a, &apos;b, Bigarray.fortran_layout) t -&gt;       int -&gt; (&apos;a, &apos;b, Bigarray.fortran_layout) Bigarray.Array2.t</pre><div class=\\\"info \\\">\\nExtract a two-dimensional slice of the given\\n     three-dimensional big array by fixing the last coordinate.\\n     The integer parameter is the coordinate of the slice\\n     to extract.  See <a href=\\\"Bigarray.Genarray.html#VALslice_right\\\"><code class=\\\"code\\\">Bigarray.Genarray.slice_right</code></a> for more details.\\n     <code class=\\\"code\\\">Array3.slice_right_2</code> applies only to arrays with Fortran\\n     layout.<br>\\n</div>\\n\\n<pre id=\\\"VALblit\\\">val blit : (&apos;a, &apos;b, &apos;c) t -&gt; (&apos;a, &apos;b, &apos;c) t -&gt; unit</pre><div class=\\\"info \\\">\\nCopy the first big array to the second big array.\\n     See <a href=\\\"Bigarray.Genarray.html#VALblit\\\"><code class=\\\"code\\\">Bigarray.Genarray.blit</code></a> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALfill\\\">val fill : (&apos;a, &apos;b, &apos;c) t -&gt; &apos;a -&gt; unit</pre><div class=\\\"info \\\">\\nFill the given big array with the given value.\\n     See <a href=\\\"Bigarray.Genarray.html#VALfill\\\"><code class=\\\"code\\\">Bigarray.Genarray.fill</code></a> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALof_array\\\">val of_array : (&apos;a, &apos;b) Bigarray.kind -&gt;       &apos;c Bigarray.layout -&gt; &apos;a array array array -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\nBuild a three-dimensional big array initialized from the\\n     given array of arrays of arrays.<br>\\n</div>\\n\\n<pre id=\\\"VALmap_file\\\">val map_file : Unix.file_descr -&gt;       ?pos:int64 -&gt;       (&apos;a, &apos;b) Bigarray.kind -&gt;       &apos;c Bigarray.layout -&gt;       bool -&gt; int -&gt; int -&gt; int -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\nMemory mapping of a file as a three-dimensional big array.\\n     See <a href=\\\"Bigarray.Genarray.html#VALmap_file\\\"><code class=\\\"code\\\">Bigarray.Genarray.map_file</code></a> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALunsafe_get\\\">val unsafe_get : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; int -&gt; int -&gt; &apos;a</pre><div class=\\\"info \\\">\\nLike <a href=\\\"Bigarray.Array3.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Array3.get</code></a>, but bounds checking is not always\\n      performed.<br>\\n</div>\\n\\n<pre id=\\\"VALunsafe_set\\\">val unsafe_set : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; int -&gt; int -&gt; &apos;a -&gt; unit</pre><div class=\\\"info \\\">\\nLike <a href=\\\"Bigarray.Array3.html#VALset\\\"><code class=\\\"code\\\">Bigarray.Array3.set</code></a>, but bounds checking is not always\\n      performed.<br>\\n</div>\\n</div>\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"relativePath\": \"api/Bigarray.Array3.html\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---api-bigarray-array-3-html-d396c00b67100598eee5.js","module.exports = {\n\t\"data\": {\n\t\t\"file\": {\n\t\t\t\"relativePath\": \"api/Bigarray.Array3.html\",\n\t\t\t\"childRawHtml\": {\n\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\"><a class=\\\"pre\\\" href=\\\"Bigarray.Array2.html\\\" title=\\\"Bigarray.Array2\\\">Previous</a>\\n&#xA0;<a class=\\\"up\\\" href=\\\"Bigarray.html\\\" title=\\\"Bigarray\\\">Up</a>\\n&#xA0;</div>\\n<h1>Module <a href=\\\"type_Bigarray.Array3.html\\\">Bigarray.Array3</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> Array3: sig .. end</pre><div class=\\\"info module top\\\">\\nThree-dimensional arrays. The <code class=\\\"code\\\">Array3</code> structure provides operations\\n   similar to those of <a href=\\\"Bigarray.Genarray.html\\\"><code class=\\\"code\\\">Bigarray.Genarray</code></a>, but specialized to the case\\n   of three-dimensional arrays.<br>\\n</div>\\n<hr width=\\\"100%\\\">\\n\\n<pre id=\\\"TYPEt\\\"><span class=\\\"keyword\\\">type</span> (&apos;a, &apos;b, &apos;c) t </pre>\\n<div class=\\\"info \\\">\\nThe type of three-dimensional big arrays whose elements have\\n     OCaml type <code class=\\\"code\\\">&apos;a</code>, representation kind <code class=\\\"code\\\">&apos;b</code>, and memory layout <code class=\\\"code\\\">&apos;c</code>.<br>\\n</div>\\n\\n\\n<pre id=\\\"VALcreate\\\">val create : (&apos;a, &apos;b) Bigarray.kind -&gt;       &apos;c Bigarray.layout -&gt; int -&gt; int -&gt; int -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Array3.create kind layout dim1 dim2 dim3</code> returns a new bigarray of\\n     three dimension, whose size is <code class=\\\"code\\\">dim1</code> in the first dimension,\\n     <code class=\\\"code\\\">dim2</code> in the second dimension, and <code class=\\\"code\\\">dim3</code> in the third.\\n     <code class=\\\"code\\\">kind</code> and <code class=\\\"code\\\">layout</code> determine the array element kind and\\n     the array layout as described for <a href=\\\"Bigarray.Genarray.html#VALcreate\\\"><code class=\\\"code\\\">Bigarray.Genarray.create</code></a>.<br>\\n</div>\\n\\n<pre id=\\\"VALdim1\\\">val dim1 : (&apos;a, &apos;b, &apos;c) t -&gt; int</pre><div class=\\\"info \\\">\\nReturn the first dimension of the given three-dimensional big array.<br>\\n</div>\\n\\n<pre id=\\\"VALdim2\\\">val dim2 : (&apos;a, &apos;b, &apos;c) t -&gt; int</pre><div class=\\\"info \\\">\\nReturn the second dimension of the given three-dimensional big array.<br>\\n</div>\\n\\n<pre id=\\\"VALdim3\\\">val dim3 : (&apos;a, &apos;b, &apos;c) t -&gt; int</pre><div class=\\\"info \\\">\\nReturn the third dimension of the given three-dimensional big array.<br>\\n</div>\\n\\n<pre id=\\\"VALkind\\\">val kind : (&apos;a, &apos;b, &apos;c) t -&gt; (&apos;a, &apos;b) Bigarray.kind</pre><div class=\\\"info \\\">\\nReturn the kind of the given big array.<br>\\n</div>\\n\\n<pre id=\\\"VALlayout\\\">val layout : (&apos;a, &apos;b, &apos;c) t -&gt; &apos;c Bigarray.layout</pre><div class=\\\"info \\\">\\nReturn the layout of the given big array.<br>\\n</div>\\n\\n<pre id=\\\"VALget\\\">val get : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; int -&gt; int -&gt; &apos;a</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Array3.get a x y z</code>, also written <code class=\\\"code\\\">a.{x,y,z}</code>,\\n     returns the element of <code class=\\\"code\\\">a</code> at coordinates (<code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code>, <code class=\\\"code\\\">z</code>).\\n     <code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code> and <code class=\\\"code\\\">z</code> must be within the bounds of <code class=\\\"code\\\">a</code>,\\n     as described for <a href=\\\"Bigarray.Genarray.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Genarray.get</code></a>;\\n     otherwise, <code class=\\\"code\\\">Invalid_argument</code> is raised.<br>\\n</div>\\n\\n<pre id=\\\"VALset\\\">val set : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; int -&gt; int -&gt; &apos;a -&gt; unit</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Array3.set a x y v</code>, or alternatively <code class=\\\"code\\\">a.{x,y,z} &lt;- v</code>,\\n     stores the value <code class=\\\"code\\\">v</code> at coordinates (<code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code>, <code class=\\\"code\\\">z</code>) in <code class=\\\"code\\\">a</code>.\\n     <code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code> and <code class=\\\"code\\\">z</code> must be within the bounds of <code class=\\\"code\\\">a</code>,\\n     as described for <a href=\\\"Bigarray.Genarray.html#VALset\\\"><code class=\\\"code\\\">Bigarray.Genarray.set</code></a>;\\n     otherwise, <code class=\\\"code\\\">Invalid_argument</code> is raised.<br>\\n</div>\\n\\n<pre id=\\\"VALsub_left\\\">val sub_left : (&apos;a, &apos;b, Bigarray.c_layout) t -&gt;       int -&gt; int -&gt; (&apos;a, &apos;b, Bigarray.c_layout) t</pre><div class=\\\"info \\\">\\nExtract a three-dimensional sub-array of the given\\n     three-dimensional big array by restricting the first dimension.\\n     See <a href=\\\"Bigarray.Genarray.html#VALsub_left\\\"><code class=\\\"code\\\">Bigarray.Genarray.sub_left</code></a> for more details.  <code class=\\\"code\\\">Array3.sub_left</code>\\n     applies only to arrays with C layout.<br>\\n</div>\\n\\n<pre id=\\\"VALsub_right\\\">val sub_right : (&apos;a, &apos;b, Bigarray.fortran_layout) t -&gt;       int -&gt; int -&gt; (&apos;a, &apos;b, Bigarray.fortran_layout) t</pre><div class=\\\"info \\\">\\nExtract a three-dimensional sub-array of the given\\n     three-dimensional big array by restricting the second dimension.\\n     See <a href=\\\"Bigarray.Genarray.html#VALsub_right\\\"><code class=\\\"code\\\">Bigarray.Genarray.sub_right</code></a> for more details.  <code class=\\\"code\\\">Array3.sub_right</code>\\n     applies only to arrays with Fortran layout.<br>\\n</div>\\n\\n<pre id=\\\"VALslice_left_1\\\">val slice_left_1 : (&apos;a, &apos;b, Bigarray.c_layout) t -&gt;       int -&gt; int -&gt; (&apos;a, &apos;b, Bigarray.c_layout) Bigarray.Array1.t</pre><div class=\\\"info \\\">\\nExtract a one-dimensional slice of the given three-dimensional\\n     big array by fixing the first two coordinates.\\n     The integer parameters are the coordinates of the slice to\\n     extract.  See <a href=\\\"Bigarray.Genarray.html#VALslice_left\\\"><code class=\\\"code\\\">Bigarray.Genarray.slice_left</code></a> for more details.\\n     <code class=\\\"code\\\">Array3.slice_left_1</code> applies only to arrays with C layout.<br>\\n</div>\\n\\n<pre id=\\\"VALslice_right_1\\\">val slice_right_1 : (&apos;a, &apos;b, Bigarray.fortran_layout) t -&gt;       int -&gt; int -&gt; (&apos;a, &apos;b, Bigarray.fortran_layout) Bigarray.Array1.t</pre><div class=\\\"info \\\">\\nExtract a one-dimensional slice of the given three-dimensional\\n     big array by fixing the last two coordinates.\\n     The integer parameters are the coordinates of the slice to\\n     extract.  See <a href=\\\"Bigarray.Genarray.html#VALslice_right\\\"><code class=\\\"code\\\">Bigarray.Genarray.slice_right</code></a> for more details.\\n     <code class=\\\"code\\\">Array3.slice_right_1</code> applies only to arrays with Fortran\\n     layout.<br>\\n</div>\\n\\n<pre id=\\\"VALslice_left_2\\\">val slice_left_2 : (&apos;a, &apos;b, Bigarray.c_layout) t -&gt;       int -&gt; (&apos;a, &apos;b, Bigarray.c_layout) Bigarray.Array2.t</pre><div class=\\\"info \\\">\\nExtract a  two-dimensional slice of the given three-dimensional\\n     big array by fixing the first coordinate.\\n     The integer parameter is the first coordinate of the slice to\\n     extract.  See <a href=\\\"Bigarray.Genarray.html#VALslice_left\\\"><code class=\\\"code\\\">Bigarray.Genarray.slice_left</code></a> for more details.\\n     <code class=\\\"code\\\">Array3.slice_left_2</code> applies only to arrays with C layout.<br>\\n</div>\\n\\n<pre id=\\\"VALslice_right_2\\\">val slice_right_2 : (&apos;a, &apos;b, Bigarray.fortran_layout) t -&gt;       int -&gt; (&apos;a, &apos;b, Bigarray.fortran_layout) Bigarray.Array2.t</pre><div class=\\\"info \\\">\\nExtract a two-dimensional slice of the given\\n     three-dimensional big array by fixing the last coordinate.\\n     The integer parameter is the coordinate of the slice\\n     to extract.  See <a href=\\\"Bigarray.Genarray.html#VALslice_right\\\"><code class=\\\"code\\\">Bigarray.Genarray.slice_right</code></a> for more details.\\n     <code class=\\\"code\\\">Array3.slice_right_2</code> applies only to arrays with Fortran\\n     layout.<br>\\n</div>\\n\\n<pre id=\\\"VALblit\\\">val blit : (&apos;a, &apos;b, &apos;c) t -&gt; (&apos;a, &apos;b, &apos;c) t -&gt; unit</pre><div class=\\\"info \\\">\\nCopy the first big array to the second big array.\\n     See <a href=\\\"Bigarray.Genarray.html#VALblit\\\"><code class=\\\"code\\\">Bigarray.Genarray.blit</code></a> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALfill\\\">val fill : (&apos;a, &apos;b, &apos;c) t -&gt; &apos;a -&gt; unit</pre><div class=\\\"info \\\">\\nFill the given big array with the given value.\\n     See <a href=\\\"Bigarray.Genarray.html#VALfill\\\"><code class=\\\"code\\\">Bigarray.Genarray.fill</code></a> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALof_array\\\">val of_array : (&apos;a, &apos;b) Bigarray.kind -&gt;       &apos;c Bigarray.layout -&gt; &apos;a array array array -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\nBuild a three-dimensional big array initialized from the\\n     given array of arrays of arrays.<br>\\n</div>\\n\\n<pre id=\\\"VALmap_file\\\">val map_file : Unix.file_descr -&gt;       ?pos:int64 -&gt;       (&apos;a, &apos;b) Bigarray.kind -&gt;       &apos;c Bigarray.layout -&gt;       bool -&gt; int -&gt; int -&gt; int -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\nMemory mapping of a file as a three-dimensional big array.\\n     See <a href=\\\"Bigarray.Genarray.html#VALmap_file\\\"><code class=\\\"code\\\">Bigarray.Genarray.map_file</code></a> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALunsafe_get\\\">val unsafe_get : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; int -&gt; int -&gt; &apos;a</pre><div class=\\\"info \\\">\\nLike <a href=\\\"Bigarray.Array3.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Array3.get</code></a>, but bounds checking is not always\\n      performed.<br>\\n</div>\\n\\n<pre id=\\\"VALunsafe_set\\\">val unsafe_set : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; int -&gt; int -&gt; &apos;a -&gt; unit</pre><div class=\\\"info \\\">\\nLike <a href=\\\"Bigarray.Array3.html#VALset\\\"><code class=\\\"code\\\">Bigarray.Array3.set</code></a>, but bounds checking is not always\\n      performed.<br>\\n</div>\\n</div>\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"relativePath\": \"api/Bigarray.Array3.html\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/api-bigarray-array-3-html.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/api-bigarray-array-3-html.json\n// module chunks = 304"],"sourceRoot":""}