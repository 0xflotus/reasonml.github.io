{"version":3,"sources":["webpack:///path---ru-guide-javascript-interop-e38e0cd2a529b0e6f20d.js","webpack:///./.cache/json/ru-guide-javascript-interop.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/ru-guide-javascript-interop.json","module","exports","data","allFile","edges","node","relativePath","childMarkdownRemark","frontmatter","title","order","file","html","pathContext","section","relatedFiles"],"mappings":"AAAAA,cAAc,KAERC,qFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,SACAC,QAEAC,MACAC,aAAA,uBACAC,qBACAC,aACAC,MAAA,UACAC,MAAA,QAMAL,MACAC,aAAA,oBACAC,qBACAC,aACAC,MAAA,iBACAC,MAAA,OAMAL,MACAC,aAAA,oBACAC,qBACAC,aACAC,MAAA,sBACAC,MAAA,QAMAL,MACAC,aAAA,2BACAC,qBACAC,aACAC,MAAA,cACAC,MAAA,OAMAL,MACAC,aAAA,oCACAC,qBACAC,aACAC,MAAA,kBACAC,MAAA,OAMAL,MACAC,aAAA,+BACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,QAMAL,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,iBACAC,MAAA,OAMAL,MACAC,aAAA,mCACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,OAMAL,MACAC,aAAA,oCACAC,qBACAC,aACAC,MAAA,gBACAC,MAAA,OAMAL,MACAC,aAAA,2CACAC,qBACAC,aACAC,MAAA,oBACAC,MAAA,QAMAL,MACAC,aAAA,2CACAC,qBACAC,aACAC,MAAA,0BACAC,MAAA,OAMAL,MACAC,aAAA,yCACAC,qBACAC,aACAC,MAAA,wBACAC,MAAA,QAMAL,MACAC,aAAA,+CACAC,qBACAC,aACAC,MAAA,uBACAC,MAAA,QAMAL,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,sBACAC,MAAA,QAMAL,MACAC,aAAA,+BACAC,qBACAC,aACAC,MAAA,QACAC,MAAA,QAMAL,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,SAMAL,MACAC,aAAA,gCACAC,qBACAC,aACAC,MAAA,WACAC,MAAA,SAMAL,MACAC,aAAA,qCACAC,qBACAC,aACAC,MAAA,qBACAC,MAAA,SAMAL,MACAC,aAAA,gCACAC,qBACAC,aACAC,MAAA,UACAC,MAAA,SAMAL,MACAC,aAAA,+BACAC,qBACAC,aACAC,MAAA,UACAC,MAAA,SAMAL,MACAC,aAAA,2BACAC,qBACAC,aACAC,MAAA,MACAC,MAAA,SAMAL,MACAC,aAAA,wCACAC,qBACAC,aACAC,MAAA,qBACAC,MAAA,SAMAL,MACAC,aAAA,6BACAC,qBACAC,aACAC,MAAA,eACAC,MAAA,QAMAL,MACAC,aAAA,yCACAC,qBACAC,aACAC,MAAA,QACAC,MAAA,QAMAL,MACAC,aAAA,sCACAC,qBACAC,aACAC,MAAA,kBACAC,MAAA,QAMAL,MACAC,aAAA,8BACAC,qBACAC,aACAC,MAAA,SACAC,MAAA,SAMAL,MACAC,aAAA,mCACAC,qBACAC,aACAC,MAAA,eACAC,MAAA,QAMAL,MACAC,aAAA,oCACAC,qBACAC,aACAC,MAAA,iBACAC,MAAA,SAMAL,MACAC,aAAA,gCACAC,qBACAC,aACAC,MAAA,UACAC,MAAA,SAMAL,MACAC,aAAA,8BACAC,qBACAC,aACAC,MAAA,SACAC,MAAA,SAMAL,MACAC,aAAA,wCACAC,qBACAC,aACAC,MAAA,kBACAC,MAAA,SAMAL,MACAC,aAAA,8BACAC,qBACAC,aACAC,MAAA,SACAC,MAAA,QAMAL,MACAC,aAAA,uCACAC,qBACAC,aACAC,MAAA,kBACAC,MAAA,QAMAL,MACAC,aAAA,gCACAC,qBACAC,aACAC,MAAA,QACAC,MAAA,OAMAL,MACAC,aAAA,6BACAC,qBACAC,aACAC,MAAA,SACAC,MAAA,QAMAL,MACAC,aAAA,4BACAC,qBACAC,aACAC,MAAA,OACAC,MAAA,QAMAL,MACAC,aAAA,wCACAC,qBACAC,aACAC,MAAA,wBACAC,MAAA,OAMAL,MACAC,aAAA,+BACAC,qBACAC,aACAC,MAAA,WACAC,MAAA,QAMAL,MACAC,aAAA,2BACAC,qBACAC,aACAC,MAAA,SACAC,MAAA,QAMAL,MACAC,aAAA,gCACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,QAOAC,MACAL,aAAA,iCACAC,qBACAK,KAAA,m2cACAJ,aACAC,MAAA,qBAKAI,aACAC,QAAA,KACAR,aAAA,iCACAS,aAAA","file":"path---ru-guide-javascript-interop-e38e0cd2a529b0e6f20d.js","sourcesContent":["webpackJsonp([43],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/ru-guide-javascript-interop.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"allFile\": {\n\t\t\t\t\"edges\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/examples.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Примеры\",\n\t\t\t\t\t\t\t\t\t\"order\": 60\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Гайд по Reason\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/ocaml.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Comparison to OCaml\",\n\t\t\t\t\t\t\t\t\t\"order\": 50\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/what-and-why.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Что и Зачем\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/javascript/converting.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Перенос JS кода\",\n\t\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/javascript/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"JavaScript\",\n\t\t\t\t\t\t\t\t\t\"order\": 30\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/javascript/interop.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Взаимодействие\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/javascript/libraries.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Библиотеки\",\n\t\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/javascript/quickstart.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Быстрый старт\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/editor-tools/editors-plugins.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Плагины редактора\",\n\t\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/javascript/syntax-cheatsheet.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Шпаргалка по синтаксису\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/editor-tools/extra-goodies.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Дополнительные бонусы\",\n\t\t\t\t\t\t\t\t\t\"order\": 30\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/editor-tools/global-installation.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Глобальная установка\",\n\t\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/editor-tools/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Настройка редактора\",\n\t\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/boolean.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Булев\",\n\t\t\t\t\t\t\t\t\t\"order\": 30\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/exception.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Исключения\",\n\t\t\t\t\t\t\t\t\t\"order\": 175\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/external.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"External\",\n\t\t\t\t\t\t\t\t\t\"order\": 170\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/destructuring.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Деструктурирование\",\n\t\t\t\t\t\t\t\t\t\"order\": 130\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/function.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Функция\",\n\t\t\t\t\t\t\t\t\t\"order\": 100\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/if-else.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"If-Else\",\n\t\t\t\t\t\t\t\t\t\"order\": 110\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/jsx.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"JSX\",\n\t\t\t\t\t\t\t\t\t\"order\": 160\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/imperative-loops.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Императивные циклы\",\n\t\t\t\t\t\t\t\t\t\"order\": 150\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Основы языка\",\n\t\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/integer-and-float.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Числа\",\n\t\t\t\t\t\t\t\t\t\"order\": 40\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/list-and-array.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Список и Массив\",\n\t\t\t\t\t\t\t\t\t\"order\": 80\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/module.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Модуль\",\n\t\t\t\t\t\t\t\t\t\"order\": 180\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/let-binding.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Let привязка\",\n\t\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/more-on-type.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Больше о типах\",\n\t\t\t\t\t\t\t\t\t\"order\": 120\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/mutation.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Мутации\",\n\t\t\t\t\t\t\t\t\t\"order\": 140\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/object.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Объект\",\n\t\t\t\t\t\t\t\t\t\"order\": 175\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/pattern-matching.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Паттерн-матчинг\",\n\t\t\t\t\t\t\t\t\t\"order\": 135\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/record.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Запись\",\n\t\t\t\t\t\t\t\t\t\"order\": 60\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/string-and-char.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Строка и символ\",\n\t\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/overview.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Обзор\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/tuple.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Кортеж\",\n\t\t\t\t\t\t\t\t\t\"order\": 50\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/type.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Тип!\",\n\t\t\t\t\t\t\t\t\t\"order\": 15\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/native/convert-from-ocaml.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Converting from OCaml\",\n\t\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/variant.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Вариант!\",\n\t\t\t\t\t\t\t\t\t\"order\": 70\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/native/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Native\",\n\t\t\t\t\t\t\t\t\t\"order\": 40\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"ru/guide/native/quickstart.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"file\": {\n\t\t\t\t\"relativePath\": \"ru/guide/javascript/interop.md\",\n\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\"html\": \"<h2 id=\\\"Просто-вставьте-javascript-в-ваш-reason-код\\\"><a href=\\\"#%D0%9F%D1%80%D0%BE%D1%81%D1%82%D0%BE-%D0%B2%D1%81%D1%82%D0%B0%D0%B2%D1%8C%D1%82%D0%B5-javascript-%D0%B2-%D0%B2%D0%B0%D1%88-reason-%D0%BA%D0%BE%D0%B4\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Просто вставьте JavaScript в ваш Reason код</h2>\\n<p>Если вы просто пытаетесь соединить все воедино, то это удобный способ,\\nно вы получите всю опасность JavaScript кода 😄.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-type\\\">Js</span>.log <span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>;\\n[%%bs.raw {|\\nconsole.log(<span class=\\\"hljs-symbol\\\">'here</span> is some javascript <span class=\\\"hljs-keyword\\\">for</span> you');\\n|}];</code></pre>\\n      </div>\\n<blockquote>\\n<p><code>{|</code> и <code>|}</code> — это разделители строки в OCaml. Вы можете использовать\\nдругой тег, например <code>{something|</code> вначале и соответствующий ему <code>|something}</code>\\nв конце.</p>\\n</blockquote>\\n<p>И вот полученный JS код:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-javascript\\\"><code><span class=\\\"hljs-comment\\\">// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE</span>\\n'use strict';\\nconsole.log(<span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>);\\nconsole.log('here <span class=\\\"hljs-keyword\\\">is</span> some javascript <span class=\\\"hljs-keyword\\\">for</span> you');</code></pre>\\n      </div>\\n<h2 id=\\\"Доступ-к-javascript-из-reason\\\"><a href=\\\"#%D0%94%D0%BE%D1%81%D1%82%D1%83%D0%BF-%D0%BA-javascript-%D0%B8%D0%B7-reason\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Доступ к JavaScript из Reason</h2>\\n<p>What if you want a value that can be used from your Reason code?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-type\\\">Js</span>.log <span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> x = [%bs.raw {| <span class=\\\"hljs-symbol\\\">'here</span> is a <span class=\\\"hljs-built_in\\\">string</span> from javascript' |}];\\n<span class=\\\"hljs-type\\\">Js</span>.log (x ^ <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>); /* ^ это оператор для конкатенации строк */</code></pre>\\n      </div>\\n<p>Теперь вы спросите \\\"что это за магия? как OCaml знает, что <code>x</code> является строкой?\\\".\\nСекрет в том, что <strong>не знает</strong>. Тип переменной <code>x</code> это магический тип,\\nкоторый объединяет все. Это довольно опасно и может привести к каскаду проблем\\nв системе типов.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> y = [%bs.raw {| <span class=\\\"hljs-symbol\\\">'something'</span> |}];\\n<span class=\\\"hljs-type\\\">Js</span>.log (<span class=\\\"hljs-string\\\">\\\"a string\\\"</span> ^ y, <span class=\\\"hljs-number\\\">10</span> + y);\\n/* опасность!! ocaml не остановит вас от использования <span class=\\\"hljs-string\\\">\\\"y\\\"</span> в двух типах */</code></pre>\\n      </div>\\n<p>Для того, чтобы обойти это, вы должны <strong>всегда</strong> указывать конкретны тип\\nдля результата <code>bs.raw</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> x: <span class=\\\"hljs-built_in\\\">string</span> = [%bs.raw {| <span class=\\\"hljs-symbol\\\">'well</span>-typed' |}];\\n<span class=\\\"hljs-type\\\">Js</span>.log (x ^ <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>);\\n/* ocaml выдаст ошибку, если вы попытаетесь использовать <span class=\\\"hljs-string\\\">\\\"x\\\"</span> не как строку */</code></pre>\\n      </div>\\n<p>И вот вывод:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-javascript\\\"><code>// Generated by BUCKLESCRIPT VERSION <span class=\\\"hljs-number\\\">1.7</span>.<span class=\\\"hljs-number\\\">4</span>, PLEASE EDIT WITH CARE\\n<span class=\\\"hljs-string\\\">'use strict'</span>;\\nconsole.log(<span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>);\\nvar x = ( <span class=\\\"hljs-string\\\">'here is a string from javascript'</span> );\\nconsole.log(x + <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>);\\nvar y = ( <span class=\\\"hljs-string\\\">'something'</span> );\\nconsole.log(/* tuple */[\\n      <span class=\\\"hljs-string\\\">\\\"a string\\\"</span> + y,\\n      <span class=\\\"hljs-number\\\">10</span> + y | <span class=\\\"hljs-number\\\">0</span>\\n    ]);\\nvar x<span class=\\\"hljs-variable\\\">$1</span> = ( <span class=\\\"hljs-string\\\">'well-typed'</span> );\\nconsole.log(x<span class=\\\"hljs-variable\\\">$1</span> + <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>);</code></pre>\\n      </div>\\n<blockquote>\\n<p>Разница между двумя <code>%%</code> из предыдущей секции и одним <code>%</code> здесь очень\\nважно! <code>[%%something ...]</code> это расширение OCaml, которое представляет\\n<em>верхнеуровневое</em> выражение (и не может быть внутри функции или значения).\\n<code>[%something ...]</code> это расширение, которое работает как <em>выражение</em> и может быть\\nиспользовано везде, где могут быть выражения. Просто убедитесь, что JS код внутри\\nтак же является выражением. То есть не используйте точку с запятой, иначе получите\\nошибку.</p>\\n</blockquote>\\n<h2 id=\\\"Использование-функций-и-передача-значений\\\"><a href=\\\"#%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B9-%D0%B8-%D0%BF%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Использование функций и передача значений</h2>\\n<p>Для начала нужно иметь некоторое представление о рантайме Bucklescript.</p>\\n<ul>\\n<li><code>strings</code> работают как String в JS, <code>ints</code> и <code>floats</code> как Number</li>\\n<li><a href=\\\"../../guide/language/list-and-array#list\\\">Array</a> это изменяемый, с фиксированной\\nдлиной список в OCaml, и представлен как обычный JS массив</li>\\n<li><a href=\\\"../../guide/language/list-and-array#array\\\">List</a> это неизменяемый функциональный\\nсвязанный список и наиболее подходящий чем массив для большинства случаем.\\nОднако его представление весьма сложно (попробуйте сделать <code>Js.log [1,2,3,4]</code>).\\nИз-за этого лучше конвертировать его в/из массив при работе с JS при помощи\\n<code>Array.of_list</code> и <code>Array.to_list</code>.</li>\\n<li>Если хотите копнуть глубже,но используйте <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_runtime_representation\\\">мануал BuckleScript</a></li>\\n</ul>\\n<p>Зная это, мы можем написать функцию в JavaScript, которая принимаем массив\\nи возвращает число:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> jsCalculate: <span class=\\\"hljs-built_in\\\">array</span> <span class=\\\"hljs-built_in\\\">int</span> =&gt; <span class=\\\"hljs-built_in\\\">int</span> =&gt; <span class=\\\"hljs-built_in\\\">int</span> = [%bs.raw {|\\n <span class=\\\"hljs-keyword\\\">function</span> (numbers, scaleFactor) {\\n   var result = <span class=\\\"hljs-number\\\">0</span>;\\n   numbers.forEach(number =&gt; {\\n     result += number;\\n   });\\n   return result * scaleFactor;\\n }\\n|}];\\n<span class=\\\"hljs-keyword\\\">let</span> calculate numbers scaleFactor =&gt;\\n  jsCalculate (<span class=\\\"hljs-type\\\">Array</span>.of_list numbers) scaleFactor;\\n<span class=\\\"hljs-type\\\">Js</span>.log (calculate [<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">3</span>] <span class=\\\"hljs-number\\\">10</span>); /* -&gt; <span class=\\\"hljs-number\\\">60</span> */</code></pre>\\n      </div>\\n<p>Конечно, эта функция может быть без проблем сконвертирована в Reason.</p>\\n<p><strong>Запомните</strong>, что это удобный хак, который полезен, когда вы изучаете язык,\\nно хорошей идеей будет вернуться и перевести код на безопасный Reason.</p>\\n<h2 id=\\\"Сделаем-шаг-назад-и-будем-более-дисциплинированы\\\"><a href=\\\"#%D0%A1%D0%B4%D0%B5%D0%BB%D0%B0%D0%B5%D0%BC-%D1%88%D0%B0%D0%B3-%D0%BD%D0%B0%D0%B7%D0%B0%D0%B4-%D0%B8-%D0%B1%D1%83%D0%B4%D0%B5%D0%BC-%D0%B1%D0%BE%D0%BB%D0%B5%D0%B5-%D0%B4%D0%B8%D1%81%D1%86%D0%B8%D0%BF%D0%BB%D0%B8%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D1%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Сделаем шаг назад и будем более дисциплинированы</h2>\\n<p>Мы научились использовать <code>bs.raw</code>, который является быстрым способом старта,\\nно <strong>не подходит</strong> для продакшена.</p>\\n<p>Что если нам действительно нужно вызвать функцию, которая находится в\\nJavaScript? Это необходимо при работе с DOM или различными модулями. В\\nBuckleScript для этого можно использовать объявление\\n<code>external</code> (<a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_binding_to_simple_js_functions_values\\\">документация</a>).</p>\\n<p>Получение значения и функции достаточно простое:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">external</span> pi: <span class=\\\"hljs-built_in\\\">float</span> = <span class=\\\"hljs-string\\\">\\\"Math.PI\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">val</span>];\\n<span class=\\\"hljs-keyword\\\">let</span> tau = pi *. <span class=\\\"hljs-number\\\">2.0</span>;\\n<span class=\\\"hljs-keyword\\\">external</span> alert: <span class=\\\"hljs-built_in\\\">string</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"alert\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">val</span>];\\nalert <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>;</code></pre>\\n      </div>\\n<p>Но, что если мы хотим сделать нечто более сложное? Вот как мы можем\\nвызвать метод <code>getContext</code> канвас объекта:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">type</span> canvas;\\n<span class=\\\"hljs-keyword\\\">type</span> context;\\n/* мы оставляем типы абстрактным, потому как не хотим\\n * чтобы их использовали напрямую */\\n<span class=\\\"hljs-keyword\\\">external</span> getContext: canvas =&gt; <span class=\\\"hljs-built_in\\\">string</span> =&gt; context = <span class=\\\"hljs-string\\\">\\\"\\\"</span> [@@bs.send];\\n<span class=\\\"hljs-keyword\\\">let</span> myCanvas: canvas = [%bs.raw {| document.getElementById(<span class=\\\"hljs-string\\\">\\\"mycanvas\\\"</span>) |}];\\n<span class=\\\"hljs-keyword\\\">let</span> ctx = getContext myCanvas <span class=\\\"hljs-string\\\">\\\"2d\\\"</span>;</code></pre>\\n      </div>\\n<p>Давайте разберемся что происходит. Мы создали абстрактные типы для\\nCanvas или для его RenderingContext.</p>\\n<p>Потому мы указываем функцию <code>getContext</code>, но вместо <code>@@bs.val</code> мы используем <code>@@bs.send</code>,\\nи мы используем пустую строку для указания текста внешней сущности.\\n<code>@@bs.send</code> означает \\\"мы вызываем метод у первого аргумента\\\", который в\\nданном случае канвас.B uckleScript сделает из этого <code>theFirstArgument.getContext(theSecondArgument, ...)</code>.</p>\\n<p>Пустая строка означает \\\"имя сущности в JS точно такое же как в объявлении\\\",\\nв данном случая это <code>getContext</code>. Если мы хотим переименовать метод\\n(например <code>getRenderingContext</code>), можно передать строку с именем.</p>\\n<p>Давайте добавим еще функций:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">external</span> fillRect: context =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"\\\"</span> [@@bs.send];</code></pre>\\n      </div>\\n<p>И теперь мы можем нарисовать круг!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code>fillRect ctx <span class=\\\"hljs-number\\\">0.0</span> <span class=\\\"hljs-number\\\">0.0</span> <span class=\\\"hljs-number\\\">100.0</span> <span class=\\\"hljs-number\\\">100.0</span>;</code></pre>\\n      </div>\\n<p>Добавление других методом происходит точно так же. И вы можете начать\\nделать <a href=\\\"https://twitter.com/jaredforsyth/status/871062358076030976\\\">интересные штуки</a>.</p>\\n<p>А как это выглядит после компиляции?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-javascript\\\"><code>'use strict';\\n<span class=\\\"hljs-keyword\\\">var</span> tau = <span class=\\\"hljs-type\\\">Math</span>.<span class=\\\"hljs-type\\\">PI</span> * <span class=\\\"hljs-number\\\">2.0</span>;\\nalert(<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>);\\n<span class=\\\"hljs-keyword\\\">var</span> myCanvas = ( document.getElementById(<span class=\\\"hljs-string\\\">\\\"mycanvas\\\"</span>) );\\n<span class=\\\"hljs-keyword\\\">var</span> ctx = myCanvas.getContext(<span class=\\\"hljs-string\\\">\\\"2d\\\"</span>);\\nctx.fillRect(<span class=\\\"hljs-number\\\">0.0</span>, <span class=\\\"hljs-number\\\">0.0</span>, <span class=\\\"hljs-number\\\">100.0</span>, <span class=\\\"hljs-number\\\">100.0</span>);</code></pre>\\n      </div>\\n<p>Заметьте как BuckleScript встроил <code>pi</code> переменную для нас? Конечный код\\nвыглядит практически так же, как если бы он был написан человеком.</p>\",\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"title\": \"Взаимодействие\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"section\": \"ru\",\n\t\t\t\"relativePath\": \"ru/guide/javascript/interop.md\",\n\t\t\t\"relatedFiles\": \"/^ru\\\\/.*\\\\.md$/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---ru-guide-javascript-interop-e38e0cd2a529b0e6f20d.js","module.exports = {\n\t\"data\": {\n\t\t\"allFile\": {\n\t\t\t\"edges\": [\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/examples.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Примеры\",\n\t\t\t\t\t\t\t\t\"order\": 60\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Гайд по Reason\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/ocaml.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Comparison to OCaml\",\n\t\t\t\t\t\t\t\t\"order\": 50\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/what-and-why.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Что и Зачем\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/javascript/converting.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Перенос JS кода\",\n\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/javascript/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"JavaScript\",\n\t\t\t\t\t\t\t\t\"order\": 30\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/javascript/interop.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Взаимодействие\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/javascript/libraries.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Библиотеки\",\n\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/javascript/quickstart.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Быстрый старт\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/editor-tools/editors-plugins.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Плагины редактора\",\n\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/javascript/syntax-cheatsheet.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Шпаргалка по синтаксису\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/editor-tools/extra-goodies.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Дополнительные бонусы\",\n\t\t\t\t\t\t\t\t\"order\": 30\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/editor-tools/global-installation.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Глобальная установка\",\n\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/editor-tools/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Настройка редактора\",\n\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/boolean.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Булев\",\n\t\t\t\t\t\t\t\t\"order\": 30\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/exception.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Исключения\",\n\t\t\t\t\t\t\t\t\"order\": 175\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/external.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"External\",\n\t\t\t\t\t\t\t\t\"order\": 170\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/destructuring.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Деструктурирование\",\n\t\t\t\t\t\t\t\t\"order\": 130\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/function.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Функция\",\n\t\t\t\t\t\t\t\t\"order\": 100\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/if-else.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"If-Else\",\n\t\t\t\t\t\t\t\t\"order\": 110\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/jsx.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"JSX\",\n\t\t\t\t\t\t\t\t\"order\": 160\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/imperative-loops.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Императивные циклы\",\n\t\t\t\t\t\t\t\t\"order\": 150\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Основы языка\",\n\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/integer-and-float.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Числа\",\n\t\t\t\t\t\t\t\t\"order\": 40\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/list-and-array.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Список и Массив\",\n\t\t\t\t\t\t\t\t\"order\": 80\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/module.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Модуль\",\n\t\t\t\t\t\t\t\t\"order\": 180\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/let-binding.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Let привязка\",\n\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/more-on-type.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Больше о типах\",\n\t\t\t\t\t\t\t\t\"order\": 120\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/mutation.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Мутации\",\n\t\t\t\t\t\t\t\t\"order\": 140\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/object.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Объект\",\n\t\t\t\t\t\t\t\t\"order\": 175\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/pattern-matching.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Паттерн-матчинг\",\n\t\t\t\t\t\t\t\t\"order\": 135\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/record.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Запись\",\n\t\t\t\t\t\t\t\t\"order\": 60\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/string-and-char.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Строка и символ\",\n\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/overview.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Обзор\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/tuple.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Кортеж\",\n\t\t\t\t\t\t\t\t\"order\": 50\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/type.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Тип!\",\n\t\t\t\t\t\t\t\t\"order\": 15\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/native/convert-from-ocaml.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Converting from OCaml\",\n\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/language/variant.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Вариант!\",\n\t\t\t\t\t\t\t\t\"order\": 70\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/native/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Native\",\n\t\t\t\t\t\t\t\t\"order\": 40\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"ru/guide/native/quickstart.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"file\": {\n\t\t\t\"relativePath\": \"ru/guide/javascript/interop.md\",\n\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\"html\": \"<h2 id=\\\"Просто-вставьте-javascript-в-ваш-reason-код\\\"><a href=\\\"#%D0%9F%D1%80%D0%BE%D1%81%D1%82%D0%BE-%D0%B2%D1%81%D1%82%D0%B0%D0%B2%D1%8C%D1%82%D0%B5-javascript-%D0%B2-%D0%B2%D0%B0%D1%88-reason-%D0%BA%D0%BE%D0%B4\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Просто вставьте JavaScript в ваш Reason код</h2>\\n<p>Если вы просто пытаетесь соединить все воедино, то это удобный способ,\\nно вы получите всю опасность JavaScript кода 😄.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-type\\\">Js</span>.log <span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>;\\n[%%bs.raw {|\\nconsole.log(<span class=\\\"hljs-symbol\\\">'here</span> is some javascript <span class=\\\"hljs-keyword\\\">for</span> you');\\n|}];</code></pre>\\n      </div>\\n<blockquote>\\n<p><code>{|</code> и <code>|}</code> — это разделители строки в OCaml. Вы можете использовать\\nдругой тег, например <code>{something|</code> вначале и соответствующий ему <code>|something}</code>\\nв конце.</p>\\n</blockquote>\\n<p>И вот полученный JS код:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-javascript\\\"><code><span class=\\\"hljs-comment\\\">// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE</span>\\n'use strict';\\nconsole.log(<span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>);\\nconsole.log('here <span class=\\\"hljs-keyword\\\">is</span> some javascript <span class=\\\"hljs-keyword\\\">for</span> you');</code></pre>\\n      </div>\\n<h2 id=\\\"Доступ-к-javascript-из-reason\\\"><a href=\\\"#%D0%94%D0%BE%D1%81%D1%82%D1%83%D0%BF-%D0%BA-javascript-%D0%B8%D0%B7-reason\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Доступ к JavaScript из Reason</h2>\\n<p>What if you want a value that can be used from your Reason code?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-type\\\">Js</span>.log <span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> x = [%bs.raw {| <span class=\\\"hljs-symbol\\\">'here</span> is a <span class=\\\"hljs-built_in\\\">string</span> from javascript' |}];\\n<span class=\\\"hljs-type\\\">Js</span>.log (x ^ <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>); /* ^ это оператор для конкатенации строк */</code></pre>\\n      </div>\\n<p>Теперь вы спросите \\\"что это за магия? как OCaml знает, что <code>x</code> является строкой?\\\".\\nСекрет в том, что <strong>не знает</strong>. Тип переменной <code>x</code> это магический тип,\\nкоторый объединяет все. Это довольно опасно и может привести к каскаду проблем\\nв системе типов.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> y = [%bs.raw {| <span class=\\\"hljs-symbol\\\">'something'</span> |}];\\n<span class=\\\"hljs-type\\\">Js</span>.log (<span class=\\\"hljs-string\\\">\\\"a string\\\"</span> ^ y, <span class=\\\"hljs-number\\\">10</span> + y);\\n/* опасность!! ocaml не остановит вас от использования <span class=\\\"hljs-string\\\">\\\"y\\\"</span> в двух типах */</code></pre>\\n      </div>\\n<p>Для того, чтобы обойти это, вы должны <strong>всегда</strong> указывать конкретны тип\\nдля результата <code>bs.raw</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> x: <span class=\\\"hljs-built_in\\\">string</span> = [%bs.raw {| <span class=\\\"hljs-symbol\\\">'well</span>-typed' |}];\\n<span class=\\\"hljs-type\\\">Js</span>.log (x ^ <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>);\\n/* ocaml выдаст ошибку, если вы попытаетесь использовать <span class=\\\"hljs-string\\\">\\\"x\\\"</span> не как строку */</code></pre>\\n      </div>\\n<p>И вот вывод:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-javascript\\\"><code>// Generated by BUCKLESCRIPT VERSION <span class=\\\"hljs-number\\\">1.7</span>.<span class=\\\"hljs-number\\\">4</span>, PLEASE EDIT WITH CARE\\n<span class=\\\"hljs-string\\\">'use strict'</span>;\\nconsole.log(<span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>);\\nvar x = ( <span class=\\\"hljs-string\\\">'here is a string from javascript'</span> );\\nconsole.log(x + <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>);\\nvar y = ( <span class=\\\"hljs-string\\\">'something'</span> );\\nconsole.log(/* tuple */[\\n      <span class=\\\"hljs-string\\\">\\\"a string\\\"</span> + y,\\n      <span class=\\\"hljs-number\\\">10</span> + y | <span class=\\\"hljs-number\\\">0</span>\\n    ]);\\nvar x<span class=\\\"hljs-variable\\\">$1</span> = ( <span class=\\\"hljs-string\\\">'well-typed'</span> );\\nconsole.log(x<span class=\\\"hljs-variable\\\">$1</span> + <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>);</code></pre>\\n      </div>\\n<blockquote>\\n<p>Разница между двумя <code>%%</code> из предыдущей секции и одним <code>%</code> здесь очень\\nважно! <code>[%%something ...]</code> это расширение OCaml, которое представляет\\n<em>верхнеуровневое</em> выражение (и не может быть внутри функции или значения).\\n<code>[%something ...]</code> это расширение, которое работает как <em>выражение</em> и может быть\\nиспользовано везде, где могут быть выражения. Просто убедитесь, что JS код внутри\\nтак же является выражением. То есть не используйте точку с запятой, иначе получите\\nошибку.</p>\\n</blockquote>\\n<h2 id=\\\"Использование-функций-и-передача-значений\\\"><a href=\\\"#%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B9-%D0%B8-%D0%BF%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B9\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Использование функций и передача значений</h2>\\n<p>Для начала нужно иметь некоторое представление о рантайме Bucklescript.</p>\\n<ul>\\n<li><code>strings</code> работают как String в JS, <code>ints</code> и <code>floats</code> как Number</li>\\n<li><a href=\\\"../../guide/language/list-and-array#list\\\">Array</a> это изменяемый, с фиксированной\\nдлиной список в OCaml, и представлен как обычный JS массив</li>\\n<li><a href=\\\"../../guide/language/list-and-array#array\\\">List</a> это неизменяемый функциональный\\nсвязанный список и наиболее подходящий чем массив для большинства случаем.\\nОднако его представление весьма сложно (попробуйте сделать <code>Js.log [1,2,3,4]</code>).\\nИз-за этого лучше конвертировать его в/из массив при работе с JS при помощи\\n<code>Array.of_list</code> и <code>Array.to_list</code>.</li>\\n<li>Если хотите копнуть глубже,но используйте <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_runtime_representation\\\">мануал BuckleScript</a></li>\\n</ul>\\n<p>Зная это, мы можем написать функцию в JavaScript, которая принимаем массив\\nи возвращает число:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> jsCalculate: <span class=\\\"hljs-built_in\\\">array</span> <span class=\\\"hljs-built_in\\\">int</span> =&gt; <span class=\\\"hljs-built_in\\\">int</span> =&gt; <span class=\\\"hljs-built_in\\\">int</span> = [%bs.raw {|\\n <span class=\\\"hljs-keyword\\\">function</span> (numbers, scaleFactor) {\\n   var result = <span class=\\\"hljs-number\\\">0</span>;\\n   numbers.forEach(number =&gt; {\\n     result += number;\\n   });\\n   return result * scaleFactor;\\n }\\n|}];\\n<span class=\\\"hljs-keyword\\\">let</span> calculate numbers scaleFactor =&gt;\\n  jsCalculate (<span class=\\\"hljs-type\\\">Array</span>.of_list numbers) scaleFactor;\\n<span class=\\\"hljs-type\\\">Js</span>.log (calculate [<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">3</span>] <span class=\\\"hljs-number\\\">10</span>); /* -&gt; <span class=\\\"hljs-number\\\">60</span> */</code></pre>\\n      </div>\\n<p>Конечно, эта функция может быть без проблем сконвертирована в Reason.</p>\\n<p><strong>Запомните</strong>, что это удобный хак, который полезен, когда вы изучаете язык,\\nно хорошей идеей будет вернуться и перевести код на безопасный Reason.</p>\\n<h2 id=\\\"Сделаем-шаг-назад-и-будем-более-дисциплинированы\\\"><a href=\\\"#%D0%A1%D0%B4%D0%B5%D0%BB%D0%B0%D0%B5%D0%BC-%D1%88%D0%B0%D0%B3-%D0%BD%D0%B0%D0%B7%D0%B0%D0%B4-%D0%B8-%D0%B1%D1%83%D0%B4%D0%B5%D0%BC-%D0%B1%D0%BE%D0%BB%D0%B5%D0%B5-%D0%B4%D0%B8%D1%81%D1%86%D0%B8%D0%BF%D0%BB%D0%B8%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D1%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Сделаем шаг назад и будем более дисциплинированы</h2>\\n<p>Мы научились использовать <code>bs.raw</code>, который является быстрым способом старта,\\nно <strong>не подходит</strong> для продакшена.</p>\\n<p>Что если нам действительно нужно вызвать функцию, которая находится в\\nJavaScript? Это необходимо при работе с DOM или различными модулями. В\\nBuckleScript для этого можно использовать объявление\\n<code>external</code> (<a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_binding_to_simple_js_functions_values\\\">документация</a>).</p>\\n<p>Получение значения и функции достаточно простое:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">external</span> pi: <span class=\\\"hljs-built_in\\\">float</span> = <span class=\\\"hljs-string\\\">\\\"Math.PI\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">val</span>];\\n<span class=\\\"hljs-keyword\\\">let</span> tau = pi *. <span class=\\\"hljs-number\\\">2.0</span>;\\n<span class=\\\"hljs-keyword\\\">external</span> alert: <span class=\\\"hljs-built_in\\\">string</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"alert\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">val</span>];\\nalert <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>;</code></pre>\\n      </div>\\n<p>Но, что если мы хотим сделать нечто более сложное? Вот как мы можем\\nвызвать метод <code>getContext</code> канвас объекта:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">type</span> canvas;\\n<span class=\\\"hljs-keyword\\\">type</span> context;\\n/* мы оставляем типы абстрактным, потому как не хотим\\n * чтобы их использовали напрямую */\\n<span class=\\\"hljs-keyword\\\">external</span> getContext: canvas =&gt; <span class=\\\"hljs-built_in\\\">string</span> =&gt; context = <span class=\\\"hljs-string\\\">\\\"\\\"</span> [@@bs.send];\\n<span class=\\\"hljs-keyword\\\">let</span> myCanvas: canvas = [%bs.raw {| document.getElementById(<span class=\\\"hljs-string\\\">\\\"mycanvas\\\"</span>) |}];\\n<span class=\\\"hljs-keyword\\\">let</span> ctx = getContext myCanvas <span class=\\\"hljs-string\\\">\\\"2d\\\"</span>;</code></pre>\\n      </div>\\n<p>Давайте разберемся что происходит. Мы создали абстрактные типы для\\nCanvas или для его RenderingContext.</p>\\n<p>Потому мы указываем функцию <code>getContext</code>, но вместо <code>@@bs.val</code> мы используем <code>@@bs.send</code>,\\nи мы используем пустую строку для указания текста внешней сущности.\\n<code>@@bs.send</code> означает \\\"мы вызываем метод у первого аргумента\\\", который в\\nданном случае канвас.B uckleScript сделает из этого <code>theFirstArgument.getContext(theSecondArgument, ...)</code>.</p>\\n<p>Пустая строка означает \\\"имя сущности в JS точно такое же как в объявлении\\\",\\nв данном случая это <code>getContext</code>. Если мы хотим переименовать метод\\n(например <code>getRenderingContext</code>), можно передать строку с именем.</p>\\n<p>Давайте добавим еще функций:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">external</span> fillRect: context =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"\\\"</span> [@@bs.send];</code></pre>\\n      </div>\\n<p>И теперь мы можем нарисовать круг!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code>fillRect ctx <span class=\\\"hljs-number\\\">0.0</span> <span class=\\\"hljs-number\\\">0.0</span> <span class=\\\"hljs-number\\\">100.0</span> <span class=\\\"hljs-number\\\">100.0</span>;</code></pre>\\n      </div>\\n<p>Добавление других методом происходит точно так же. И вы можете начать\\nделать <a href=\\\"https://twitter.com/jaredforsyth/status/871062358076030976\\\">интересные штуки</a>.</p>\\n<p>А как это выглядит после компиляции?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-javascript\\\"><code>'use strict';\\n<span class=\\\"hljs-keyword\\\">var</span> tau = <span class=\\\"hljs-type\\\">Math</span>.<span class=\\\"hljs-type\\\">PI</span> * <span class=\\\"hljs-number\\\">2.0</span>;\\nalert(<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>);\\n<span class=\\\"hljs-keyword\\\">var</span> myCanvas = ( document.getElementById(<span class=\\\"hljs-string\\\">\\\"mycanvas\\\"</span>) );\\n<span class=\\\"hljs-keyword\\\">var</span> ctx = myCanvas.getContext(<span class=\\\"hljs-string\\\">\\\"2d\\\"</span>);\\nctx.fillRect(<span class=\\\"hljs-number\\\">0.0</span>, <span class=\\\"hljs-number\\\">0.0</span>, <span class=\\\"hljs-number\\\">100.0</span>, <span class=\\\"hljs-number\\\">100.0</span>);</code></pre>\\n      </div>\\n<p>Заметьте как BuckleScript встроил <code>pi</code> переменную для нас? Конечный код\\nвыглядит практически так же, как если бы он был написан человеком.</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Взаимодействие\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"section\": \"ru\",\n\t\t\"relativePath\": \"ru/guide/javascript/interop.md\",\n\t\t\"relatedFiles\": \"/^ru\\\\/.*\\\\.md$/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/ru-guide-javascript-interop.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/ru-guide-javascript-interop.json\n// module chunks = 43"],"sourceRoot":""}