webpackJsonp([315],{"./node_modules/json-loader/index.js!./.cache/json/api-ast-helper-sig-html.json":function(e,t){e.exports={data:{file:{relativePath:"api/Ast_helper.Sig.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar"><a class="pre" href="Ast_helper.Mod.html" title="Ast_helper.Mod">Previous</a>\n&#xA0;<a class="up" href="Ast_helper.html" title="Ast_helper">Up</a>\n&#xA0;<a class="post" href="Ast_helper.Str.html" title="Ast_helper.Str">Next</a>\n</div>\n<h1>Module <a href="type_Ast_helper.Sig.html">Ast_helper.Sig</a></h1>\n\n<pre><span class="keyword">module</span> Sig: sig .. end</pre><div class="info module top">\nSignature items<br>\n</div>\n<hr width="100%">\n\n<pre id="VALmk"><span class="keyword">let</span> mk: (~loc: Ast_helper.loc=?, Parsetree.signature_item_desc) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALvalue"><span class="keyword">let</span> value: (~loc: Ast_helper.loc=?, Parsetree.value_description) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALtype_"><span class="keyword">let</span> type_: (~loc: Ast_helper.loc=?, list(Parsetree.type_declaration)) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALtype_extension"><span class="keyword">let</span> type_extension: (~loc: Ast_helper.loc=?, Parsetree.type_extension) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALexception_"><span class="keyword">let</span> exception_:\n  (~loc: Ast_helper.loc=?, Parsetree.extension_constructor) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALmodule_"><span class="keyword">let</span> module_: (~loc: Ast_helper.loc=?, Parsetree.module_declaration) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALrec_module"><span class="keyword">let</span> rec_module:\n  (~loc: Ast_helper.loc=?, list(Parsetree.module_declaration)) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALmodtype"><span class="keyword">let</span> modtype:\n  (~loc: Ast_helper.loc=?, Parsetree.module_type_declaration) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALopen_"><span class="keyword">let</span> open_: (~loc: Ast_helper.loc=?, Parsetree.open_description) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALinclude_"><span class="keyword">let</span> include_: (~loc: Ast_helper.loc=?, Parsetree.include_description) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALclass_"><span class="keyword">let</span> class_:\n  (~loc: Ast_helper.loc=?, list(Parsetree.class_description)) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALclass_type"><span class="keyword">let</span> class_type:\n  (~loc: Ast_helper.loc=?, list(Parsetree.class_type_declaration)) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALextension"><span class="keyword">let</span> extension:\n  (~loc: Ast_helper.loc=?, ~attrs: Ast_helper.attrs=?, Parsetree.extension) =&gt;\n  Parsetree.signature_item;\n</pre>\n<pre id="VALattribute"><span class="keyword">let</span> attribute: (~loc: Ast_helper.loc=?, Parsetree.attribute) =&gt; Parsetree.signature_item;\n</pre>\n<pre id="VALtext"><span class="keyword">let</span> text: Docstrings.text =&gt; list(Parsetree.signature_item);\n</pre></div>'}}},pathContext:{relativePath:"api/Ast_helper.Sig.html"}}}});
//# sourceMappingURL=path---api-ast-helper-sig-html-ec113ffd38fd84b278aa.js.map