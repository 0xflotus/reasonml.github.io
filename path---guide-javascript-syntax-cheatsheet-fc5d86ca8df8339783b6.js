webpackJsonp([40],{"./node_modules/json-loader/index.js!./.cache/json/guide-javascript-syntax-cheatsheet.json":function(e,t){e.exports={data:{allFile:{edges:[{node:{relativePath:"guide/index.md",childMarkdownRemark:{frontmatter:{title:"The Reason Guide",order:0}}}},{node:{relativePath:"guide/examples.md",childMarkdownRemark:{frontmatter:{title:"Examples",order:20}}}},{node:{relativePath:"guide/ocaml.md",childMarkdownRemark:{frontmatter:{title:"Comparison to OCaml",order:10}}}},{node:{relativePath:"guide/javascript/converting.md",childMarkdownRemark:{frontmatter:{title:"Converting from JS",order:5}}}},{node:{relativePath:"guide/javascript/index.md",childMarkdownRemark:{frontmatter:{title:"JavaScript",order:4}}}},{node:{relativePath:"guide/javascript/interop.md",childMarkdownRemark:{frontmatter:{title:"Interop",order:1}}}},{node:{relativePath:"guide/javascript/syntax-cheatsheet.md",childMarkdownRemark:{frontmatter:{title:"Syntax Cheatsheet",order:1}}}},{node:{relativePath:"guide/javascript/libraries.md",childMarkdownRemark:{frontmatter:{title:"Libraries",order:2}}}},{node:{relativePath:"guide/javascript/quickstart.md",childMarkdownRemark:{frontmatter:{title:"Quickstart",order:0}}}},{node:{relativePath:"guide/editor-tools/editors-plugins.md",childMarkdownRemark:{frontmatter:{title:"Editors Plugins",order:20}}}},{node:{relativePath:"guide/editor-tools/extra-goodies.md",childMarkdownRemark:{frontmatter:{title:"Extra Goodies",order:30}}}},{node:{relativePath:"guide/editor-tools/global-installation.md",childMarkdownRemark:{frontmatter:{title:"Global Installation",order:10}}}},{node:{relativePath:"guide/language/boolean.md",childMarkdownRemark:{frontmatter:{title:"Boolean",order:30}}}},{node:{relativePath:"guide/language/destructuring.md",childMarkdownRemark:{frontmatter:{title:"Destructuring",order:130}}}},{node:{relativePath:"guide/language/exception.md",childMarkdownRemark:{frontmatter:{title:"Exception",order:175}}}},{node:{relativePath:"guide/language/external.md",childMarkdownRemark:{frontmatter:{title:"External",order:170}}}},{node:{relativePath:"guide/language/if-else.md",childMarkdownRemark:{frontmatter:{title:"If-Else",order:110}}}},{node:{relativePath:"guide/language/function.md",childMarkdownRemark:{frontmatter:{title:"Function",order:100}}}},{node:{relativePath:"guide/language/imperative-loops.md",childMarkdownRemark:{frontmatter:{title:"Imperative Loops",order:150}}}},{node:{relativePath:"guide/editor-tools/index.md",childMarkdownRemark:{frontmatter:{title:"Editor Setup",order:0}}}},{node:{relativePath:"guide/language/index.md",childMarkdownRemark:{frontmatter:{title:"Language basics",order:1}}}},{node:{relativePath:"guide/language/integer-and-float.md",childMarkdownRemark:{frontmatter:{title:"Integer & Float",order:40}}}},{node:{relativePath:"guide/language/let-binding.md",childMarkdownRemark:{frontmatter:{title:"Let Binding",order:10}}}},{node:{relativePath:"guide/language/module.md",childMarkdownRemark:{frontmatter:{title:"Module",order:180}}}},{node:{relativePath:"guide/language/more-on-type.md",childMarkdownRemark:{frontmatter:{title:"More on Type",order:120}}}},{node:{relativePath:"guide/language/mutation.md",childMarkdownRemark:{frontmatter:{title:"Mutation",order:140}}}},{node:{relativePath:"guide/language/object.md",childMarkdownRemark:{frontmatter:{title:"Object",order:175}}}},{node:{relativePath:"guide/language/pattern-matching.md",childMarkdownRemark:{frontmatter:{title:"Pattern Matching!",order:135}}}},{node:{relativePath:"guide/language/jsx.md",childMarkdownRemark:{frontmatter:{title:"JSX",order:160}}}},{node:{relativePath:"guide/language/list-and-array.md",childMarkdownRemark:{frontmatter:{title:"List & Array",order:80}}}},{node:{relativePath:"guide/language/tuple.md",childMarkdownRemark:{frontmatter:{title:"Tuple",order:50}}}},{node:{relativePath:"guide/language/type.md",childMarkdownRemark:{frontmatter:{title:"Type!",order:15}}}},{node:{relativePath:"guide/language/overview.md",childMarkdownRemark:{frontmatter:{title:"Overview",order:0}}}},{node:{relativePath:"guide/language/record.md",childMarkdownRemark:{frontmatter:{title:"Record",order:60}}}},{node:{relativePath:"guide/language/string-and-char.md",childMarkdownRemark:{frontmatter:{title:"String & Char",order:20}}}},{node:{relativePath:"guide/native/index.md",childMarkdownRemark:{frontmatter:{title:"Native",order:5}}}},{node:{relativePath:"guide/language/variant.md",childMarkdownRemark:{frontmatter:{title:"Variant!",order:70}}}},{node:{relativePath:"guide/native/convert-from-ocaml.md",childMarkdownRemark:{frontmatter:{title:"Converting from OCaml",order:4}}}},{node:{relativePath:"guide/native/quickstart.md",childMarkdownRemark:{frontmatter:{title:"Quickstart",order:0}}}}]},file:{relativePath:"guide/javascript/syntax-cheatsheet.md",childMarkdownRemark:{html:'<h3 id="basic-language-primitives"><a href="#basic-language-primitives" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic Language Primitives</h3>\n<table>\n<thead>\n<tr>\n<th>JavaScript</th>\n<th>Reason</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><pre>\n3\n</pre></td>\n<td><pre>\n3\n</pre></td>\n</tr>\n<tr>\n<td><pre>\n3.1415 \n</pre></td>\n<td><pre>\n 3.1415 \n</pre></td>\n</tr>\n<tr>\n<td><pre>\n"Hello world!" \n</pre></td>\n<td><pre>\n"Hello world!" \n</pre></td>\n</tr>\n<tr>\n<td><pre>\n\'Hello world!\' \n</pre></td>\n<td>Strings must use "</td>\n</tr>\n<tr>\n<td>Characters are strings</td>\n<td><pre>\n\'a\'  \n</pre></td>\n</tr>\n<tr>\n<td><pre>\ntrue\n</pre></td>\n<td><pre>\ntrue \n</pre></td>\n</tr>\n<tr>\n<td><pre>\n!true\n</pre></td>\n<td><pre>\nnot true \n</pre></td>\n</tr>\n<tr>\n<td><code>[1,2,3]</code></td>\n<td><code>[1,2,3]</code></td>\n</tr>\n<tr>\n<td><pre>\nnull\n</pre></td>\n<td><pre>\n()\n</pre></td>\n</tr>\n<tr>\n<td><pre>\nconst x = y;\n</pre></td>\n<td><pre>\nlet x = y;\n</pre></td>\n</tr>\n<tr>\n<td><pre>\nlet x = y;\n</pre></td>\n<td><pre>\nreference cells\n</pre></td>\n</tr>\n<tr>\n<td><pre>\nvar x = y;\n</pre></td>\n<td>No equivalent (thankfully)</td>\n</tr>\n<tr>\n<td><code>[x, ...lst] (linear time)</code></td>\n<td><code>[x, ...lst] (constant time)</code></td>\n</tr>\n<tr>\n<td><code>[...lst, x] (linear time)</code></td>\n<td>Not supported</td>\n</tr>\n<tr>\n<td><pre>\n{...obj, x: y}\n</pre></td>\n<td><pre>\n{...obj, x: y}\n</pre></td>\n</tr>\n</tbody>\n</table>\n<h3 id="basic-operations-on-primitives"><a href="#basic-operations-on-primitives" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic Operations on Primitives</h3>\n<table>\n<thead>\n<tr>\n<th>JavaScript</th>\n<th>Reason</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><pre>\n1 + 2\n</pre></td>\n<td><pre>\n1 + 2\n</pre></td>\n</tr>\n<tr>\n<td><pre>\n1.0 + 2.0 \n</pre></td>\n<td><pre>\n1.0 +. 2.0 \n</pre></td>\n</tr>\n<tr>\n<td><pre>\n"hello " + "world" \n</pre></td>\n<td><pre>\n"hello " ^ "world" \n</pre></td>\n</tr>\n</tbody>\n</table>\n<h3 id="object-and-record"><a href="#object-and-record" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Object and Record</h3>\n<table>\n<thead>\n<tr>\n<th>JavaScript</th>\n<th>Reason</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Objects</td>\n<td>Records/BuckleScript Object</td>\n</tr>\n<tr>\n<td>no static types</td>\n<td><pre>\ntype point = {x: int, mutable y: int};\n</pre></td>\n</tr>\n<tr>\n<td><pre>\n{x: 30, y: 20}\n</pre></td>\n<td><pre>\n{x: 30, y: 20}\n</pre></td>\n</tr>\n<tr>\n<td><pre>\npoint.x\n</pre></td>\n<td><pre>\npoint.x\n</pre></td>\n</tr>\n<tr>\n<td><pre>\npoint.y = 30;\n</pre></td>\n<td><pre>\npoint.y = 30;\n</pre></td>\n</tr>\n<tr>\n<td><pre>\n{...point, x: 30}\n</pre></td>\n<td><pre>\n{...point, x: 30}\n</pre></td>\n</tr>\n</tbody>\n</table>\n<h3 id="function"><a href="#function" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Function</h3>\n<table>\n<thead>\n<tr>\n<th>JavaScript</th>\n<th>Reason</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><pre>\narg => retVal  \n</pre></td>\n<td><pre>\nfun arg => retVal\n</pre></td>\n</tr>\n<tr>\n<td><pre>\nfunction named(arg) {...}</td>\n<td></td>\n</tr>\n<tr>\n<td><pre>\nlet f = function named(arg) {...}</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>JavaScript</th>\n<th>Reason</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><pre>\nconst incr = x => x + 1;\n</pre></td>\n<td><pre>\nlet incr = fun x => x + 1;\n</pre></td>\n</tr>\n<tr>\n<td><pre>\nconst five = incr(4);\n</pre></td>\n<td><pre>\nlet five = incr 4;\n</pre></td>\n</tr>\n<tr>\n<td><pre>\nconst add = (x, y) => x + y;\n</pre></td>\n<td><pre>\nlet add = fun x y => x + y;\n</pre></td>\n</tr>\n<tr>\n<td><pre>\nconst x = add(3, 4);\n</pre></td>\n<td><pre>\nlet x = add 3 4;\n</pre></td>\n</tr>\n<tr>\n<td><pre>\nconst y = add(3, add(0, 1));\n</pre></td>\n<td><pre>\nlet y = add 3 (add 0 1);\n</pre></td>\n</tr>\n</tbody>\n</table>\n<h4 id="function-expression"><a href="#function-expression" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Function Expression</h4>\n<table>\n  <thead><tr> <th scope="col"><p >JavaScript</p></th> <th scope="col"><p>Reason</p></th></tr></thead>\n  <tr>\n    <td>\n      <pre>\nconst add = (x, y) => x + x + y + y;\n      </pre>\n    </td>\n    <td>\n      <pre>\nlet add = fun x y => x + x + y + y;\n      </pre>\n    </td>\n  </tr>\n</table>\n<h4 id="function-blocks"><a href="#function-blocks" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Function blocks</h4>\n<table>\n  <thead><tr> <th scope="col"><p >JavaScript</p></th> <th scope="col"><p>Reason</p></th></tr></thead>\n  <tr>\n    <td>\n      <pre>\nconst myFun = (x, y) => {\n  const doubleX = x + x;\n  const doubleY = y + y;\n  return doubleX + doubleY\n};</pre>\n    </td>\n    <td>\n      <pre>\nlet myFun = fun x y => {\n  let doubleX = x + x;\n  let doubleY = y + y;\n  doubleX + doubleY\n};</pre>\n    </td>\n  </tr>\n</table>\n<h3 id="function-application"><a href="#function-application" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Function Application</h3>\n<p>In Reason, parentheses are typically optional in places where it is obvious\nthey aren\'t needed. This means that when invoking functions, parentheses\naren\'t always required around the argument. Reason will let you add the\nparentheses if you really want them, but it\'s good to know why some samples\nyou read have omitted them. See how in this example, arguments that are clearly\nsingle words, or that have balanced "bookends" (such as <code>{ }</code>) do not need\nthe parentheses.</p>\n<table>\n  <thead><tr> <th scope="col"><p >JavaScript</p></th> <th scope="col"><p>Reason</p></th></tr></thead>\n  <tr>\n    <td>\n      <pre>\nlet result = aFunc(oneArg);</pre>\n    </td>\n    <td>\n      <pre>\nlet result = aFunc oneArg;</pre>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <pre>\nlet result = aFunc({x:0});\n      </pre>\n    </td>\n    <td>\n      <pre>let result = aFunc {x:0};</pre>\n    </td>\n  </tr>\n</table>\n<h3 id="currying"><a href="#currying" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Currying</h3>\n<p>Both JavaScript and Reason support currying, but with Reason, when using\nthe native compiler (or even a JavaScript backend), currying is optimized.\n(Specifically, you are not penalized for currying in Reason, whenever you\nhappen to supply all the arguments). The main syntactic difference when defining\ncurried functions is that Reason lambdas always begin with the <code>fun</code> keyword.</p>\n<table>\n  <thead><tr> <th scope="col"><p >JavaScript</p></th> <th scope="col"><p>Reason</p></th></tr></thead>\n  <tr>\n    <td><pre>let add = a => b => a + b;</pre></td>\n    <td><pre>let add = fun a => fun b => a + b;</pre></td>\n  </tr>\n</table>\n<h4 id="syntactic-sugar"><a href="#syntactic-sugar" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Syntactic sugar</h4>\n<p>Because Reason lambdas include the <code>fun</code> keyword, curried functions don\'t\nappear as clean as they do in JavaScript. To remedy this, Reason includes a\nsyntactic sugar to help with curried function definitions. The two forms\nare <em>exactly</em> equivalent and nothing changes about how you would invoke these\nfunctions.</p>\n<table>\n  <thead><tr> <th scope="col"><p >JavaScript</p></th> <th scope="col"><p>Reason</p></th></tr></thead>\n  <tr>\n    <td>\n      <pre>let add = a => b => a + b;</pre>\n    </td>\n    <td>\n      <pre>let add = fun a => fun b => a + b;</pre>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <pre>// No syntactic sugar</pre>\n    </td>\n    <td>\n      <pre>let add = fun a b => a + b;</pre>\n    </td>\n  </tr>\n</table>\n<h3 id="expressions"><a href="#expressions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Expressions</h3>\n<p>In Reason, almost everything is an expression. For example, in Reason, the <code>switch</code> statement <em>evaluates</em> to a value, which makes programming less error prone. Notice how in the JavaScript version, there is some time when the program is in an invalid state.  The switch statement in Reason also provides many more super powers, discussed in <a href="/guide/language/pattern-matching">Pattern Matching</a>.</p>\n<table>\n  <thead><tr> <th scope="col"><p >JavaScript</p></th> <th scope="col"><p>Reason</p></th></tr></thead>\n  <tr>\n    <td>\n      <pre>login ? "hi" : "bye" </pre>\n    </td>\n    <td>\n      <pre>login ? "hi" : "bye" </pre>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <pre>\nlet res = undefined;\nswitch (thing) {\n  case first:\n     res = "first";\n     break;\n  case second:\n     res = "second";\n     break;\n};\n      </pre>\n    </td>\n    <td>\n      <pre>\nlet res = switch thing {\n| first => "first"\n| second => "second"\n};\n      </pre>\n    </td>\n  </tr>\n</table>\n<h3 id="blocks"><a href="#blocks" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Blocks</h3>\n<p>In Reason, "sequence expressions" are created with <code>{}</code> and evaluate to their\nlast statement. In JavaScript, this can be simulated via a temporary variable\nwhich must be created in an invalid state, then later mutated.</p>\n<table>\n  <thead><tr> <th scope="col"><p >JavaScript</p></th> <th scope="col"><p>Reason</p></th></tr></thead>\n  <tr>\n    <td>\n      <pre>\nlet res = undefined;\n{\n  const x = 23;\n  const y = 34;\n  res = x + y;\n};</pre>\n    </td>\n    <td>\n      <pre>\nlet res = {\n  let x = 23;\n  let y = 34;\n  x + y\n};</pre>\n    </td>\n  </tr>\n</table>',frontmatter:{title:"Syntax Cheatsheet"}}}},pathContext:{section:"guide",sectionTitle:"Guide",relativePath:"guide/javascript/syntax-cheatsheet.md",relatedFiles:"/^guide\\/.*\\.md$/"}}}});
//# sourceMappingURL=path---guide-javascript-syntax-cheatsheet-fc5d86ca8df8339783b6.js.map