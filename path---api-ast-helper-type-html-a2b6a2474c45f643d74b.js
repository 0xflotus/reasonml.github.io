webpackJsonp([311],{"./node_modules/json-loader/index.js!./.cache/json/api-ast-helper-type-html.json":function(e,t){e.exports={data:{file:{relativePath:"api/Ast_helper.Type.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar"><a class="pre" href="Ast_helper.Val.html" title="Ast_helper.Val">Previous</a>\n&#xA0;<a class="up" href="Ast_helper.html" title="Ast_helper">Up</a>\n&#xA0;<a class="post" href="Ast_helper.Te.html" title="Ast_helper.Te">Next</a>\n</div>\n<h1>Module <a href="type_Ast_helper.Type.html">Ast_helper.Type</a></h1>\n\n<pre><span class="keyword">module</span> Type: sig .. end</pre><div class="info module top">\nType declarations<br>\n</div>\n<hr width="100%">\n\n<pre id="VALmk"><span class="keyword">let</span> mk:\n  (\n    ~loc: Ast_helper.loc=?,\n    ~attrs: Ast_helper.attrs=?,\n    ~docs: Docstrings.docs=?,\n    ~text: Docstrings.text=?,\n    ~params: list((Parsetree.core_type, Asttypes.variance))=?,\n    ~cstrs: list((Parsetree.core_type, Parsetree.core_type, Ast_helper.loc))=?,\n    ~kind: Parsetree.type_kind=?,\n    ~priv: Asttypes.private_flag=?,\n    ~manifest: Parsetree.core_type=?,\n    Ast_helper.str\n  ) =&gt;\n  Parsetree.type_declaration;\n</pre>\n<pre id="VALconstructor"><span class="keyword">let</span> constructor:\n  (\n    ~loc: Ast_helper.loc=?,\n    ~attrs: Ast_helper.attrs=?,\n    ~info: Docstrings.info=?,\n    ~args: list(Parsetree.core_type)=?,\n    ~res: Parsetree.core_type=?,\n    Ast_helper.str\n  ) =&gt;\n  Parsetree.constructor_declaration;\n</pre>\n<pre id="VALfield"><span class="keyword">let</span> field:\n  (\n    ~loc: Ast_helper.loc=?,\n    ~attrs: Ast_helper.attrs=?,\n    ~info: Docstrings.info=?,\n    ~mut: Asttypes.mutable_flag=?,\n    Ast_helper.str,\n    Parsetree.core_type\n  ) =&gt;\n  Parsetree.label_declaration;\n</pre></div>'}}},pathContext:{relativePath:"api/Ast_helper.Type.html"}}}});
//# sourceMappingURL=path---api-ast-helper-type-html-a2b6a2474c45f643d74b.js.map