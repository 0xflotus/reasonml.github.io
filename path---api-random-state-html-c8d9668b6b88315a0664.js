webpackJsonp([218],{"./node_modules/json-loader/index.js!./.cache/json/api-random-state-html.json":function(t,e){t.exports={data:{file:{relativePath:"api/Random.State.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar">&#xA0;<a class="up" href="Random.html" title="Random">Up</a>\n&#xA0;</div>\n<h1>Module <a href="type_Random.State.html">Random.State</a></h1>\n\n<pre><span class="keyword">module</span> State: sig .. end</pre><hr width="100%">\n\n<pre id="TYPEt"><span class="keyword">type</span> t </pre>\n<div class="info ">\nThe type of PRNG states.<br>\n</div>\n\n\n<pre id="VALmake">val make : int array -&gt; t</pre><div class="info ">\nCreate a new state and initialize it with the given seed.<br>\n</div>\n\n<pre id="VALmake_self_init">val make_self_init : unit -&gt; t</pre><div class="info ">\nCreate a new state and initialize it with a system-dependent\n      low-entropy seed.<br>\n</div>\n\n<pre id="VALcopy">val copy : t -&gt; t</pre><div class="info ">\nReturn a copy of the given state.<br>\n</div>\n\n<pre id="VALbits">val bits : t -&gt; int</pre>\n<pre id="VALint">val int : t -&gt; int -&gt; int</pre>\n<pre id="VALint32">val int32 : t -&gt; Int32.t -&gt; Int32.t</pre>\n<pre id="VALnativeint">val nativeint : t -&gt; Nativeint.t -&gt; Nativeint.t</pre>\n<pre id="VALint64">val int64 : t -&gt; Int64.t -&gt; Int64.t</pre>\n<pre id="VALfloat">val float : t -&gt; float -&gt; float</pre>\n<pre id="VALbool">val bool : t -&gt; bool</pre><div class="info ">\nThese functions are the same as the basic functions, except that they\n      use (and update) the given PRNG state instead of the default one.<br>\n</div>\n</div>'}}},pathContext:{relativePath:"api/Random.State.html"}}}});
//# sourceMappingURL=path---api-random-state-html-c8d9668b6b88315a0664.js.map