{"version":3,"sources":["webpack:///path---api-bigarray-array-1-html-532fbeded3954f88c3cc.js","webpack:///./.cache/json/api-bigarray-array-1-html.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/api-bigarray-array-1-html.json","module","exports","data","file","relativePath","childRawHtml","content","pathContext"],"mappings":"AAAAA,cAAc,MAERC,mFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,aAAA,2BACAC,cACAC,QAAA,uiMAIAC,aACAH,aAAA","file":"path---api-bigarray-array-1-html-532fbeded3954f88c3cc.js","sourcesContent":["webpackJsonp([306],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/api-bigarray-array-1-html.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"file\": {\n\t\t\t\t\"relativePath\": \"api/Bigarray.Array1.html\",\n\t\t\t\t\"childRawHtml\": {\n\t\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\"><a class=\\\"pre\\\" href=\\\"Bigarray.Genarray.html\\\" title=\\\"Bigarray.Genarray\\\">Previous</a>\\n&#xA0;<a class=\\\"up\\\" href=\\\"Bigarray.html\\\" title=\\\"Bigarray\\\">Up</a>\\n&#xA0;<a class=\\\"post\\\" href=\\\"Bigarray.Array2.html\\\" title=\\\"Bigarray.Array2\\\">Next</a>\\n</div>\\n<h1>Module <a href=\\\"type_Bigarray.Array1.html\\\">Bigarray.Array1</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> Array1: sig .. end</pre><div class=\\\"info module top\\\">\\nOne-dimensional arrays. The <code class=\\\"code\\\">Array1</code> structure provides operations\\n   similar to those of\\n   <a href=\\\"Bigarray.Genarray.html\\\"><code class=\\\"code\\\">Bigarray.Genarray</code></a>, but specialized to the case of one-dimensional arrays.\\n   (The <code class=\\\"code\\\">Array2</code> and <code class=\\\"code\\\">Array3</code> structures below provide operations\\n   specialized for two- and three-dimensional arrays.)\\n   Statically knowing the number of dimensions of the array allows\\n   faster operations, and more precise static type-checking.<br>\\n</div>\\n<hr width=\\\"100%\\\">\\n\\n<pre id=\\\"TYPEt\\\"><span class=\\\"keyword\\\">type</span> (&apos;a, &apos;b, &apos;c) t </pre>\\n<div class=\\\"info \\\">\\nThe type of one-dimensional big arrays whose elements have\\n     OCaml type <code class=\\\"code\\\">&apos;a</code>, representation kind <code class=\\\"code\\\">&apos;b</code>, and memory layout <code class=\\\"code\\\">&apos;c</code>.<br>\\n</div>\\n\\n\\n<pre id=\\\"VALcreate\\\">val create : (&apos;a, &apos;b) Bigarray.kind -&gt;       &apos;c Bigarray.layout -&gt; int -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Array1.create kind layout dim</code> returns a new bigarray of\\n     one dimension, whose size is <code class=\\\"code\\\">dim</code>.  <code class=\\\"code\\\">kind</code> and <code class=\\\"code\\\">layout</code>\\n     determine the array element kind and the array layout\\n     as described for <code class=\\\"code\\\">Genarray.create</code>.<br>\\n</div>\\n\\n<pre id=\\\"VALdim\\\">val dim : (&apos;a, &apos;b, &apos;c) t -&gt; int</pre><div class=\\\"info \\\">\\nReturn the size (dimension) of the given one-dimensional\\n     big array.<br>\\n</div>\\n\\n<pre id=\\\"VALkind\\\">val kind : (&apos;a, &apos;b, &apos;c) t -&gt; (&apos;a, &apos;b) Bigarray.kind</pre><div class=\\\"info \\\">\\nReturn the kind of the given big array.<br>\\n</div>\\n\\n<pre id=\\\"VALlayout\\\">val layout : (&apos;a, &apos;b, &apos;c) t -&gt; &apos;c Bigarray.layout</pre><div class=\\\"info \\\">\\nReturn the layout of the given big array.<br>\\n</div>\\n\\n<pre id=\\\"VALget\\\">val get : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; &apos;a</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Array1.get a x</code>, or alternatively <code class=\\\"code\\\">a.{x}</code>,\\n     returns the element of <code class=\\\"code\\\">a</code> at index <code class=\\\"code\\\">x</code>.\\n     <code class=\\\"code\\\">x</code> must be greater or equal than <code class=\\\"code\\\">0</code> and strictly less than\\n     <code class=\\\"code\\\">Array1.dim a</code> if <code class=\\\"code\\\">a</code> has C layout.  If <code class=\\\"code\\\">a</code> has Fortran layout,\\n     <code class=\\\"code\\\">x</code> must be greater or equal than <code class=\\\"code\\\">1</code> and less or equal than\\n     <code class=\\\"code\\\">Array1.dim a</code>.  Otherwise, <code class=\\\"code\\\">Invalid_argument</code> is raised.<br>\\n</div>\\n\\n<pre id=\\\"VALset\\\">val set : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; &apos;a -&gt; unit</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Array1.set a x v</code>, also written <code class=\\\"code\\\">a.{x} &lt;- v</code>,\\n     stores the value <code class=\\\"code\\\">v</code> at index <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">a</code>.\\n     <code class=\\\"code\\\">x</code> must be inside the bounds of <code class=\\\"code\\\">a</code> as described in\\n     <a href=\\\"Bigarray.Array1.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Array1.get</code></a>;\\n     otherwise, <code class=\\\"code\\\">Invalid_argument</code> is raised.<br>\\n</div>\\n\\n<pre id=\\\"VALsub\\\">val sub : (&apos;a, &apos;b, &apos;c) t -&gt;       int -&gt; int -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\nExtract a sub-array of the given one-dimensional big array.\\n     See <code class=\\\"code\\\">Genarray.sub_left</code> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALblit\\\">val blit : (&apos;a, &apos;b, &apos;c) t -&gt; (&apos;a, &apos;b, &apos;c) t -&gt; unit</pre><div class=\\\"info \\\">\\nCopy the first big array to the second big array.\\n     See <code class=\\\"code\\\">Genarray.blit</code> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALfill\\\">val fill : (&apos;a, &apos;b, &apos;c) t -&gt; &apos;a -&gt; unit</pre><div class=\\\"info \\\">\\nFill the given big array with the given value.\\n     See <code class=\\\"code\\\">Genarray.fill</code> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALof_array\\\">val of_array : (&apos;a, &apos;b) Bigarray.kind -&gt;       &apos;c Bigarray.layout -&gt; &apos;a array -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\nBuild a one-dimensional big array initialized from the\\n     given array.<br>\\n</div>\\n\\n<pre id=\\\"VALmap_file\\\">val map_file : Unix.file_descr -&gt;       ?pos:int64 -&gt;       (&apos;a, &apos;b) Bigarray.kind -&gt;       &apos;c Bigarray.layout -&gt; bool -&gt; int -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\nMemory mapping of a file as a one-dimensional big array.\\n     See <a href=\\\"Bigarray.Genarray.html#VALmap_file\\\"><code class=\\\"code\\\">Bigarray.Genarray.map_file</code></a> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALunsafe_get\\\">val unsafe_get : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; &apos;a</pre><div class=\\\"info \\\">\\nLike <a href=\\\"Bigarray.Array1.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Array1.get</code></a>, but bounds checking is not always performed.\\n      Use with caution and only when the program logic guarantees that\\n      the access is within bounds.<br>\\n</div>\\n\\n<pre id=\\\"VALunsafe_set\\\">val unsafe_set : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; &apos;a -&gt; unit</pre><div class=\\\"info \\\">\\nLike <a href=\\\"Bigarray.Array1.html#VALset\\\"><code class=\\\"code\\\">Bigarray.Array1.set</code></a>, but bounds checking is not always performed.\\n      Use with caution and only when the program logic guarantees that\\n      the access is within bounds.<br>\\n</div>\\n</div>\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"relativePath\": \"api/Bigarray.Array1.html\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---api-bigarray-array-1-html-532fbeded3954f88c3cc.js","module.exports = {\n\t\"data\": {\n\t\t\"file\": {\n\t\t\t\"relativePath\": \"api/Bigarray.Array1.html\",\n\t\t\t\"childRawHtml\": {\n\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\"><a class=\\\"pre\\\" href=\\\"Bigarray.Genarray.html\\\" title=\\\"Bigarray.Genarray\\\">Previous</a>\\n&#xA0;<a class=\\\"up\\\" href=\\\"Bigarray.html\\\" title=\\\"Bigarray\\\">Up</a>\\n&#xA0;<a class=\\\"post\\\" href=\\\"Bigarray.Array2.html\\\" title=\\\"Bigarray.Array2\\\">Next</a>\\n</div>\\n<h1>Module <a href=\\\"type_Bigarray.Array1.html\\\">Bigarray.Array1</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> Array1: sig .. end</pre><div class=\\\"info module top\\\">\\nOne-dimensional arrays. The <code class=\\\"code\\\">Array1</code> structure provides operations\\n   similar to those of\\n   <a href=\\\"Bigarray.Genarray.html\\\"><code class=\\\"code\\\">Bigarray.Genarray</code></a>, but specialized to the case of one-dimensional arrays.\\n   (The <code class=\\\"code\\\">Array2</code> and <code class=\\\"code\\\">Array3</code> structures below provide operations\\n   specialized for two- and three-dimensional arrays.)\\n   Statically knowing the number of dimensions of the array allows\\n   faster operations, and more precise static type-checking.<br>\\n</div>\\n<hr width=\\\"100%\\\">\\n\\n<pre id=\\\"TYPEt\\\"><span class=\\\"keyword\\\">type</span> (&apos;a, &apos;b, &apos;c) t </pre>\\n<div class=\\\"info \\\">\\nThe type of one-dimensional big arrays whose elements have\\n     OCaml type <code class=\\\"code\\\">&apos;a</code>, representation kind <code class=\\\"code\\\">&apos;b</code>, and memory layout <code class=\\\"code\\\">&apos;c</code>.<br>\\n</div>\\n\\n\\n<pre id=\\\"VALcreate\\\">val create : (&apos;a, &apos;b) Bigarray.kind -&gt;       &apos;c Bigarray.layout -&gt; int -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Array1.create kind layout dim</code> returns a new bigarray of\\n     one dimension, whose size is <code class=\\\"code\\\">dim</code>.  <code class=\\\"code\\\">kind</code> and <code class=\\\"code\\\">layout</code>\\n     determine the array element kind and the array layout\\n     as described for <code class=\\\"code\\\">Genarray.create</code>.<br>\\n</div>\\n\\n<pre id=\\\"VALdim\\\">val dim : (&apos;a, &apos;b, &apos;c) t -&gt; int</pre><div class=\\\"info \\\">\\nReturn the size (dimension) of the given one-dimensional\\n     big array.<br>\\n</div>\\n\\n<pre id=\\\"VALkind\\\">val kind : (&apos;a, &apos;b, &apos;c) t -&gt; (&apos;a, &apos;b) Bigarray.kind</pre><div class=\\\"info \\\">\\nReturn the kind of the given big array.<br>\\n</div>\\n\\n<pre id=\\\"VALlayout\\\">val layout : (&apos;a, &apos;b, &apos;c) t -&gt; &apos;c Bigarray.layout</pre><div class=\\\"info \\\">\\nReturn the layout of the given big array.<br>\\n</div>\\n\\n<pre id=\\\"VALget\\\">val get : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; &apos;a</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Array1.get a x</code>, or alternatively <code class=\\\"code\\\">a.{x}</code>,\\n     returns the element of <code class=\\\"code\\\">a</code> at index <code class=\\\"code\\\">x</code>.\\n     <code class=\\\"code\\\">x</code> must be greater or equal than <code class=\\\"code\\\">0</code> and strictly less than\\n     <code class=\\\"code\\\">Array1.dim a</code> if <code class=\\\"code\\\">a</code> has C layout.  If <code class=\\\"code\\\">a</code> has Fortran layout,\\n     <code class=\\\"code\\\">x</code> must be greater or equal than <code class=\\\"code\\\">1</code> and less or equal than\\n     <code class=\\\"code\\\">Array1.dim a</code>.  Otherwise, <code class=\\\"code\\\">Invalid_argument</code> is raised.<br>\\n</div>\\n\\n<pre id=\\\"VALset\\\">val set : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; &apos;a -&gt; unit</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Array1.set a x v</code>, also written <code class=\\\"code\\\">a.{x} &lt;- v</code>,\\n     stores the value <code class=\\\"code\\\">v</code> at index <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">a</code>.\\n     <code class=\\\"code\\\">x</code> must be inside the bounds of <code class=\\\"code\\\">a</code> as described in\\n     <a href=\\\"Bigarray.Array1.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Array1.get</code></a>;\\n     otherwise, <code class=\\\"code\\\">Invalid_argument</code> is raised.<br>\\n</div>\\n\\n<pre id=\\\"VALsub\\\">val sub : (&apos;a, &apos;b, &apos;c) t -&gt;       int -&gt; int -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\nExtract a sub-array of the given one-dimensional big array.\\n     See <code class=\\\"code\\\">Genarray.sub_left</code> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALblit\\\">val blit : (&apos;a, &apos;b, &apos;c) t -&gt; (&apos;a, &apos;b, &apos;c) t -&gt; unit</pre><div class=\\\"info \\\">\\nCopy the first big array to the second big array.\\n     See <code class=\\\"code\\\">Genarray.blit</code> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALfill\\\">val fill : (&apos;a, &apos;b, &apos;c) t -&gt; &apos;a -&gt; unit</pre><div class=\\\"info \\\">\\nFill the given big array with the given value.\\n     See <code class=\\\"code\\\">Genarray.fill</code> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALof_array\\\">val of_array : (&apos;a, &apos;b) Bigarray.kind -&gt;       &apos;c Bigarray.layout -&gt; &apos;a array -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\nBuild a one-dimensional big array initialized from the\\n     given array.<br>\\n</div>\\n\\n<pre id=\\\"VALmap_file\\\">val map_file : Unix.file_descr -&gt;       ?pos:int64 -&gt;       (&apos;a, &apos;b) Bigarray.kind -&gt;       &apos;c Bigarray.layout -&gt; bool -&gt; int -&gt; (&apos;a, &apos;b, &apos;c) t</pre><div class=\\\"info \\\">\\nMemory mapping of a file as a one-dimensional big array.\\n     See <a href=\\\"Bigarray.Genarray.html#VALmap_file\\\"><code class=\\\"code\\\">Bigarray.Genarray.map_file</code></a> for more details.<br>\\n</div>\\n\\n<pre id=\\\"VALunsafe_get\\\">val unsafe_get : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; &apos;a</pre><div class=\\\"info \\\">\\nLike <a href=\\\"Bigarray.Array1.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Array1.get</code></a>, but bounds checking is not always performed.\\n      Use with caution and only when the program logic guarantees that\\n      the access is within bounds.<br>\\n</div>\\n\\n<pre id=\\\"VALunsafe_set\\\">val unsafe_set : (&apos;a, &apos;b, &apos;c) t -&gt; int -&gt; &apos;a -&gt; unit</pre><div class=\\\"info \\\">\\nLike <a href=\\\"Bigarray.Array1.html#VALset\\\"><code class=\\\"code\\\">Bigarray.Array1.set</code></a>, but bounds checking is not always performed.\\n      Use with caution and only when the program logic guarantees that\\n      the access is within bounds.<br>\\n</div>\\n</div>\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"relativePath\": \"api/Bigarray.Array1.html\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/api-bigarray-array-1-html.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/api-bigarray-array-1-html.json\n// module chunks = 306"],"sourceRoot":""}