webpackJsonp([312],{"./node_modules/json-loader/index.js!./.cache/json/api-ast-helper-typ-html.json":function(e,t){e.exports={data:{file:{relativePath:"api/Ast_helper.Typ.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar">&#xA0;<a class="up" href="Ast_helper.html" title="Ast_helper">Up</a>\n&#xA0;<a class="post" href="Ast_helper.Pat.html" title="Ast_helper.Pat">Next</a>\n</div>\n<h1>Module <a href="type_Ast_helper.Typ.html">Ast_helper.Typ</a></h1>\n\n<pre><span class="keyword">module</span> Typ: sig .. end</pre><div class="info module top">\nType expressions<br>\n</div>\n<hr width="100%">\n\n<pre id="VALmk"><span class="keyword">let</span> mk:\n  (~loc: Ast_helper.loc=?, ~attrs: Ast_helper.attrs=?, Parsetree.core_type_desc) =&gt;\n  Parsetree.core_type;\n</pre>\n<pre id="VALattr"><span class="keyword">let</span> attr: (Parsetree.core_type, Parsetree.attribute) =&gt; Parsetree.core_type;\n</pre>\n<pre id="VALany"><span class="keyword">let</span> any: (~loc: Ast_helper.loc=?, ~attrs: Ast_helper.attrs=?, unit) =&gt; Parsetree.core_type;\n</pre>\n<pre id="VALvar"><span class="keyword">let</span> var: (~loc: Ast_helper.loc=?, ~attrs: Ast_helper.attrs=?, string) =&gt; Parsetree.core_type;\n</pre>\n<pre id="VALarrow"><span class="keyword">let</span> arrow:\n  (\n    ~loc: Ast_helper.loc=?,\n    ~attrs: Ast_helper.attrs=?,\n    Asttypes.label,\n    Parsetree.core_type,\n    Parsetree.core_type\n  ) =&gt;\n  Parsetree.core_type;\n</pre>\n<pre id="VALtuple"><span class="keyword">let</span> tuple:\n  (~loc: Ast_helper.loc=?, ~attrs: Ast_helper.attrs=?, list(Parsetree.core_type)) =&gt;\n  Parsetree.core_type;\n</pre>\n<pre id="VALconstr"><span class="keyword">let</span> constr:\n  (\n    ~loc: Ast_helper.loc=?,\n    ~attrs: Ast_helper.attrs=?,\n    Ast_helper.lid,\n    list(Parsetree.core_type)\n  ) =&gt;\n  Parsetree.core_type;\n</pre>\n<pre id="VALobject_"><span class="keyword">let</span> object_:\n  (\n    ~loc: Ast_helper.loc=?,\n    ~attrs: Ast_helper.attrs=?,\n    list((string, Parsetree.attributes, Parsetree.core_type)),\n    Asttypes.closed_flag\n  ) =&gt;\n  Parsetree.core_type;\n</pre>\n<pre id="VALclass_"><span class="keyword">let</span> class_:\n  (\n    ~loc: Ast_helper.loc=?,\n    ~attrs: Ast_helper.attrs=?,\n    Ast_helper.lid,\n    list(Parsetree.core_type)\n  ) =&gt;\n  Parsetree.core_type;\n</pre>\n<pre id="VALalias"><span class="keyword">let</span> alias:\n  (~loc: Ast_helper.loc=?, ~attrs: Ast_helper.attrs=?, Parsetree.core_type, string) =&gt;\n  Parsetree.core_type;\n</pre>\n<pre id="VALvariant"><span class="keyword">let</span> variant:\n  (\n    ~loc: Ast_helper.loc=?,\n    ~attrs: Ast_helper.attrs=?,\n    list(Parsetree.row_field),\n    Asttypes.closed_flag,\n    option(list(Asttypes.label))\n  ) =&gt;\n  Parsetree.core_type;\n</pre>\n<pre id="VALpoly"><span class="keyword">let</span> poly:\n  (~loc: Ast_helper.loc=?, ~attrs: Ast_helper.attrs=?, list(string), Parsetree.core_type) =&gt;\n  Parsetree.core_type;\n</pre>\n<pre id="VALpackage"><span class="keyword">let</span> package:\n  (\n    ~loc: Ast_helper.loc=?,\n    ~attrs: Ast_helper.attrs=?,\n    Ast_helper.lid,\n    list((Ast_helper.lid, Parsetree.core_type))\n  ) =&gt;\n  Parsetree.core_type;\n</pre>\n<pre id="VALextension"><span class="keyword">let</span> extension:\n  (~loc: Ast_helper.loc=?, ~attrs: Ast_helper.attrs=?, Parsetree.extension) =&gt; Parsetree.core_type;\n</pre>\n<pre id="VALforce_poly"><span class="keyword">let</span> force_poly: Parsetree.core_type =&gt; Parsetree.core_type;\n</pre></div>'}}},pathContext:{relativePath:"api/Ast_helper.Typ.html"}}}});
//# sourceMappingURL=path---api-ast-helper-typ-html-7206c918ad99bee42fe3.js.map