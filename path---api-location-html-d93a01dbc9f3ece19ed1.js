webpackJsonp([259],{"./node_modules/json-loader/index.js!./.cache/json/api-location-html.json":function(r,t){r.exports={data:{file:{relativePath:"api/Location.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar"><a class="pre" href="Lexer.html" title="Lexer">Previous</a>\n&#xA0;<a class="up" href="index.html" title="Index">Up</a>\n&#xA0;<a class="post" href="Longident.html" title="Longident">Next</a>\n</div>\n<h1>Module <a href="type_Location.html">Location</a></h1>\n\n<pre><span class="keyword">module</span> Location: sig .. end</pre><div class="info module top">\nAn arbitrary value of type <code class="code">t</code>; describes an empty ghost range.<br>\n</div>\n<hr width="100%">\n\n<pre><span class="keyword">type</span> t = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>loc_start&#xA0;: Lexing.position;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>loc_end&#xA0;: Lexing.position;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>loc_ghost&#xA0;: bool;</code></td>\n\n</tr></tbody></table>\n}\n\n\n\n<pre id="VALnone">val none : t</pre><div class="info ">\nAn arbitrary value of type <code class="code">t</code>; describes an empty ghost range.<br>\n</div>\n\n<pre id="VALin_file">val in_file : string -&gt; t</pre><div class="info ">\nReturn an empty ghost range located in a given file.<br>\n</div>\n\n<pre id="VALinit">val init : Lexing.lexbuf -&gt; string -&gt; unit</pre><div class="info ">\nSet the file name and line number of the <code class="code">lexbuf</code> to be the start\n    of the named file.<br>\n</div>\n\n<pre id="VALcurr">val curr : Lexing.lexbuf -&gt; t</pre><div class="info ">\nGet the location of the current token from the <code class="code">lexbuf</code>.<br>\n</div>\n\n<pre id="VALsymbol_rloc">val symbol_rloc : unit -&gt; t</pre>\n<pre id="VALsymbol_gloc">val symbol_gloc : unit -&gt; t</pre>\n<pre id="VALrhs_loc">val rhs_loc : int -&gt; t</pre><div class="info ">\n<code class="code">rhs_loc n</code> returns the location of the symbol at position <code class="code">n</code>, starting\n  at 1, in the current parser rule.<br>\n</div>\n\n<pre id="VALinput_name">val input_name : string Pervasives.ref</pre>\n<pre id="VALinput_lexbuf">val input_lexbuf : Lexing.lexbuf option Pervasives.ref</pre>\n<pre id="VALget_pos_info">val get_pos_info : Lexing.position -&gt; string * int * int</pre>\n<pre id="VALprint_loc">val print_loc : Format.formatter -&gt; t -&gt; unit</pre>\n<pre id="VALprint_error">val print_error : Format.formatter -&gt; t -&gt; unit</pre>\n<pre id="VALprint_error_cur_file">val print_error_cur_file : Format.formatter -&gt; unit</pre>\n<pre id="VALprint_warning">val print_warning : t -&gt; Format.formatter -&gt; Warnings.t -&gt; unit</pre>\n<pre id="VALformatter_for_warnings">val formatter_for_warnings : Format.formatter Pervasives.ref</pre>\n<pre id="VALprerr_warning">val prerr_warning : t -&gt; Warnings.t -&gt; unit</pre>\n<pre id="VALecho_eof">val echo_eof : unit -&gt; unit</pre>\n<pre id="VALreset">val reset : unit -&gt; unit</pre>\n<pre id="VALwarning_printer">val warning_printer : (t -&gt; Format.formatter -&gt; Warnings.t -&gt; unit) Pervasives.ref</pre><div class="info ">\nHook for intercepting warnings.<br>\n</div>\n\n<pre id="VALdefault_warning_printer">val default_warning_printer : t -&gt; Format.formatter -&gt; Warnings.t -&gt; unit</pre><div class="info ">\nOriginal warning printer for use in hooks.<br>\n</div>\n\n<pre id="VALhighlight_locations">val highlight_locations : Format.formatter -&gt; t list -&gt; bool</pre>\n<pre><span class="keyword">type</span> &apos;a loc = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>txt&#xA0;: &apos;a;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>loc&#xA0;: t;</code></td>\n\n</tr></tbody></table>\n}\n\n\n\n<pre id="VALmknoloc">val mknoloc : &apos;a -&gt; &apos;a loc</pre>\n<pre id="VALmkloc">val mkloc : &apos;a -&gt; t -&gt; &apos;a loc</pre>\n<pre id="VALprint">val print : Format.formatter -&gt; t -&gt; unit</pre>\n<pre id="VALprint_filename">val print_filename : Format.formatter -&gt; string -&gt; unit</pre>\n<pre id="VALabsolute_path">val absolute_path : string -&gt; string</pre>\n<pre id="VALshow_filename">val show_filename : string -&gt; string</pre><div class="info ">\nIn -absname mode, return the absolute path for this filename.\n        Otherwise, returns the filename unchanged.<br>\n</div>\n\n<pre id="VALabsname">val absname : bool Pervasives.ref</pre>\n<pre><span class="keyword">type</span> error = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>loc&#xA0;: t;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>msg&#xA0;: string;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>sub&#xA0;: error list;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>if_highlight&#xA0;: string;</code></td>\n\n</tr></tbody></table>\n}\n\n\n\n<pre id="EXCEPTIONError"><span class="keyword">exception</span> Error of error</pre>\n\n<pre id="VALerror">val error : ?loc:t -&gt;       ?sub:error list -&gt; ?if_highlight:string -&gt; string -&gt; error</pre>\n<pre id="VALerrorf">val errorf : ?loc:t -&gt;       ?sub:error list -&gt;       ?if_highlight:string -&gt;       (&apos;a, unit, string, error) Pervasives.format4 -&gt; &apos;a</pre>\n<pre id="VALraise_errorf">val raise_errorf : ?loc:t -&gt;       ?sub:error list -&gt;       ?if_highlight:string -&gt; (&apos;a, unit, string, &apos;b) Pervasives.format4 -&gt; &apos;a</pre>\n<pre id="VALerror_of_printer">val error_of_printer : t -&gt; (Format.formatter -&gt; &apos;a -&gt; unit) -&gt; &apos;a -&gt; error</pre>\n<pre id="VALerror_of_printer_file">val error_of_printer_file : (Format.formatter -&gt; &apos;a -&gt; unit) -&gt; &apos;a -&gt; error</pre>\n<pre id="VALerror_of_exn">val error_of_exn : exn -&gt; error option</pre>\n<pre id="VALregister_error_of_exn">val register_error_of_exn : (exn -&gt; error option) -&gt; unit</pre>\n<pre id="VALreport_error">val report_error : Format.formatter -&gt; error -&gt; unit</pre>\n<pre id="VALerror_reporter">val error_reporter : (Format.formatter -&gt; error -&gt; unit) Pervasives.ref</pre><div class="info ">\nHook for intercepting error reports.<br>\n</div>\n\n<pre id="VALdefault_error_reporter">val default_error_reporter : Format.formatter -&gt; error -&gt; unit</pre><div class="info ">\nOriginal error reporter for use in hooks.<br>\n</div>\n\n<pre id="VALreport_exception">val report_exception : Format.formatter -&gt; exn -&gt; unit</pre></div>'}}},pathContext:{relativePath:"api/Location.html"}}}});
//# sourceMappingURL=path---api-location-html-d93a01dbc9f3ece19ed1.js.map