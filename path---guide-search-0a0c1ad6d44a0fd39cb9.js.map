{"version":3,"sources":["webpack:///path---guide-search-0a0c1ad6d44a0fd39cb9.js","webpack:///./.cache/json/guide-search.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/guide-search.json","module","exports","data","allFile","edges","node","relativePath","childMarkdownRemark","frontmatter","title","order","html","pathContext","section","sectionTitle","relatedFiles"],"mappings":"AAAAA,cAAc,KAERC,sEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,SACAC,QAEAC,MACAC,aAAA,iBACAC,qBACAC,aACAC,MAAA,mBACAC,MAAA,GAEAC,KAAA,kRAKAN,MACAC,aAAA,oBACAC,qBACAC,aACAC,MAAA,WACAC,MAAA,IAEAC,KAAA,m/MAKAN,MACAC,aAAA,iBACAC,qBACAC,aACAC,MAAA,sBACAC,MAAA,IAEAC,KAAA;KAKAN,MACAC,aAAA,wBACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,GAEAC,KAAA,yiSAKAN,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,qBACAC,MAAA,GAEAC,KAAA,q7bAKAN,MACAC,aAAA,4BACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,IAEAC,KAAA,6hBAKAN,MACAC,aAAA,gCACAC,qBACAC,aACAC,MAAA,YACAC,MAAA,GAEAC,KAAA,miCAKAN,MACAC,aAAA,8BACAC,qBACAC,aACAC,MAAA,UACAC,MAAA,GAEAC,KAAA;KAKAN,MACAC,aAAA,8BACAC,qBACAC,aACAC,MAAA,YACAC,MAAA,KAEAC,KAAA,g0HAKAN,MACAC,aAAA,wCACAC,qBACAC,aACAC,MAAA,oBACAC,MAAA,GAEAC,KAAA,m/gBAKAN,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,GAEAC,KAAA,4oCAKAN,MACAC,aAAA,4BACAC,qBACAC,aACAC,MAAA,UACAC,MAAA,IAEAC,KAAA,ilIAKAN,MACAC,aAAA,kCACAC,qBACAC,aACAC,MAAA,gBACAC,MAAA,KAEAC,KAAA,g6HAKAN,MACAC,aAAA,6BACAC,qBACAC,aACAC,MAAA,WACAC,MAAA,KAEAC,KAAA;KAKAN,MACAC,aAAA,6BACAC,qBACAC,aACAC,MAAA,WACAC,MAAA,KAEAC,KAAA,6gjBAKAN,MACAC,aAAA,4BACAC,qBACAC,aACAC,MAAA,UACAC,MAAA,KAEAC,KAAA,osGAKAN,MACAC,aAAA,0BACAC,qBACAC,aACAC,MAAA,kBACAC,MAAA,IAEAC,KAAA,6mBAKAN,MACAC,aAAA,qCACAC,qBACAC,aACAC,MAAA,mBACAC,MAAA,KAEAC,KAAA,uiKAKAN,MACAC,aAAA,wBACAC,qBACAC,aACAC,MAAA,MACAC,MAAA,KAEAC,KAAA;KAKAN,MACAC,aAAA,sCACAC,qBACAC,aACAC,MAAA,kBACAC,MAAA,IAEAC,KAAA,w2JAKAN,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,eACAC,MAAA,KAEAC,KAAA,y6OAKAN,MACAC,aAAA,gCACAC,qBACAC,aACAC,MAAA,cACAC,MAAA,IAEAC,KAAA,khNAKAN,MACAC,aAAA,mCACAC,qBACAC,aACAC,MAAA,eACAC,MAAA,IAEAC,KAAA,yyTAKAN,MACAC,aAAA,2BACAC,qBACAC,aACAC,MAAA,SACAC,MAAA,KAEAC,KAAA;KAKAN,MACAC,aAAA,6BACAC,qBACAC,aACAC,MAAA,WACAC,MAAA,KAEAC,KAAA,o7HAKAN,MACAC,aAAA,6BACAC,qBACAC,aACAC,MAAA,WACAC,MAAA,GAEAC,KAAA,u9CAKAN,MACAC,aAAA,2BACAC,qBACAC,aACAC,MAAA,SACAC,MAAA,KAEAC,KAAA,6pMAKAN,MACAC,aAAA,qCACAC,qBACAC,aACAC,MAAA,oBACAC,MAAA,KAEAC,KAAA,0wcAKAN,MACAC,aAAA,yBACAC,qBACAC,aACAC,MAAA,QACAC,MAAA,IAEAC,KAAA,8tJAKAN,MACAC,aAAA,2BACAC,qBACAC,aACAC,MAAA,SACAC,MAAA,IAEAC,KAAA;KAKAN,MACAC,aAAA,0BACAC,qBACAC,aACAC,MAAA,QACAC,MAAA,IAEAC,KAAA,8iPAKAN,MACAC,aAAA,oCACAC,qBACAC,aACAC,MAAA,gBACAC,MAAA,IAEAC,KAAA,m8UAKAN,MACAC,aAAA,qCACAC,qBACAC,aACAC,MAAA,wBACAC,MAAA,GAEAC,KAAA,42RAKAN,MACAC,aAAA,6BACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,GAEAC,KAAA,62BAKAN,MACAC,aAAA,wBACAC,qBACAC,aACAC,MAAA,SACAC,MAAA,IAEAC,KAAA,w6BAKAN,MACAC,aAAA,4BACAC,qBACAC,aACAC,MAAA,WACAC,MAAA,IAEAC,KAAA;KAKAN,MACAC,aAAA,sCACAC,qBACAC,aACAC,MAAA,gBACAC,MAAA,IAEAC,KAAA,w1NAKAN,MACAC,aAAA,wCACAC,qBACAC,aACAC,MAAA,kBACAC,MAAA,IAEAC,KAAA,29EAKAN,MACAC,aAAA,4CACAC,qBACAC,aACAC,MAAA,sBACAC,MAAA,IAEAC,KAAA,uyHAKAN,MACAC,aAAA,8BACAC,qBACAC,aACAC,MAAA,eACAC,MAAA,IAEAC,KAAA,wHAOAC,aACAC,QAAA,QACAC,aAAA,QACAC,aAAA","file":"path---guide-search-0a0c1ad6d44a0fd39cb9.js","sourcesContent":["webpackJsonp([13],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/guide-search.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"allFile\": {\n\t\t\t\t\"edges\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"The Reason Guide\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Here's how you start!</p>\\n<ul>\\n<li><a href=\\\"/guide/javascript/quickstart\\\">JavaScript quickstart</a></li>\\n<li><a href=\\\"/guide/native/quickstart\\\">Native quickstart</a></li>\\n<li><a href=\\\"/guide/editor-tools/global-installation\\\">Set up your editor</a></li>\\n</ul>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/examples.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Examples\",\n\t\t\t\t\t\t\t\t\t\"order\": 60\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>An example is worth a thousand words.</p>\\n<p>This section is dedicated to newcomers trying to figure out general idioms &#x26; conventions in Reason and BuckleScript. If you're a beginner who's got a good idea for an example, please suggest an edit!</p>\\n<h3 id=\\\"using-the-option-type\\\"><a href=\\\"#using-the-option-type\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Using the <code>option</code> type</h3>\\n<p><code>option</code> is a <a href=\\\"/guide/language/variant\\\">variant</a> that comes with the <a href=\\\"/api/index.html\\\">standard library</a>. It obviates the need for null values in other languages.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> possiblyNullValue1 = <span class=\\\"hljs-type\\\">None</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> possiblyNullValue2 = <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-string\\\">\\\"Hello@\\\"</span>;\\n\\n<span class=\\\"hljs-keyword\\\">switch</span> possiblyNullValue2 {\\n| <span class=\\\"hljs-type\\\">None</span> =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"Nothing to see here.\\\"</span>\\n| <span class=\\\"hljs-type\\\">Some</span> message =&gt; print_endline message\\n};</code></pre>\\n      </div>\\n<h3 id=\\\"creating-a-parametrized-type\\\"><a href=\\\"#creating-a-parametrized-type\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creating a parametrized type</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> universityStudent = {gpa: float};\\n\\n<span class=\\\"hljs-keyword\\\">type</span> response 'studentType = {status: int, student: 'studentType};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> result: response universityStudent = fetchDataFromServer ();</code></pre>\\n      </div>\\n<h3 id=\\\"creating-a-js-object\\\"><a href=\\\"#creating-a-js-object\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creating a JS Object</h3>\\n<p>Assuming you're <a href=\\\"/guide/javascript\\\">compiling to JS</a>, of course.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> obj1 = {\\n  <span class=\\\"hljs-string\\\">\\\"name\\\"</span>: <span class=\\\"hljs-string\\\">\\\"John\\\"</span>,\\n  <span class=\\\"hljs-string\\\">\\\"age\\\"</span>: <span class=\\\"hljs-number\\\">30</span>\\n};\\n<span class=\\\"hljs-comment\\\">/* Compiles to a JS object that looks exactly like what you're seeing */</span></code></pre>\\n      </div>\\n<p>Note that the above isn't a record; the keys are quoted in string. That's Reason syntax sugar for <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_create_js_objects_using_bs_obj\\\">bs.obj</a>. The type is inferred. Next example explicitly types it.</p>\\n<h3 id=\\\"typing-a-js-object\\\"><a href=\\\"#typing-a-js-object\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Typing a JS Object</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> payload = <span class=\\\"hljs-type\\\">Js</span>.t {.\\n  name: string,\\n  age: int\\n};\\n<span class=\\\"hljs-keyword\\\">let</span> obj1: payload = {<span class=\\\"hljs-string\\\">\\\"name\\\"</span>: <span class=\\\"hljs-string\\\">\\\"John\\\"</span>, <span class=\\\"hljs-string\\\">\\\"age\\\"</span>: <span class=\\\"hljs-number\\\">30</span>};</code></pre>\\n      </div>\\n<p>Note that <code>{. name: string, age: int}</code> is the syntax for a Reason/OCaml object type declaration (not a record!). It's lifted into <code>Js.t</code> so that BuckleScript sees the whole type and compiles it correctly to a regular JavaScript object. Ordinary, non-lifted OCaml objects are compiled into something else (rarely needed currently).</p>\\n<h3 id=\\\"binding-to-a-js-module-with-default-export\\\"><a href=\\\"#binding-to-a-js-module-with-default-export\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Binding to a JS Module with Default Export</h3>\\n<p>Assuming the module's called <code>store.js</code>, and has a default export, plus a method called <code>getDate</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> store = <span class=\\\"hljs-type\\\">Js</span>.t {. getDate : (unit =&gt; float) [@bs.meth]};\\nexternal store : store = <span class=\\\"hljs-string\\\">\\\"./store\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span>];\\n<span class=\\\"hljs-type\\\">Js</span>.log store;\\n<span class=\\\"hljs-type\\\">Js</span>.log (store##getDate ());</code></pre>\\n      </div>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/ocaml.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Comparison to OCaml\",\n\t\t\t\t\t\t\t\t\t\"order\": 50\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>If you come from OCaml or are a newcomer reading a tutorial written on OCaml, this guide's for you! But don't forget that <a href=\\\"https://github.com/reasonml/reason-tools\\\">reason-tools</a> can convert between OCaml and Reason syntax on the fly.</p>\\n<h3 id=\\\"comments\\\"><a href=\\\"#comments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Comments</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>(* OCaml (*nest*) *)</code></td>\\n<td><code>/* Reason /*nest*/ */</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"operator-renaming\\\"><a href=\\\"#operator-renaming\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Operator Renaming</h3>\\n<p>Reason has all of OCaml's infix operators, but a couple of operators are expressed differently. In Reason, structural equality is written as <code>==</code>, and reference (physical) equality is written as <code>===</code>. In Reason, to achieve the corresponding inequality, simply swap the first character with a <code>!</code> character. (<code>!=</code> for structural inequality, and <code>!==</code> for reference inequality).</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Equality</th>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Structural</td>\\n<td><code>x = y</code></td>\\n<td><code>x == y</code></td>\\n</tr>\\n<tr>\\n<td>Reference</td>\\n<td><code>x == y</code></td>\\n<td><code>x === y</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<table>\\n<thead>\\n<tr>\\n<th>Inequality</th>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Structural</td>\\n<td><code>x &#x3C;> y</code></td>\\n<td><code>x != y</code></td>\\n</tr>\\n<tr>\\n<td>Reference</td>\\n<td><code>x != y</code></td>\\n<td><code>x !== y</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"local-scope\\\"><a href=\\\"#local-scope\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Local Scope</h3>\\n<p>Reason's lexical scoping is exactly the same as OCaml's, but let bindings syntactically resemble \\\"block scope\\\" which is more familiar to many developers. In Reason, they are created with <code>{}</code> braces, which may contain both <code>let</code> bindings and imperative commands, separated by <code>;</code>. All blocks evaluate to the last line and the semicolon on the last line is optional. <code>{}</code> braces are only needed if you have more than one item to chain together via <code>;</code>.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet _ =\\n  let msg = \\\"Hello\\\" in\\n  print_string msg;\\n  let msg2 = \\\"Goodbye\\\" in\\n  print_string msg2</pre>\\n    </td>\\n    <td>\\n      <pre>\\n{\\n  let msg = \\\"Hello\\\";\\n  print_string msg;\\n  let msg2 = \\\"Goodbye\\\";\\n  print_string msg2\\n};</pre>\\n    </td>\\n  </tr>\\n</table>\\n<p>Reason's <code>{}</code> syntax removes many commonly reported pain points in OCaml's syntax:</p>\\n<ul>\\n<li>Double semicolons are removed entirely.</li>\\n<li><code>begin</code>/<code>end</code> is removed entirely.</li>\\n<li>Infamous imperative parsing <a href=\\\"https://github.com/ocaml/ocaml/pull/278\\\">issues</a> are gone.</li>\\n<li>Module bodies and local scope are unified.</li>\\n</ul>\\n<h3 id=\\\"local-scope-vs-module-body\\\"><a href=\\\"#local-scope-vs-module-body\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Local Scope Vs. Module Body</h3>\\n<p>In Reason, everything that can go between the <code>{}</code> in <a href=\\\"#local-scope\\\">Local Scopes</a> and in module bodies. You can usually even cut/paste code between the two contexts. In OCaml, the syntaxes for the two contexts are very different. Local scope requires trailing <code>in</code>, but module bodies do not and some imperative statements must be assigned to <code>_</code> or <code>()</code>, or else use double <code>;;</code>.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml Module Body</p></th><th scope=\\\"col\\\"><p>Reason Module Body</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet ten = 10\\nlet () = imperativeFunc ten ten\\nlet () = imperativeFunc 0 0</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet ten = 10;\\nimperativeFunc ten ten;\\nimperativeFunc 0 0;</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet ten = 10;;\\nimperativeFunc ten ten;;\\nimperativeFunc 0 0;;</pre>\\n    </td>\\n    <td>Same as above</td>\\n  </tr>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml Local Scope</p></th><th scope=\\\"col\\\"><p>Reason Local Scope</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet ten = 10 in\\nlet _ = imperativeFunc ten ten in\\nimperativeFunc 0 0</pre>\\n    </td>\\n    <td>\\n       same as above\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet ten = 10 in begin\\n  imperativeFunc ten ten;\\n  imperativeFunc 0 0\\nend</pre>\\n    </td>\\n    <td>\\n       same as above\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet ten = 10 in (\\n  imperativeFunc ten ten;\\n  imperativeFunc 0 0\\n)</pre>\\n    </td>\\n    <td>\\n       same as above\\n    </td>\\n  </tr>\\n</table>\\n<h3 id=\\\"tuple-and-record\\\"><a href=\\\"#tuple-and-record\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tuple and Record</h3>\\n<p>In Reason, tuples always require parentheses.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let tup = 4, 5</code></td>\\n<td><code>let tup = (4, 5);</code></td>\\n</tr>\\n<tr>\\n<td><code>let tup = ((1: int), (2:int))</code></td>\\n<td><code>let tup = (1: int, 2:int);</code></td>\\n</tr>\\n<tr>\\n<td><code>fun ((a: int), (b: int)) -> a</code></td>\\n<td><code>fun (a: int, b: int) => a;</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>In Reason, record values resemble JavaScript, using <code>:</code> instead of <code>=</code>. Because Reason tuples always require wrapping parens, records may contain lambdas as values without needing extra parens.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet myRec = {x = 0; y = 10}</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet myRec = {x: 0, y: 10};</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet myFuncs = {\\n  myFun = (fun x -> x + 1);\\n  your = (fun a b -> a + b);\\n}</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet myFuncs = {\\n  myFun: fun x => x + 1,\\n  your: fun a b => a + b\\n};</pre>\\n    </td>\\n</table>\\n<h3 id=\\\"lists\\\"><a href=\\\"#lists\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Lists</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let list = [1; 2; 3]</code></td>\\n<td><code>let list = [1, 2, 3]</code></td>\\n</tr>\\n<tr>\\n<td><code>let list = hd :: tl</code></td>\\n<td><code>let list = [hd, ...tl];</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"type-definitions\\\"><a href=\\\"#type-definitions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Type Definitions</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml Tuple</th>\\n<th>Reason Tuple</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>type tuple = int * int</code></td>\\n<td><code>type tuple = (int, int);</code></td>\\n</tr>\\n<tr>\\n<td><code>let tup: tuple = (10, 30)</code></td>\\n<td><code>let tup: tuple = (10, 30);</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml Record</th>\\n<th>Reason Record</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>type r = {x: int; y: int}</code></td>\\n<td><code>type r = {x: int, y: int};</code></td>\\n</tr>\\n<tr>\\n<td><code>let myRec: r = {x = 0; y = 10}</code></td>\\n<td><code>let myRec: r = {x: 0, y: 10};</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml Function</th>\\n<th>Reason Function</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>type func = int -> int</code></td>\\n<td><code>type func = int => int;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x: func = fun a -> a + 1</code></td>\\n<td><code>let x: func = fun a => a + 1;</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"functions\\\"><a href=\\\"#functions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Functions</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let x a b = e</code></td>\\n<td><code>let x a b => e;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = fun a b -> e</code></td>\\n<td><code>let x = fun a b => e;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = fun a -> fun b -> e</code></td>\\n<td><code>let x = fun a => fun b => e;</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"single-argument-match-functions\\\"><a href=\\\"#single-argument-match-functions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Single argument match functions</h4>\\n<p>OCaml has a function definition (<code>function |</code>) which is considered to be\\nequivalent of <code>function a -> match a with ...</code>. Reason has the same, but\\nthe syntax makes it clear how it is actually an extension of a single argument\\nfunction. The single case match is a natural extension of the simple lambda,\\nand the multicase lambda is a natural extension of the single case lambda.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>Form</p></th><th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      lambda\\n    </td>\\n    <td>\\n      <pre>\\nfun pat -> e</pre>\\n    </td>\\n    <td>\\n      <pre>\\nfun pat => e</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      one match case\\n    </td>\\n    <td>\\n      <pre>\\nfunction | pat -> e</pre>\\n    </td>\\n    <td>\\n      <pre>\\nfun | pat => e</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      many cases\\n    </td>\\n    <td>\\n      <pre>\\nfunction | pat -> e\\n         | pat2 -> e</pre>\\n    </td>\\n    <td>\\n      <pre>\\nfun | pat => e\\n    | pat2 => e</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h4 id=\\\"annotating-arguments\\\"><a href=\\\"#annotating-arguments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Annotating Arguments</h4>\\n<p>In both Reason and OCaml, arguments are annotated with types by (as with\\neverything else), wrapping them in parenthesis after appending\\n<code>:typeAnnotation</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> (arg<span class=\\\"hljs-params\\\"> :<span class=\\\"hljs-params\\\"> argType)<span class=\\\"hljs-params\\\"> </span></span></span></span></span>=&gt; returnValue;</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> (arg<span class=\\\"hljs-params\\\"> :<span class=\\\"hljs-params\\\"> argType)<span class=\\\"hljs-params\\\"> </span></span></span></span></span>=&gt; <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> (arg2<span class=\\\"hljs-params\\\"> :<span class=\\\"hljs-params\\\"> arg2Type)<span class=\\\"hljs-params\\\"> </span></span></span></span></span>=&gt; returnValue;</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> (arg<span class=\\\"hljs-params\\\"> :<span class=\\\"hljs-params\\\"> argType)<span class=\\\"hljs-params\\\"> (arg2<span class=\\\"hljs-params\\\"> :<span class=\\\"hljs-params\\\"> arg2Type)<span class=\\\"hljs-params\\\"> </span></span></span></span></span></span></span></span>=&gt; returnValue;</code></pre>\\n      </div>\\n<p>Both Reason and OCaml allow annotating the return type, when using the\\n\\\"super sugared let binding\\\" form.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-comment\\\">(* OCaml *)</span>\\n<span class=\\\"hljs-keyword\\\">let</span> myFunc (a:<span class=\\\"hljs-built_in\\\">int</span>) (b:<span class=\\\"hljs-built_in\\\">int</span>) :<span class=\\\"hljs-built_in\\\">int</span> * <span class=\\\"hljs-built_in\\\">int</span> = (a, b)\\n<span class=\\\"hljs-keyword\\\">let</span> myFunc (a:<span class=\\\"hljs-built_in\\\">int</span>) (b:<span class=\\\"hljs-built_in\\\">int</span>) :<span class=\\\"hljs-built_in\\\">int</span> <span class=\\\"hljs-built_in\\\">list</span> = [<span class=\\\"hljs-number\\\">1</span>]\\n<span class=\\\"hljs-keyword\\\">let</span> myFunc (a:<span class=\\\"hljs-built_in\\\">int</span>) (b:<span class=\\\"hljs-built_in\\\">int</span>) :<span class=\\\"hljs-built_in\\\">int</span> -&gt; <span class=\\\"hljs-built_in\\\">int</span> = <span class=\\\"hljs-keyword\\\">fun</span> x -&gt; x + a + b</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Reason */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> myFunc (a:int) (b:int) :(int, int) =&gt; (a, b);\\n<span class=\\\"hljs-keyword\\\">let</span> myFunc (a:int) (b:int) :list int =&gt; [<span class=\\\"hljs-number\\\">1</span>];\\n<span class=\\\"hljs-keyword\\\">let</span> myFunc (a:int) (b:int) :(int =&gt; int) =&gt; <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> x<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; x + a + b;</code></pre>\\n      </div>\\n<p>Because we're using <code>=></code> for all functions everywhere in Reason, there's\\none case where we need to add extra parens around a return type that is\\nitself a function type.</p>\\n<h4 id=\\\"type-parameters\\\"><a href=\\\"#type-parameters\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Type Parameters</h4>\\n<h5 id=\\\"ocaml\\\"><a href=\\\"#ocaml\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>OCaml</h5>\\n<p>OCaml's type applications (think \\\"generics\\\"), are applied in reverse order.</p>\\n<p>With OCaml, there are some unintuitive consequences of this.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> x: <span class=\\\"hljs-built_in\\\">int</span> <span class=\\\"hljs-built_in\\\">list</span> = [<span class=\\\"hljs-number\\\">2</span>]\\n\\n<span class=\\\"hljs-keyword\\\">type</span> listOfListOfInts = <span class=\\\"hljs-built_in\\\">int</span> <span class=\\\"hljs-built_in\\\">list</span> <span class=\\\"hljs-built_in\\\">list</span>\\n\\n<span class=\\\"hljs-comment\\\">(* Parsed as: *)</span>\\n<span class=\\\"hljs-keyword\\\">type</span> listOfListOfInts = (<span class=\\\"hljs-built_in\\\">int</span> <span class=\\\"hljs-built_in\\\">list</span>) <span class=\\\"hljs-built_in\\\">list</span></code></pre>\\n      </div>\\n<p>Things get even more strange when type constructors accept multiple parameters.\\nMultiple arguments require parenthesis and commas to separate type parameters,\\nbut those parentheses don't represent tuples. The parentheses/comma form must\\nalso be given when constructing type instances such as <code>(int, string) tuple</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">type</span> (<span class=\\\"hljs-symbol\\\">'a</span>, <span class=\\\"hljs-symbol\\\">'b</span>) tuple = <span class=\\\"hljs-symbol\\\">'a</span> * <span class=\\\"hljs-symbol\\\">'b</span>\\n\\n<span class=\\\"hljs-keyword\\\">type</span> listOfTuplesOfStringAndInt = (<span class=\\\"hljs-built_in\\\">string</span>, <span class=\\\"hljs-built_in\\\">int</span>) tuple <span class=\\\"hljs-built_in\\\">list</span>\\n\\n<span class=\\\"hljs-comment\\\">(* Which is parsed as: *)</span>\\n<span class=\\\"hljs-keyword\\\">type</span> listOfTuplesOfStringAndInt = ((<span class=\\\"hljs-built_in\\\">string</span>, <span class=\\\"hljs-built_in\\\">int</span>) tuple) <span class=\\\"hljs-built_in\\\">list</span>\\n\\n<span class=\\\"hljs-comment\\\">(* Which allows a list of (tuples of (string and int)) *)</span>\\n<span class=\\\"hljs-keyword\\\">let</span> tuples: listOfTuplesOfStringAndInt = [(<span class=\\\"hljs-string\\\">\\\"asdf\\\"</span>, <span class=\\\"hljs-number\\\">3</span>)]</code></pre>\\n      </div>\\n<h5 id=\\\"reason\\\"><a href=\\\"#reason\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reason</h5>\\n<p>In summary, Reason unifies almost all of the syntax into simple \\\"function\\napplication\\\" style meaning that type parameters follow the same space-separated\\nlist pattern seen everywhere else in the syntax. As with everything else,\\nparentheses may be used to enforce precedence. This results in fewer syntactic\\npatterns to learn.</p>\\n<p>For example, you can imagine <code>list</code> being a \\\"function\\\" for types that accepts a\\ntype and returns a new type.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet x: int list = [2]\\ntype listOfListOfInts = int list list\\ntype ('a, 'b) tup = ('a * 'b)\\ntype pairs = (int, int) tup list\\nlet tuples: pairs = [(2, 3)]</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet x: list int = [2];\\ntype listOfListOfInts = list (list int);\\ntype tup 'a 'b = ('a, 'b);\\ntype pairs = list (tup int int);\\nlet tuples: pairs = [(2, 3)];</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h3 id=\\\"tuples-as-type-parameters\\\"><a href=\\\"#tuples-as-type-parameters\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tuples as Type Parameters</h3>\\n<p>Because OCaml uses parens and commas to represent multiple arguments to type\\nconstructors, it's confusing when one of the arguments to a type constructor is\\nitself a tuple. In OCaml, it's difficult to remember the difference between a\\ntype constructor accepting multiple arguments and a type constructor accepting\\na single argument which happens to be a tuple.</p>\\n<p>The following examples shows the difference between passing <em>two</em> type\\nparameters to <code>pair</code>, and a <em>single</em> type parameter that happens to be a tuple.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>type intPair = (int, int) pair</code></td>\\n<td><code>type intPair = pair int int;</code></td>\\n</tr>\\n<tr>\\n<td><code>type pairList = (int * int) list</code></td>\\n<td><code>type pairList = list (int, int);</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<ul>\\n<li>In Reason, syntax that represent tuple or tuple types, always looks like\\ntuples.</li>\\n<li>In Reason, syntax that represent records or record types, always look like\\nrecords.</li>\\n<li>Just about everything else uses the syntactic pattern of function application\\n(space separated arguments).</li>\\n</ul>\\n<h3 id=\\\"variants\\\"><a href=\\\"#variants\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Variants</h3>\\n<h6 id=\\\"ocaml-1\\\"><a href=\\\"#ocaml-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>OCaml</h6>\\n<ul>\\n<li>OCaml already expects constructor argument types to be specified in tuple\\nform, so it's confusing when a single constructor expects a single argument\\nthat <em>happens</em> to be a tuple type.</li>\\n<li>What's even more confusing is that the constructors don't <em>actually</em> accept\\ntuples, yet the syntax appear to resemble tuples.</li>\\n<li>Sometimes the syntax for instantiating a constructor with multiple arguments\\noverlaps the syntax for constructing a variant with a single argument that\\nhappens to be a tuple - so it looks <em>exactly</em> like you <em>are</em> supplying a\\ntuple when you are not actually supplying a tuple.</li>\\n</ul>\\n<h6 id=\\\"reason-1\\\"><a href=\\\"#reason-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reason</h6>\\n<ul>\\n<li>Variant constructor types are expected to be listed as space separated lists,\\nusing parenthesis to group precedence (as with <strong>everything</strong> else).</li>\\n<li>Constructing instances of the variant (as you would have guessed) follows\\nfunction application style (space separated lists).</li>\\n<li>Tuples <strong>always</strong> <em>look</em> like tuples, and anything that looks like a tuple\\n<em>is</em> a tuple.</li>\\n</ul>\\n<table>\\n  <thead>\\n    <tr>\\n      <th scope=\\\"col\\\">\\n        <p>OCaml</p>\\n      </th>\\n      <th scope=\\\"col\\\">\\n        <p>Reason</p>\\n      </th>\\n    </tr>\\n  </thead>\\n  <tr>\\n    <td>\\n      <pre>\\ntype myVariant =\\n  | HasNothing\\n  | HasSingleInt of int\\n  | HasSingleTuple of (int * int)\\n  | HasMultipleInts of int * int\\n  | HasMultipleTuples of (int * int) * (int * int)\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\ntype myVariant =\\n  | HasNothing\\n  | HasSingleInt int\\n  | HasSingleTuple (int, int)\\n  | HasMultipleInts int int\\n  | HasMultipleTuples (int, int) (int, int);\\n      </pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet a = HasSingleInt 10\\nlet a = HasSingleTuple (10, 10)\\nlet a = HasMultipleInts (10, 10)\\nlet a = HasMultipleTuples ((10, 10), (10, 10))\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet a = HasSingleInt 10;\\nlet a = HasSingleTuple (10, 10);\\nlet a = HasMultipleInts 10 10;\\nlet a = HasMultipleTuples (10, 10) (10, 10);\\n      </pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet res = match x with\\n  | HasNothing -> 0\\n  | HasSingleInt x -> 0\\n  | HasSingleTuple (x, y) -> 0\\n  | HasMultipleInts (x, y) -> 0\\n  | HasMultipleTuples ((x, y), (q, r)) -> 0\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet res = switch x {\\n| HasNothing => 0\\n| HasSingleInt x => 0\\n| HasSingleTuple (x, y) => 0\\n| HasMultipleInts x y => 0\\n| HasMultipleTuples (x, y) (q, r) => 0\\n};\\n      </pre>\\n    </td>\\n  </tr>\\n</table>\\n<h3 id=\\\"pattern-matching\\\"><a href=\\\"#pattern-matching\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Pattern Matching</h3>\\n<p>Can you spot the error in the OCaml example? This is one of the most common mistakes among OCaml programmers. The second <code>match</code> <em>must</em> be wrapped in parentheses, otherwise the <code>Some</code> case is parsed as belonging to the outer <code>match</code>. Reason's required <code>{}</code> blocks around match cases prevent this issue.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml (BROKEN)</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet res = match x with\\n  | A (x, y) -> match y with\\n    | None -> 0\\n    | Some i -> 10\\n  | B (x, y) -> 0</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet res = switch x {\\n  | A (x, y) => switch y {\\n    | None => 0\\n    | Some i => 10\\n  }\\n  | B x y => 0\\n};</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h3 id=\\\"modules-and-signatures\\\"><a href=\\\"#modules-and-signatures\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Modules and Signatures</h3>\\n<h4 id=\\\"definition\\\"><a href=\\\"#definition\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Definition</h4>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nmodule type MySig = sig\\n  type t = int\\n  val x: int\\nend\\nmodule MyModule: MySig = struct\\n  type t = int\\n  let x = 10\\nend\\nmodule MyModule = struct\\n  module NestedModule = struct\\n     let msg = \\\"hello\\\";\\n  end\\nend\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\nmodule type MySig = {\\n  type t = int;\\n  let x: int;\\n};\\nmodule MyModule: MySig = {\\n  type t = int;\\n  let x = 10;\\n};\\nmodule MyModule = {\\n  module NestedModule = {\\n     let msg = \\\"hello\\\";\\n  };\\n};\\n      </pre>\\n    </td>\\n  </tr>\\n</table>\\n<h4 id=\\\"functors-types\\\"><a href=\\\"#functors-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Functors Types</h4>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nmodule type FType =\\n  functor (A: ASig) ->\\n  functor (B: BSig) -> Result\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\nmodule type FType =\\n  (A: ASig) =>\\n  (B: BSig) => Result;\\n      </pre>\\n    </td>\\n  </tr>\\n</table>\\n<h3 id=\\\"functors\\\"><a href=\\\"#functors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Functors</h3>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nmodule F =\\n  functor (A: ASig) ->\\n  functor (B: BSig) -> struct end</pre>\\n    </td>\\n    <td>\\n      <pre>\\nmodule F =\\n  fun (A: ASig) =>\\n  fun (B: BSig) => {};</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nmodule F = functor (A: ASig) (B: BSig) -> struct end</pre>\\n    </td>\\n    <td>\\n      <pre>\\nmodule F = fun (A: ASig) (B: BSig) => {};</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nmodule F (A: ASig) (B: BSig) = struct end</pre>\\n    </td>\\n    <td>\\n      <pre>\\nmodule F (A: ASig) (B: BSig) => {};</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nmodule Res = F(A)(B)</pre>\\n    </td>\\n    <td>\\n      <pre>\\nmodule Res = F A B;</pre>\\n    </td>\\n  </tr>\\n</table>\\n<p><strong>Note: There is currently a known inconsistency where functors do not\\nconform to function application syntax when in type annotation position - see\\n<a href=\\\"https://github.com/facebook/reason\\\">the Reason repo's</a> <code>formatTest/modules.re</code>.</strong></p>\\n<h3 id=\\\"various-improvements\\\"><a href=\\\"#various-improvements\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Various Improvements</h3>\\n<p>OCaml doesn't require parens around sequences <code>(a;b;c;d)</code> or tuples <code>(x,y)</code>, so\\nthat ends up ruling out a bunch of other very convenient syntax rules.  Since\\nReason always uses <code>{}</code> to enclose sequences or let bindings, and Reason\\nalways requires <code>()</code> around tuples, many other syntax constructs are expressed\\nmore intuitively, without requiring extra wrapping in parenthesis.</p>\\n<h4 id=\\\"lambdas-as-record-fields-no-longer-need-extra-parens\\\"><a href=\\\"#lambdas-as-record-fields-no-longer-need-extra-parens\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Lambdas as record fields no longer need extra parens</h4>\\n<p>This is a welcomed improvement because the OCaml type errors the user would\\nsee were very confusing when it would believe the function's return value\\nwas a tuple with infix <code>,</code> comma.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet myFuncs = {\\n  myFun = (fun x -> x + 1);\\n  your = (fun a b -> a + b);\\n}</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet myFuncs = {\\n  myFun: fun x => x + 1,\\n  your: fun a b => a + b\\n}</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h4 id=\\\"lambdas-as-match-results-no-longer-need-extra-parens\\\"><a href=\\\"#lambdas-as-match-results-no-longer-need-extra-parens\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Lambdas as match results no longer need extra parens</h4>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet x = match prnt with\\n  | None -> fun a -> blah\\n  (* Extra () required ! *)\\n  | Some \\\"_\\\" -> (fun a -> ())\\n  | Some \\\"ml\\\" -> blah\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet x = switch prnt {\\n| None => fun a => blah\\n| Some \\\"_\\\" => fun a => ()\\n| Some \\\"ml\\\" => blah\\n};</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h4 id=\\\"lambdas-and-type-annotations-in-tuples-no-longer-require-extra-parens\\\"><a href=\\\"#lambdas-and-type-annotations-in-tuples-no-longer-require-extra-parens\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Lambdas and type annotations in tuples no longer require extra parens</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let tuple = ((fun x -> x), 20)</code></td>\\n<td><code>let tuple = (fun x => x, 20);</code></td>\\n</tr>\\n<tr>\\n<td><code>let tuple = ((\\\"hi\\\": string), (20: int))</code></td>\\n<td><code>let tuple = (\\\"hi\\\": string, 20: int);</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"various-differences\\\"><a href=\\\"#various-differences\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Various Differences</h3>\\n<h4 id=\\\"as-precedence\\\"><a href=\\\"#as-precedence\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>as</code> precedence</h4>\\n<p>With Reason, <code>as</code> has a higher precedence than <code>|</code> bar. This allows creating <code>as</code> aliases\\nfor entire rows in pattern matching.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet ppp = match MyThing 20 with\\n  | (MyThing x as ppp)\\n  | (YourThing x as ppp) -> ppp;\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet ppp = switch (MyThing 20) {\\n| MyThing x as ppp\\n| YourThing x as ppp => ppp;\\n};\\n      </pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet | (MyThing _ as ppp)\\n    | (YourThing _ as ppp) = ppp;</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet | MyThing _ as ppp\\n    | YourThing _ as ppp = ppp;</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h4 id=\\\"mutable-record-field-updates\\\"><a href=\\\"#mutable-record-field-updates\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mutable Record Field Updates</h4>\\n<p>Because equalities and their negations have been made more consistent in Reason,\\nthe <code>=</code> operator is available for mutable field update.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>myRec.field &#x3C;- \\\"next\\\"</code></td>\\n<td><code>myRec.field = \\\"next\\\"</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"prefix-operators\\\"><a href=\\\"#prefix-operators\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Prefix operators</h4>\\n<p>In Reason, <code>!</code> and other prefix operators have lower precedence than dot <code>.</code> or send <code>#</code>.\\nThis is more consistent with what other languages do, and is more practical\\nwhen (or if) the <code>!</code> symbol is used to represent boolean <code>not</code>.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let x = !(foo.bar)</code></td>\\n<td><code>let x = !foo.bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !(foo#bar)</code></td>\\n<td><code>let x = !foo#bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !(!foo.bar)</code></td>\\n<td><code>let x = !(!foo).bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !(!foo#bar)</code></td>\\n<td><code>let x = !(!foo)#bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !(!(foo.bar))</code></td>\\n<td><code>let x = !(!foo.bar);</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !(!(foo#bar))</code></td>\\n<td><code>let x = !(!foo#bar);</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !!(foo.bar)</code></td>\\n<td><code>let x = !!foo.bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !!(foo#bar)</code></td>\\n<td><code>let x = !!foo#bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !~(foo.bar)</code></td>\\n<td><code>let x = !~foo.bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !~(foo#bar)</code></td>\\n<td><code>let x = !~foo#bar;</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"comment-escaping\\\"><a href=\\\"#comment-escaping\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Comment Escaping</h4>\\n<p>Because Reason uses C-style comments, some obscure custom prefix/infix\\noperators must be written differently.  The rules for prefix/infix operators\\nare the same as in OCaml syntax, but with the following exceptions:</p>\\n<p>Specifically, if any character except the first in an prefix/infix operator is\\na star or forward slash, that must be first escaped with a backslash. These will\\nbe parsed <em>without</em> the backslash when added to the AST. When reprinted, the\\nescape backslashes are added back in automatically.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let (/*) a b = a + b</code></td>\\n<td><code>let (/\\\\*) a b => a + b;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = 12 /-* 23 /-* 12</code></td>\\n<td><code>let x = 12 /-\\\\* 23 /-\\\\* 12;</code></td>\\n</tr>\\n<tr>\\n<td><code>let y = (/*) a b</code></td>\\n<td><code>let y = (/\\\\*) a b;</code></td>\\n</tr>\\n<tr>\\n<td><code>let (!=*) q r => q + r</code></td>\\n<td><code>let (!=\\\\*) q r => q + r;</code></td>\\n</tr>\\n<tr>\\n<td><code>let res = q (!=*) r</code></td>\\n<td><code>let res = q (!=\\\\*) r;</code></td>\\n</tr>\\n<tr>\\n<td><code>let (!=/*) q r = q + r</code></td>\\n<td><code>let (!=\\\\/\\\\*) q r => q + r;</code></td>\\n</tr>\\n<tr>\\n<td><code>let res = q (!=/*) r</code></td>\\n<td><code>let res = q (!=\\\\/\\\\*) r;</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"operator-renaming-1\\\"><a href=\\\"#operator-renaming-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Operator Renaming</h4>\\n<p>If Reason uses <code>==</code> to represent OCaml's <code>=</code>, and\\nuses <code>===</code> to represent OCaml's <code>==</code>, then how would Reason represent OCaml's\\n<code>===</code> symbol (if it were defined)? Reason provides a way! \\\"Escape\\\" the triple\\nequals symbol!</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Identifier</th>\\n<th>Meaning</th>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>\\\"===\\\"</code></td>\\n<td>Custom value</td>\\n<td><code>x === y</code></td>\\n<td><code>x \\\\=== y</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"repl\\\"><a href=\\\"#repl\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>REPL</h4>\\n<p>In Reason's repl <a href=\\\"/guide/editor-tools/extra-goodies#repl\\\"><code>rtop</code></a> (a customized <a href=\\\"https://github.com/diml/utop\\\"><code>utop</code></a>), each input is submitted via a single <code>;</code> semicolon. OCaml's repl requires two semicolons <code>;;</code>.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>;;</code></td>\\n<td><code>;</code></td>\\n</tr>\\n</tbody>\\n</table>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/what-and-why.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"What & Why\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"what-is-reason\\\"><a href=\\\"#what-is-reason\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What Is Reason?</h3>\\n<p>Reason is not a new language; it's a new syntax and toolchain powered by the battle-tested language, <a href=\\\"http://ocaml.org\\\">OCaml</a>. Reason gives OCaml a familiar syntax geared toward JavaScript programmers, and caters to the existing NPM/Yarn workflow folks already know.</p>\\n<p>In that regard, Reason can almost be considered as a solidly statically typed, faster and simpler cousin of JavaScript, minus the historical crufts, plus the features of ES2030 you can use today, and with access to both the JS and the OCaml ecosystem!</p>\\n<p>Reason compiles to JavaScript thanks to our partner project, <a href=\\\"https://bucklescript.github.io/bucklescript/Manual.html\\\">BuckleScript</a>, which compiles OCaml/Reason into readable JavaScript with smooth interop. Reason also compiles to fast, barebone assembly, thanks to OCaml itself.</p>\\n<h3 id=\\\"why-reason\\\"><a href=\\\"#why-reason\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Why Reason?</h3>\\n<blockquote>\\n<p>\\\"Why bother learning an <strong>entire</strong> new language?\\\"</p>\\n</blockquote>\\n<p>This isn't what Reason's about.</p>\\n<p>The realization is that 80% of OCaml's semantics (aka how it runs) already straightforwardly maps over to modern JavaScript and vice-versa*; if one has the luxury of leaving out a few corners of JavaScript and add a few nice things, one can actually achieve something that compiles to pretty readable JS and directly use 80% of its ecosystem &#x26; tooling. That is, on top of being able to compile to barebone assembly, iOS, Android and even <a href=\\\"http://www.algo-prog.info/ocapic/web/index.php?id=ocapic\\\">microcontrollers</a>!</p>\\n<p>However, it's unclear which features of JS to reshape, in order to fit it into the mold of a language with fast semantics and 100% sound typing. But we can <em>work backward</em>, from an already sound language with performance and simplicity taken into account, and give it a few tweaks so that it looks and acts a bit more like the better part of the familiar web language we've come to know.</p>\\n<p>All these decisions made it so that, for common use-cases, the learning curve of Reason isn't really higher than learning JS + a gradual type system; in return, you get:</p>\\n<ul>\\n<li><strong>A rock solid type system</strong>. OCaml types have 100% coverage (every line of code), inference (types can be deduced and aren't required to be written manually), and soundness (once it compiles, the types are guaranteed to be accurate).</li>\\n<li><strong>An eye for simplicity &#x26; pragmatism</strong>. We allow opt-in side-effect, mutation and object for familiarity &#x26; interop, while keeping the rest of the language pure, immutable and functional.</li>\\n<li><strong>A focus on performance &#x26; size</strong>. Reason's build system, <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_bucklescript_build_system_code_bsb_code\\\"><code>bsb</code></a>, finishes building in less than 100ms (incremental). Our produced output is also <a href=\\\"https://twitter.com/bobzhang1988/status/827562467148623875\\\">tiny</a>.</li>\\n<li><strong>Incremental learning &#x26; codebase conversion</strong>. Reap the benefits of a fully typed file from day one. If everything else fails, <a href=\\\"/guide/javascript/interop\\\">paste some raw JavaScript snippets right in your Reason file</a>.</li>\\n<li><strong>Great ecosystem &#x26; tooling</strong>. Use <a href=\\\"/guide/editor-tools/editors-plugins\\\">your favorite editor</a>, <a href=\\\"/guide/javascript/libraries\\\">your favorite NPM package</a>, and any of your <a href=\\\"https://github.com/reasonml/reason-react\\\">favorite</a> <a href=\\\"https://github.com/reasonml-community/bs-jest\\\">existing</a> <a href=\\\"https://webpack.js.org\\\">stack</a>.</li>\\n</ul>\\n<p>* Don't believe us? Check our <a href=\\\"/guide/javascript/syntax-cheatsheet\\\">JS -> Reason cheat sheet</a> or try a few snippets of Reason in <a href=\\\"/try/\\\">the playground</a> and observe the output at the right!</p>\\n<h3 id=\\\"why-ocaml-as-the-backing-language-why-not-my-favorite-language\\\"><a href=\\\"#why-ocaml-as-the-backing-language-why-not-my-favorite-language\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Why OCaml As The Backing Language? Why Not [My Favorite Language]?</h3>\\n<p>First of all, please understand that no matter which language we choose, we'd get this question from most of you! =)</p>\\n<p>Many backing languages would satisfy the previous section's points; the points below, however, have been deal-breakers in our considerations.</p>\\n<ul>\\n<li><strong>The ability to render to native code</strong>. OCaml's native (assembly) startup time is in <strong>single digit milliseconds</strong>. We have big plans to use Reason on native one day; meanwhile, we're focusing on adoption through great JavaScript compatibility.</li>\\n<li><strong>Side-effects, mutation &#x26; other escape hatches</strong>. These aren't usually the shiny selling points of a language; but being able to bridge toward a part of a codebase without an elaborate interop/rewrite is crucial for us at Facebook. OCaml defaults to immutable and functional code, but having the escape hatches makes the initial adoption sometimes simply possible.</li>\\n<li><strong>Implementation polish matters</strong>. OCaml's been refined over two decades and gets better every year. If we propose a new syntax &#x26; toolchain, we'd like it not to have deal-breaking semantics &#x26; type \\\"gotchas\\\" and/or diminishing return, 80% onto the writing of a codebase.</li>\\n<li><strong>The language for writing React</strong>. Reason's <a href=\\\"https://twitter.com/jordwalke\\\">creator</a> also created <a href=\\\"https://facebook.github.io/react/\\\">ReactJS</a>, whose first prototypes were written in SML, a distant cousin of OCaml. We've transcribed ReactML into ReactJS for wide adoption. A few years later, we're now iterating on the future of ReactJS through <a href=\\\"//reasonml.github.io/reason-react/\\\">ReasonReact</a>.</li>\\n<li><strong>Nice, growing community</strong>. I mean, we're really nice. I'm Canadian. We have members all over the world. If everything fails, ask in the Discord channel and <a href=\\\"https://twitter.com/ken_wheeler/status/894298052705615872\\\">at least a few of our members in your timezone will answer</a>.</li>\\n</ul>\\n<h3 id=\\\"dont-like-reason\\\"><a href=\\\"#dont-like-reason\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Don't Like Reason?</h3>\\n<p>Make sure you talk to us in <a href=\\\"https://discord.gg/reasonml\\\">Discord</a> first, to clear any misunderstanding/misconception! But if you <em>still</em> don't like Reason, here are some alternatives:</p>\\n<ul>\\n<li><a href=\\\"http://ocaml.org\\\">OCaml</a>. Reason's just a syntax and toolchain layer on top of OCaml. The OCaml&#x3C;->Reason interop should be seamless since we share the same abstract syntax tree. BuckleScript works fine in OCaml, naturally. <a href=\\\"http://ocsigen.org/js_of_ocaml/\\\">Js_of_ocaml</a> too.</li>\\n<li><a href=\\\"http://elm-lang.org\\\">Elm</a>. A cousin of ours! Make clean, fun webapps.</li>\\n<li><a href=\\\"http://www.purescript.org\\\">PureScript</a>. Inspired by Haskell, compiled to the web.</li>\\n</ul>\\n<p>Hope that helps! Want to know more? Strike a conversation with any of us in the <a href=\\\"/community/\\\">community</a>!</p>\\n<p><em>Reason is a open source community project from Facebook</em>.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/converting.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Converting from JS\",\n\t\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<h2 id=\\\"preparation\\\"><a href=\\\"#preparation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Preparation</h2>\\n<p><strong>Before you proceed</strong>, please make sure that Reason is what your team needs! As much as we vouch for Reason and BuckleScript's popularity, please don't unnecessarily thrash your colleagues and give them a bad first impression. That's hard to undo afterward.</p>\\n<p>This guide covers a workflow that's helped us convert things over rapidly and efficiently. It's not intended to go over language/FFI features (though it puts them in context). Basic Reason/BuckleScript knowledge is assumed.</p>\\n<h2 id=\\\"syntax\\\"><a href=\\\"#syntax\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Syntax</h2>\\n<p><strong>Goal</strong>: first and foremost, <strong>make the file syntactically valid</strong>. Don't care about wrong types, missing modules, bad file organization, too many externals, etc. We'll come back to clean these up after setting up the regression test that is \\\"no more syntax errors\\\".</p>\\n<p>Since the Reason syntax resembles enough to that of JavaScript, instead of starting a new Reason file, just copy over an existing js file and work on top of it.</p>\\n<p><em>Tip</em>: don't forget that you can use <code>refmt</code> in your editor/terminal! If you don't know e.g. the precedence of some operations, wrap them in as many parentheses as you wish, then <code>refmt</code> your code and see which ones remain. Likewise, no need to lose time on indentations and spacing; <code>refmt</code> takes care of them.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* original JS file you've copied over */</span>\\nconst school = require('school');\\n\\nconst defaultId = <span class=\\\"hljs-number\\\">10</span>;\\n\\nfunction queryResult(usePayload, payload) {\\n  <span class=\\\"hljs-keyword\\\">if</span> (usePayload) {\\n    <span class=\\\"hljs-keyword\\\">return</span> payload.student\\n  }\\n  <span class=\\\"hljs-keyword\\\">return</span> school.getStudentById(defaultId);\\n}</code></pre>\\n      </div>\\n<p>Here are some of the things you'd do at this step:</p>\\n<ul>\\n<li>\\n<p>Convert the function call syntax over.</p>\\n</li>\\n<li>\\n<p>Convert the <code>var</code>/<code>const</code> over to <code>let</code>.</p>\\n</li>\\n<li>\\n<p>Hide the <code>require</code>s.</p>\\n</li>\\n<li>\\n<p>Make other such changes. For idioms that don't have a BuckleScript equivalent, use <code>bs.raw</code> (<a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_embedding_arbitrary_js_code_as_an_expression\\\">documentation</a>).</p>\\n</li>\\n</ul>\\n<p>Again, <strong>worry only about making the file syntactically valid</strong>. Trying to learn all three of syntax, types and other semantics while converting over a file reduces your iteration speed to less than a third.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* syntactically valid, semantically wrong conversion */</span>\\n<span class=\\\"hljs-comment\\\">/* const school = require('school'); */</span>\\n\\n<span class=\\\"hljs-keyword\\\">let</span> defaultId = <span class=\\\"hljs-number\\\">10</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> queryResult usePayload payload =&gt; {\\n  <span class=\\\"hljs-keyword\\\">if</span> (usePayload) {\\n    payload.student\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    <span class=\\\"hljs-comment\\\">/* no need for early return in Reason; if-else is an expression */</span>\\n    school.getStudentById defaultId;\\n  }\\n};</code></pre>\\n      </div>\\n<h2 id=\\\"types-pass-1\\\"><a href=\\\"#types-pass-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Types, Pass 1</h2>\\n<p><strong>Goal</strong>: correct the types, but just enough to move onto the next step.</p>\\n<p>You might still occasionally get syntax errors, but not as drastic as the previous step's.</p>\\n<ul>\\n<li>\\n<p>Change <code>foo.bar</code> to <code>foo##bar</code>. This escape-hatch <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_how_to_consume_js_property_and_methods\\\">BuckleScript feature</a> will be your medium-term friend.</p>\\n</li>\\n<li>\\n<p>Convert <code>{foo: bar}</code> to <code>[%bs.obj {foo: bar}]</code> (<a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_create_js_objects_using_bs_obj\\\">docs</a>). After <code>refmt</code>, this will sugar to <code>{\\\"foo\\\": bar}</code>.</p>\\n</li>\\n<li>\\n<p>To communicate with external JS files, use <code>external</code>. They're BuckleScript's <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_ffi\\\">foreign function interface</a>.</p>\\n<ul>\\n<li>\\n<p>Inline externals. No need to create clean, well-separated files for externals for now. We'll come back to these.</p>\\n</li>\\n<li>\\n<p>If it's too cumbersome to correctly type an <code>external</code>'s input/output, use some placeholder polymorphic types, e.g. <code>external getStudentById: 'whatever => 'whateverElse = ...</code>.</p>\\n</li>\\n<li>\\n<p>For data types &#x26; patterns that are hard to properly convert over, you can occasionally create converters like <code>external unsafeCast : myPayloadType => anotherDataType = \\\"%identity\\\";</code>.</p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<p>This is the first pass; the final types likely look different. For now, reap the rewards! Once you're finally done fixing all the type errors, your JS file should now be generated. Keep it open side-by-side. Time to come back and fix all the hacks!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* syntactically valid, still semantically wrong, but better */</span>\\nexternal getStudentById: 'whatever =&gt; 'whateverElse = <span class=\\\"hljs-string\\\">\\\"getStudentById\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"school\\\"</span>];\\n\\n<span class=\\\"hljs-keyword\\\">let</span> defaultId = <span class=\\\"hljs-number\\\">10</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> queryResult usePayload payload =&gt; {\\n  <span class=\\\"hljs-keyword\\\">if</span> (usePayload) {\\n    payload##student <span class=\\\"hljs-comment\\\">/* this will be inferred as `Js.t 'a` */</span>\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    getStudentById defaultId;\\n  }\\n};</code></pre>\\n      </div>\\n<h2 id=\\\"runtime-semantics\\\"><a href=\\\"#runtime-semantics\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Runtime Semantics</h2>\\n<p><strong>Goal</strong>: fix the errors in the generated JS output.</p>\\n<p>Compare it with your old JS file. The output is likely incorrect; you probably mis-converted some idioms and mistyped some externals.</p>\\n<ul>\\n<li>\\n<p>Type the shape of JS objects (the things that required <code>##</code>).</p>\\n</li>\\n<li>\\n<p>Convert whichever parts to records/variants/idiomatic OCaml types.</p>\\n</li>\\n</ul>\\n<p>All this time, check the output for any change.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> student; <span class=\\\"hljs-comment\\\">/* abstract type, described later */</span>\\nexternal getStudentById: 'whatever =&gt; student = <span class=\\\"hljs-string\\\">\\\"getStudentById\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"school\\\"</span>];\\n\\n<span class=\\\"hljs-keyword\\\">type</span> payloadType = <span class=\\\"hljs-type\\\">Js</span>.t {. student: student};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> defaultId = <span class=\\\"hljs-number\\\">10</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> queryResult usePayload (payload: payloadType) =&gt; {\\n  <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-type\\\">Js</span>.to_bool usePayload) {\\n    payload##student\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    getStudentById defaultId;\\n  }\\n};</code></pre>\\n      </div>\\n<h2 id=\\\"clean-up-types-pass-2\\\"><a href=\\\"#clean-up-types-pass-2\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Clean Up (Types, Pass 2)</h2>\\n<p><strong>Goal</strong>: make your types legit (aka, sound).</p>\\n<p>Go back fix whatever you've left during the first pass.</p>\\n<ul>\\n<li>\\n<p>Make sure you don't have any <code>'whatever</code> types left in <code>external</code>s.</p>\\n</li>\\n<li>\\n<p>You can keep the <code>external</code>s inlined, or pull them out into a file.</p>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* in the current file */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> payloadType = <span class=\\\"hljs-type\\\">Js</span>.t {. student: <span class=\\\"hljs-type\\\">School</span>.student}; <span class=\\\"hljs-comment\\\">/* <span class=\\\"hljs-doctag\\\">TODO:</span> put this somewhere else! */</span>\\n\\n<span class=\\\"hljs-keyword\\\">let</span> defaultId = <span class=\\\"hljs-number\\\">10</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> queryResult usePayload (payload: payloadType) =&gt; {\\n  <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-type\\\">Js</span>.to_bool usePayload) {\\n    payload##student\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    <span class=\\\"hljs-type\\\">School</span>.getStudentById defaultId;\\n  }\\n};</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* in a dedicated School.re file */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> student;\\nexternal getStudentById: int =&gt; student = <span class=\\\"hljs-string\\\">\\\"getStudentById\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"School\\\"</span>];\\nexternal getAllStudents: unit =&gt; array student = <span class=\\\"hljs-string\\\">\\\"getAllStudents\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"School\\\"</span>];</code></pre>\\n      </div>\\n<p>Type <code>student</code> doesn't have an actual content; that's called an <a href=\\\"/guide/language/module#signatures\\\">abstract type</a>. It's a convenient way of specifying the relationship between external calls without knowing what the shape of the data is under the hood.</p>\\n<p>And then you're done!</p>\\n<h2 id=\\\"tips\\\"><a href=\\\"#tips\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips</h2>\\n<p><strong>Don't</strong> try to fully convert a JS file into a pristine Reason file in a single shot. Such method might actually slow you down! It's fine to have externals and <code>bs.obj</code> left, and temporarily not take advantage of nice OCaml features (variants, labeled arguments, etc.). Once you've converted a few other related files, you can come back and now refactor <strong>faster</strong> by banking on the type system.</p>\\n<p>Whatever nice utilities you find (e.g. convert a <code>Js.null_undefined Js.boolean</code> to a <code>bool</code>), put them in a <code>tempUtils.re</code> file or something. They're easy examples for your colleagues and removes some conversion churns.</p>\\n<p>We <strong>highly recommend</strong> you to check the JS output into version control. It makes your build system integration quasi-nonexistent, and makes sure that when you're not there, your teammates can make small changes, audit the output diff, and catch any mistakes. It's also a great selling point that the checked in JS output is friendly to emergency hot patches (a big selling point for managers!). Even if you're upgrading BuckleScript version, you'd catch any output difference. It's like <a href=\\\"https://facebook.github.io/jest/docs/snapshot-testing.html\\\">Jest snapshots</a>, for free!</p>\\n<p>As always, ping us on <a href=\\\"https://discord.gg/reasonml\\\">Discord</a> for more help!</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"JavaScript\",\n\t\t\t\t\t\t\t\t\t\"order\": 30\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Reason compiles to JavaScript and native code. The workflows for each are <strong>currently separated</strong>. This page describes the JavaScript workflow. Our native workflow is currently work-in-progress and can be seen <a href=\\\"/guide/native\\\">here</a>.\\nWhenever you get stuck:</p>\\n<ul>\\n<li>Check out the <a href=\\\"/community/faq\\\">frequently asked questions</a>.</li>\\n<li>Peruse some <a href=\\\"/community/examples\\\">code examples</a>.</li>\\n<li>Ask us questions on <a href=\\\"https://discord.gg/reasonml\\\">Discord</a>!</li>\\n</ul>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/libraries.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Libraries\",\n\t\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Libraries that have already been wrapped with BuckleScript bindings are customarily prefixed with <code>bs-</code>, e.g. <code>bs-director</code>. <a href=\\\"https://www.npmjs.com/search?q=keywords:bucklescript\\\">Here's a search</a> for all of the BS related libraries on NPM.</p>\\n<p>Take a look at <a href=\\\"https://github.com/reasonml-community\\\">reasonml-community</a> to see a list of curated bindings to JS libraries. And the <a href=\\\"https://github.com/reasonml-community/index\\\">index</a> which tries to keep track of non-curated bindings and libraries too.</p>\\n<p>If you can't find what you're looking for: sometimes you don't need a binding to use a JS library. Most JS data types, such as array and objects, <a href=\\\"https://bucklescript.github.io/bucklescript/Manual.html#_runtime_representation\\\">map over cleanly to Reason and vice-versa</a>. You also have access to the familiar <a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.html\\\">JS API</a>. Be sure to also check the \\\"Interop\\\" and \\\"Converting from JS\\\" sections here!</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/interop.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Interop\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<h2 id=\\\"just-dumping-javascript-in-the-middle-of-your-reason-code\\\"><a href=\\\"#just-dumping-javascript-in-the-middle-of-your-reason-code\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Just dumping JavaScript in the middle of your Reason code</h2>\\n<p>If you're just hacking things together, this can be very nice, but you also have all of the unsafety of JavaScript code 😄.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-type\\\">Js</span>.log <span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>;\\n[%%bs.raw {|\\nconsole.log(<span class=\\\"hljs-symbol\\\">'here</span> is some javascript <span class=\\\"hljs-keyword\\\">for</span> you');\\n|}];</code></pre>\\n      </div>\\n<blockquote>\\n<p><code>{|</code> and <code>|}</code> are the delimiters of a multi-line string in OCaml. You can also put a tag in there e.g. <code>{something|</code> and then it will look for a matching <code>|something}</code> to close.</p>\\n</blockquote>\\n<p>And here's the resulting javascript:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-javascript\\\"><code><span class=\\\"hljs-comment\\\">// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE</span>\\n'use strict';\\nconsole.log(<span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>);\\nconsole.log('here <span class=\\\"hljs-keyword\\\">is</span> some javascript <span class=\\\"hljs-keyword\\\">for</span> you');</code></pre>\\n      </div>\\n<h2 id=\\\"dumping-in-some-javascript-and-making-it-accessible-from-reason\\\"><a href=\\\"#dumping-in-some-javascript-and-making-it-accessible-from-reason\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dumping in some JavaScript, and making it accessible from Reason</h2>\\n<p>What if you want a value that can be used from your Reason code?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-type\\\">Js</span>.log <span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> x = [%bs.raw {| <span class=\\\"hljs-symbol\\\">'here</span> is a <span class=\\\"hljs-built_in\\\">string</span> from javascript' |}];\\n<span class=\\\"hljs-type\\\">Js</span>.log (x ^ <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>); /* ^ is the operator <span class=\\\"hljs-keyword\\\">for</span> <span class=\\\"hljs-built_in\\\">string</span> concat */</code></pre>\\n      </div>\\n<p>Now you might be wondering \\\"what magic is this?? How did ocaml know that <code>x</code> was a string? <strong>It doesn't</strong>. The type of <code>x</code> in this code is a magic type that will unify with anything! This is quite dangerous and can have cascading effects in OCaml's type inference algorithm.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> y = [%bs.raw {| <span class=\\\"hljs-symbol\\\">'something'</span> |}];\\n<span class=\\\"hljs-type\\\">Js</span>.log (<span class=\\\"hljs-string\\\">\\\"a string\\\"</span> ^ y, <span class=\\\"hljs-number\\\">10</span> + y);\\n/* danger!! ocaml won't stop you from using y <span class=\\\"hljs-keyword\\\">as</span> <span class=\\\"hljs-number\\\">2</span> totally different types */</code></pre>\\n      </div>\\n<p>To fix this, you should <strong>always</strong> provide a concrete type for the result of <code>bs.raw</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> x: <span class=\\\"hljs-built_in\\\">string</span> = [%bs.raw {| <span class=\\\"hljs-symbol\\\">'well</span>-typed' |}];\\n<span class=\\\"hljs-type\\\">Js</span>.log (x ^ <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>);\\n/* ocaml will error out <span class=\\\"hljs-keyword\\\">if</span> you <span class=\\\"hljs-keyword\\\">try</span> <span class=\\\"hljs-keyword\\\">to</span> use x <span class=\\\"hljs-keyword\\\">as</span> anything other than a <span class=\\\"hljs-built_in\\\">string</span> */</code></pre>\\n      </div>\\n<p>And here's the output!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-javascript\\\"><code>// Generated by BUCKLESCRIPT VERSION <span class=\\\"hljs-number\\\">1.7</span>.<span class=\\\"hljs-number\\\">4</span>, PLEASE EDIT WITH CARE\\n<span class=\\\"hljs-string\\\">'use strict'</span>;\\nconsole.log(<span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>);\\nvar x = ( <span class=\\\"hljs-string\\\">'here is a string from javascript'</span> );\\nconsole.log(x + <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>);\\nvar y = ( <span class=\\\"hljs-string\\\">'something'</span> );\\nconsole.log(/* tuple */[\\n      <span class=\\\"hljs-string\\\">\\\"a string\\\"</span> + y,\\n      <span class=\\\"hljs-number\\\">10</span> + y | <span class=\\\"hljs-number\\\">0</span>\\n    ]);\\nvar x<span class=\\\"hljs-variable\\\">$1</span> = ( <span class=\\\"hljs-string\\\">'well-typed'</span> );\\nconsole.log(x<span class=\\\"hljs-variable\\\">$1</span> + <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>);</code></pre>\\n      </div>\\n<blockquote>\\n<p>The difference between the 2 <code>%%</code> from the previous section and the 1 <code>%</code> here is important! <code>[%%something ...]</code> is an OCaml \\\"extension point\\\" that represents a <em>top-level</em> statement (it can't show up inside a function or value, for example). <code>[%something ...]</code> is an extension point that stands in for an <em>expression</em>, and can be put just about anywhere -- but make sure that the JavaScript you put inside is actually an expression! E.g. don't put a semicolon after it, or you'll get a syntax error when you try to run the resulting JavaScript.</p>\\n</blockquote>\\n<h2 id=\\\"dumping-in-a-function--passing-values\\\"><a href=\\\"#dumping-in-a-function--passing-values\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dumping in a function &#x26; passing values</h2>\\n<p>We'll need a little knowledge about Bucklescript's runtime representation of various values for this to work.</p>\\n<ul>\\n<li><code>strings</code> are strings, <code>ints</code> and <code>floats</code> are just numbers</li>\\n<li>an <a href=\\\"/guide/language/list-and-array#list\\\">Array</a> is a mutable fixed-length list in OCaml, and is represented as a plain javascript array.</li>\\n<li>a <a href=\\\"/guide/language/list-and-array#array\\\">List</a> is an immutable functional-style linked list, and is definitely the more idiomatic one to use in most cases. However, it's representation is more complicated (try <code>Js.log [1,2,3,4]</code> to check it out). Because of this, I generally convert to &#x26; from <code>Array</code>s when I'm talking to javascript, via <code>Array.of_list</code> and <code>Array.to_list</code>.</li>\\n<li>If you want to go deeper, there's an exhaustive list <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_runtime_representation\\\">in the BuckleScript manual</a></li>\\n</ul>\\n<p>Knowing that, we can write a function in JavaScript that just accepts an array and returns a number, without much trouble at all.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> jsCalculate: <span class=\\\"hljs-built_in\\\">array</span> <span class=\\\"hljs-built_in\\\">int</span> =&gt; <span class=\\\"hljs-built_in\\\">int</span> =&gt; <span class=\\\"hljs-built_in\\\">int</span> = [%bs.raw {|\\n <span class=\\\"hljs-keyword\\\">function</span> (numbers, scaleFactor) {\\n   var result = <span class=\\\"hljs-number\\\">0</span>;\\n   numbers.forEach(number =&gt; {\\n     result += number;\\n   });\\n   return result * scaleFactor;\\n }\\n|}];\\n<span class=\\\"hljs-keyword\\\">let</span> calculate numbers scaleFactor =&gt;\\n  jsCalculate (<span class=\\\"hljs-type\\\">Array</span>.of_list numbers) scaleFactor;\\n<span class=\\\"hljs-type\\\">Js</span>.log (calculate [<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">3</span>] <span class=\\\"hljs-number\\\">10</span>); /* -&gt; <span class=\\\"hljs-number\\\">60</span> */</code></pre>\\n      </div>\\n<p>Of course, this function that I wrote in JavaScript could be ported over to Reason without much hassle.</p>\\n<p><strong>Remember</strong> that this is an escape hatch that's very useful for learning so you can jump in quickly and make something, but it's a good exercise to go back through and convert things back into nice type safe reason code.</p>\\n<p>I've run into more than a few bugs because of raw JavaScript that I added to save time 😅.</p>\\n<h2 id=\\\"settling-down-and-getting-disciplined-about-things\\\"><a href=\\\"#settling-down-and-getting-disciplined-about-things\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Settling down and getting disciplined about things</h2>\\n<p>So far we've been using <code>bs.raw</code>, which is a very fast and loose way to do it, and <strong>not</strong> suitable for production.</p>\\n<p>But what if we actually need to call a function that's in JavaScript? It's needed for interacting with the DOM, or using node modules. In BuckleScript, you use an <code>external</code> declaration (<a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_binding_to_simple_js_functions_values\\\">docs</a>).</p>\\n<p>Getting a value and getting a function are both pretty easy:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">external</span> pi: <span class=\\\"hljs-built_in\\\">float</span> = <span class=\\\"hljs-string\\\">\\\"Math.PI\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">val</span>];\\n<span class=\\\"hljs-keyword\\\">let</span> tau = pi *. <span class=\\\"hljs-number\\\">2.0</span>;\\n<span class=\\\"hljs-keyword\\\">external</span> alert: <span class=\\\"hljs-built_in\\\">string</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"alert\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">val</span>];\\nalert <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>;</code></pre>\\n      </div>\\n<p>But what about when we want something more complicated? Here's how we could call <code>getContext</code> on a Canvas DOM node:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">type</span> canvas;\\n<span class=\\\"hljs-keyword\\\">type</span> context;\\n/* we're leaving these types abstract, because we won't\\n * be using them directly anywhere */\\n<span class=\\\"hljs-keyword\\\">external</span> getContext: canvas =&gt; <span class=\\\"hljs-built_in\\\">string</span> =&gt; context = <span class=\\\"hljs-string\\\">\\\"\\\"</span> [@@bs.send];\\n<span class=\\\"hljs-keyword\\\">let</span> myCanvas: canvas = [%bs.raw {| document.getElementById(<span class=\\\"hljs-string\\\">\\\"mycanvas\\\"</span>) |}];\\n<span class=\\\"hljs-keyword\\\">let</span> ctx = getContext myCanvas <span class=\\\"hljs-string\\\">\\\"2d\\\"</span>;</code></pre>\\n      </div>\\n<p>So let's unpack what's going on. We created some abstract types for the Canvas DOM node and the associated RenderingContext object.</p>\\n<p>Then we made a <code>getContext</code> function, but instead of <code>@@bs.val</code> we used <code>@@bs.send</code>, and we used an empty string for the text of the external. <code>@@bs.send</code> means \\\"we're calling a method on the first argument\\\", which in this case is the canvas. Given the above, BuckleScript will translate <code>getContext theFirstArgument theSecondArgument</code> into <code>theFirstArgument.getContext(theSecondArgument, ...)</code>.</p>\\n<p>The empty string means \\\"the JS name is the same as the name we're giving the external in BuckleScript-land\\\" – in this case <code>getContext</code>. If we wanted to name it something else (like <code>getRenderingContext</code>), then we'd have to supply the string <code>\\\"getContext\\\"</code> so that BuckleScript calls the right function.</p>\\n<p>Let's add one more function just so it's interesting.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">external</span> fillRect: context =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"\\\"</span> [@@bs.send];</code></pre>\\n      </div>\\n<p>And now we can draw something!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code>fillRect ctx <span class=\\\"hljs-number\\\">0.0</span> <span class=\\\"hljs-number\\\">0.0</span> <span class=\\\"hljs-number\\\">100.0</span> <span class=\\\"hljs-number\\\">100.0</span>;</code></pre>\\n      </div>\\n<p>It's not much, but adding other canvas methods is similar, and then you can start doing some <a href=\\\"https://twitter.com/jaredforsyth/status/871062358076030976\\\">really fun things</a>.</p>\\n<p>So what does the compiled JavaScript look like?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-javascript\\\"><code>'use strict';\\n<span class=\\\"hljs-keyword\\\">var</span> tau = <span class=\\\"hljs-type\\\">Math</span>.<span class=\\\"hljs-type\\\">PI</span> * <span class=\\\"hljs-number\\\">2.0</span>;\\nalert(<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>);\\n<span class=\\\"hljs-keyword\\\">var</span> myCanvas = ( document.getElementById(<span class=\\\"hljs-string\\\">\\\"mycanvas\\\"</span>) );\\n<span class=\\\"hljs-keyword\\\">var</span> ctx = myCanvas.getContext(<span class=\\\"hljs-string\\\">\\\"2d\\\"</span>);\\nctx.fillRect(<span class=\\\"hljs-number\\\">0.0</span>, <span class=\\\"hljs-number\\\">0.0</span>, <span class=\\\"hljs-number\\\">100.0</span>, <span class=\\\"hljs-number\\\">100.0</span>);</code></pre>\\n      </div>\\n<p>Wow! Notice how BuckleScript just inlined our <code>pi</code> variable for us? And the output looks almost exactly like it was written by hand.</p>\\n<h2 id=\\\"using-existing-javascript-libraries\\\"><a href=\\\"#using-existing-javascript-libraries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Using existing JavaScript libraries</h2>\\n<p>When folks write bindings for a particular JavaScript library, they'd usually publish it to npm. Head over to the <a href=\\\"/guide/javascript/libraries\\\">Libraries</a> to find out how to find these.</p>\\n<p>To use a library that does not have existing bindings, however, you'll want to first install the npm package as usual, e.g. using <code>npm install --save &#x3C;package-name></code>, then just go ahead and write your bindings. You'll probably find the <a href=\\\"https://bucklescript.github.io/bucklescript/Manual.html#_binding_to_a_value_from_a_module_code_bs_module_code\\\"><code>bs.module</code></a> FFI feature particularly useful; it emits the right <code>import</code>s or <code>require</code>s, depending on the JS compilation target's module format.</p>\\n<p>As an example, here's the entire source code of the <a href=\\\"https://github.com/reasonml-community/bs-glob\\\"><code>bs.glob</code></a> bindings (converted to Reason, the original is OCaml):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> error;\\n\\nexternal glob : string =&gt; (<span class=\\\"hljs-type\\\">Js</span>.nullable error =&gt; array string =&gt; unit) =&gt; unit = <span class=\\\"hljs-string\\\">\\\"\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span>];\\nexternal sync : string =&gt; array string = <span class=\\\"hljs-string\\\">\\\"\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">val</span>] [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"glob\\\"</span>];</code></pre>\\n      </div>\\n<p>And the relevant parts of <code>package.json</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-js\\\"><code>{\\n  <span class=\\\"hljs-string\\\">\\\"name\\\"</span>: <span class=\\\"hljs-string\\\">\\\"bs-glob\\\"</span>,\\n  <span class=\\\"hljs-string\\\">\\\"version\\\"</span>: <span class=\\\"hljs-string\\\">\\\"0.1.0\\\"</span>,\\n  ...\\n  <span class=\\\"hljs-string\\\">\\\"devDependencies\\\"</span>: {\\n    <span class=\\\"hljs-string\\\">\\\"bs-platform\\\"</span>: <span class=\\\"hljs-string\\\">\\\"^1.9.1\\\"</span>\\n  },\\n  <span class=\\\"hljs-string\\\">\\\"dependencies\\\"</span>: {\\n    <span class=\\\"hljs-string\\\">\\\"glob\\\"</span>: <span class=\\\"hljs-string\\\">\\\"^7.1.2\\\"</span>\\n  }\\n}</code></pre>\\n      </div>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/exception.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Exception\",\n\t\t\t\t\t\t\t\t\t\"order\": 175\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Exceptions are just a special kind of variant, \\\"thrown\\\" in <strong>exceptional</strong> cases (don't abuse them!).</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> getItem theList =&gt; {\\n  <span class=\\\"hljs-keyword\\\">if</span> (...) {\\n    <span class=\\\"hljs-comment\\\">/* return the found item here */</span>\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    raise <span class=\\\"hljs-type\\\">Not_found</span>\\n  }\\n};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> result = try (getItem [<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>]) {\\n| <span class=\\\"hljs-type\\\">Not_found</span> =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"Item not found!\\\"</span>\\n};</code></pre>\\n      </div>\\n<p>You can make your own exceptions like you'd make a variant (exceptions need to be capitalized too).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-keyword\\\">exception</span> <span class=\\\"hljs-type\\\">InputClosed</span> <span class=\\\"hljs-built_in\\\">string</span>;\\n...\\nraise (<span class=\\\"hljs-type\\\">InputClosed</span> <span class=\\\"hljs-string\\\">\\\"the stream has closed!\\\"</span>);</code></pre>\\n      </div>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p>When you have ordinary variants, you often don't <strong>need</strong> exceptions. For example, instead of throwing when <code>item</code> can't be found in a collection, try to return an <code>option item</code> (<code>None</code> in this case) instead.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>The above tip seems to contradict what's happening in the OCaml standard library; prominent functions in modules such as <a href=\\\"/api/List.html\\\">List</a> and <a href=\\\"/api/String.html\\\">String</a> seems to throw exceptions overly often. This is partially a historical sediment, and partially out of extreme care for performance. Native OCaml/Reason is extremely performant; exception throwing was designed to be very cheap, cheaper than allocation and returning e.g. an <code>option</code>. This is unfortunately not the case for JavaScript.</p>\\n<p>Newer standard library alternatives usually come with <code>option</code>-returning functions rather than exception-throwing ones.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/syntax-cheatsheet.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Syntax Cheatsheet\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>We've worked very hard to make Reason look like JS while preserving OCaml's great semantics &#x26; types. Hope you enjoy it!</p>\\n<h3 id=\\\"let-binding\\\"><a href=\\\"#let-binding\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Let Binding</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>const x = 5;</code></td>\\n<td><code>let x = 5;</code></td>\\n</tr>\\n<tr>\\n<td><code>var x = y;</code></td>\\n<td>No equivalent (thankfully)</td>\\n</tr>\\n<tr>\\n<td><code>let x = 5; x = x + 1;</code></td>\\n<td><code>let x = ref 5; x := !x + 1;</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"string--char\\\"><a href=\\\"#string--char\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>String &#x26; Char</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>\\\"Hello world!\\\"</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>'Hello world!'</code></td>\\n<td>Strings must use \\n<code>\\\"</code></td>\\n</tr>\\n<tr>\\n<td>Characters are strings</td>\\n<td><code>'a'</code></td>\\n</tr>\\n<tr>\\n<td><code>\\\"hello \\\" + \\\"world\\\"</code></td>\\n<td><code>\\\"hello \\\" ^ \\\"world\\\"</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"boolean\\\"><a href=\\\"#boolean\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Boolean</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>true</code>\\n, \\n<code>false</code></td>\\n<td><code>true</code>\\n, \\n<code>false</code>\\n \\n*</td>\\n</tr>\\n<tr>\\n<td><code>!true</code></td>\\n<td><code>not true</code></td>\\n</tr>\\n<tr>\\n<td><code>||</code>\\n, \\n<code>&#x26;&#x26;</code>\\n, \\n<code>&#x3C;=</code>\\n, \\n<code>>=</code>\\n, \\n<code>&#x3C;</code>\\n, \\n<code>></code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>a === b</code>\\n, \\n<code>a !== b</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td>No deep equality (recursive compare)</td>\\n<td><code>a == b</code>\\n, \\n<code>a != b</code></td>\\n</tr>\\n<tr>\\n<td><code>a == b</code></td>\\n<td>No equality with implicit casting (thankfully)</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* This is the Reason spiritual equivalent; it doesn't mean it compiles to JS' <code>true</code>/<code>false</code>! To compile to the latter, use <code>Js.true_</code>/<code>Js.false_</code>. See <a href=\\\"/guide/language/boolean#usage\\\">here</a>.</p>\\n<h3 id=\\\"number\\\"><a href=\\\"#number\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Number</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>3</code></td>\\n<td>Same \\n*</td>\\n</tr>\\n<tr>\\n<td><code>3.1415</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>3 + 4</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>3.0 + 4.5</code></td>\\n<td><code>3.0 +. 4.5</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* JS has no distinction between integer and float.</p>\\n<h3 id=\\\"objectrecord\\\"><a href=\\\"#objectrecord\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Object/Record</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>no static types</td>\\n<td><code>type point = {x: int, mutable y: int};</code></td>\\n</tr>\\n<tr>\\n<td><code>{x: 30, y: 20}</code></td>\\n<td>Same \\n*</td>\\n</tr>\\n<tr>\\n<td><code>point.x</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>point.y = 30;</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>{...point, x: 30}</code></td>\\n<td>Same</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* This is the Reason spiritual equivalent; it doesn't mean it compiles to JS' object! To compile to the latter, see <a href=\\\"/guide/language/object#tip--tricks\\\">here</a>.</p>\\n<h3 id=\\\"array\\\"><a href=\\\"#array\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Array</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>[1, 2, 3]</code></td>\\n<td><code>[|1, 2, 3|]</code></td>\\n</tr>\\n<tr>\\n<td><code>myArray[1] = 10</code></td>\\n<td><code>myArray.(1) = 10</code></td>\\n</tr>\\n<tr>\\n<td>No tuple</td>\\n<td><code>(1, 2, 3)</code></td>\\n</tr>\\n<tr>\\n<td>No immutable list</td>\\n<td><code>[1, 2, 3]</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"null\\\"><a href=\\\"#null\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Null</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>null</code>\\n, \\n<code>undefined</code></td>\\n<td><code>None</code>\\n \\n*</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* Again, only a spiritual equivalent; Reason doesn't have nulls, nor null bugs! But it does have <a href=\\\"/guide/examples#using-the-option-type\\\">an option type</a> for when you actually need nullability.</p>\\n<h3 id=\\\"function\\\"><a href=\\\"#function\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Function</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>arg => retVal</code></td>\\n<td><code>fun arg => retVal</code></td>\\n</tr>\\n<tr>\\n<td><code>function named(arg) {...}</code></td>\\n<td><code>fun named arg => ...</code></td>\\n</tr>\\n<tr>\\n<td><code>const f = function named(arg) {...}</code></td>\\n<td><code>let f = fun named arg => ...</code></td>\\n</tr>\\n<tr>\\n<td><code>add(4, add(5, 6))</code></td>\\n<td><code>add 4 (add 5 6)</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"blocks\\\"><a href=\\\"#blocks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Blocks</h4>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p >JavaScript</p></th> <th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nconst myFun = (x, y) => {\\n  const doubleX = x + x;\\n  const doubleY = y + y;\\n  return doubleX + doubleY\\n};</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet myFun = fun x y => {\\n  let doubleX = x + x;\\n  let doubleY = y + y;\\n  doubleX + doubleY\\n};</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h4 id=\\\"currying\\\"><a href=\\\"#currying\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Currying</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let add = a => b => a + b</code></td>\\n<td><code>let add a b => a + b</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Both JavaScript and Reason support currying, but Reason currying is <strong>built-in and optimized to avoids intermediate function allocation &#x26; calls</strong>, whenever possible.</p>\\n<h3 id=\\\"if-else\\\"><a href=\\\"#if-else\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>If-else</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>if (a) {b} else {c}</code></td>\\n<td>Same \\n*</td>\\n</tr>\\n<tr>\\n<td><code>a ? b : c</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>switch</code></td>\\n<td><code>switch</code>\\n but \\n<a href=\\\"/guide/language/pattern-matching\\\">super-powered!</a></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* Reason conditionals are always expressions!</p>\\n<h3 id=\\\"destructuring\\\"><a href=\\\"#destructuring\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Destructuring</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>const {a, b} = data</code></td>\\n<td><code>let {a, b} = data</code></td>\\n</tr>\\n<tr>\\n<td><code>const [a, b] = data</code></td>\\n<td><code>let [|a, b|] = data</code>\\n \\n*</td>\\n</tr>\\n<tr>\\n<td><code>const {a: aa, b: bb} = data</code></td>\\n<td><code>let {a: aa, b: bb} = data</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* Gives good compiler warning that <code>data</code> might not be of length 2. Switch to pattern-matching instead.</p>\\n<h3 id=\\\"loop\\\"><a href=\\\"#loop\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Loop</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>for (let i = 0; i &#x3C;= 10; i++) {...}</code></td>\\n<td><code>for i in 0 to 10 {...}</code></td>\\n</tr>\\n<tr>\\n<td><code>for (let i = 10; i >= 0; i--) {...}</code></td>\\n<td><code>for i in 10 downto 0 {...}</code></td>\\n</tr>\\n<tr>\\n<td><code>while (true) {...}</code></td>\\n<td>Same</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"jsx\\\"><a href=\\\"#jsx\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>JSX</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>&#x3C;Foo bar=1 baz=\\\"hi\\\" onClick={bla} /></code></td>\\n<td><code>&#x3C;Foo bar=1 baz=\\\"hi\\\" onClick=(bla) /></code></td>\\n</tr>\\n<tr>\\n<td><code>&#x3C;Foo bar=bar /></code></td>\\n<td><code>&#x3C;Foo bar /></code></td>\\n</tr>\\n<tr>\\n<td><code>&#x3C;input checked /></code></td>\\n<td><code>&#x3C;input checked=true /></code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"exception\\\"><a href=\\\"#exception\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exception</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>throw new SomeError(...)</code></td>\\n<td><code>raise (SomeError ...)</code></td>\\n</tr>\\n<tr>\\n<td><code>try (a) {...} catch (Err) {...} finally {...}</code></td>\\n<td><code>try (a) { | Err => ...}</code>\\n \\n*</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* No finally.</p>\\n<h3 id=\\\"blocks-1\\\"><a href=\\\"#blocks-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Blocks</h3>\\n<p>In Reason, \\\"sequence expressions\\\" are created with <code>{}</code> and evaluate to their last statement. In JavaScript, this can be simulated via a temporary variable which must be created in an invalid state, then later mutated.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p >JavaScript</p></th> <th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet res = undefined;\\n{\\n  const x = 23;\\n  const y = 34;\\n  res = x + y;\\n};</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet res = {\\n  let x = 23;\\n  let y = 34;\\n  x + y\\n};</pre>\\n    </td>\\n  </tr>\\n</table>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/quickstart.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code>npm install -g bs-platform\\nbsb -init my-first-app -theme basic-reason</code></pre>\\n      </div>\\n<p>And then run it as usual:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code><span class=\\\"hljs-built_in\\\">cd</span> my-first-app\\nnpm run build</code></pre>\\n      </div>\\n<p>You can also build in watch mode:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code>npm run watch</code></pre>\\n      </div>\\n<p>That's all! This compiles Reason to Javascript in the <code>lib/js/</code> folder.</p>\\n<ul>\\n<li>\\n<p>Read more about how we compile to JavaScript through our partner project, <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html\\\">BuckleScript</a>.</p>\\n</li>\\n<li>\\n<p>Alternatively, <strong>to start a <a href=\\\"//reasonml.github.io/reason-react/gettingStarted.html\\\">ReasonReact</a> app</strong>, try <code>bsb -init my-react-app -theme react</code>.</p>\\n</li>\\n<li>\\n<p>Head over to <a href=\\\"/guide/editor-tools/global-installation\\\">Editor Setup</a> to get the Reason plugin for your favorite editor!</p>\\n</li>\\n</ul>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/boolean.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Boolean\",\n\t\t\t\t\t\t\t\t\t\"order\": 30\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>A boolean has the type <code>bool</code> and can be either <code>true</code> or <code>false</code>. Common operations:</p>\\n<ul>\\n<li><code>&#x26;&#x26;</code>: logical and</li>\\n<li><code>||</code>: logical or</li>\\n<li><code>not</code>: logical not. <strong>Note that ! is reserved for something else</strong></li>\\n<li><code>&#x3C;=</code>, <code>>=</code>, <code>&#x3C;</code>, <code>></code></li>\\n<li><code>==</code>: physical equal, compares data structures deeply: <code>(1, 2) == (1, 2)</code> is <code>true</code>. Convenient, but use with caution</li>\\n<li><code>===</code>: referential equal, compares shallowly. <code>(1, 2) === (1, 2)</code> is <code>false</code>. <code>let myTuple = (1, 2); myTuple === myTuple</code> is <code>true</code>.</li>\\n<li><code>!=</code>: physical unequal</li>\\n<li><code>!==</code>: referential unequal</li>\\n</ul>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p><strong>Note: BuckleScript provides bindings to the JavaScript</strong> <code>true</code> and <code>false</code>, which <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_boolean\\\">aren't the same as the Reason/OCaml <code>true</code> and <code>false</code></a>! Don't use them interchangeably without proper conversion (<code>Js.to_bool</code> and <code>Js.Boolean.to_js_boolean</code>).</p>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p><strong>Use physical equal tastefully</strong>. It's convenient, but might accidentally make you compare two deeply nested data structures and incur a big performance hit. It's also not always clear what counts as \\\"equal\\\". For example, is a piece of data <code>foo</code> equal to a lazy <code>foo</code>? Ideally, it'd have been pluggable. Future changes are coming to make this possible and reliable; if you're interested, check <a href=\\\"https://www.reddit.com/r/ocaml/comments/2vyk10/modular_implicits/\\\">modular implicit</a>.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p><em>This section assumes knowledge with <a href=\\\"/guide/language/variant\\\">variants</a>. If it's your first time reading this guide, feel free to come back to this later</em>!</p>\\n<p>Boolean is (only conceptually) a special case of a variant: <code>type bool = True | False</code>. Design-wise, this elegantly removes the need to hard-code a boolean type in the type system. The drawback is that, just like variants, the constructors are <a href=\\\"/try/?reason=DYUwLgBAhhC8FgE4FcRA\\\">compiled into a less readable but faster representation</a>. This is why BuckleScript lacks information, at a later stages, to compile Reason true/false into JavaScript's true/false.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/destructuring.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Destructuring\",\n\t\t\t\t\t\t\t\t\t\"order\": 130\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>\\\"Destructuring\\\" is a visually concise way of extracting fields from a data structure. You can use destructuring anywhere you'd normally use a variable.</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>The following binds variables: <code>ten = 10</code>, <code>twenty = 20</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> someInts = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> (ten, twenty) = someInts;</code></pre>\\n      </div>\\n<p>The following binds variables: <code>name = \\\"Guy\\\"</code>, <code>age = 30</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {name: string, age: int};\\n<span class=\\\"hljs-keyword\\\">let</span> somePerson = {name: <span class=\\\"hljs-string\\\">\\\"Guy\\\"</span>, age: <span class=\\\"hljs-number\\\">30</span>};\\n<span class=\\\"hljs-keyword\\\">let</span> {name, age} = somePerson;</code></pre>\\n      </div>\\n<p>When you pull out fields, you can optionally rename the fields. The following binds these instead: <code>n = \\\"Guy\\\"</code>, <code>a = 30</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> {name: n, age: a} = somePerson;</code></pre>\\n      </div>\\n<p>Destructuring also allows type annotations.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (ten: int, twenty: int) = someInts;\\n<span class=\\\"hljs-keyword\\\">let</span> {name: (n: string), age: (a: int)} = somePerson;</code></pre>\\n      </div>\\n<p>Destructuring a functions' labeled arguments is also possible.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {name: string, age: int};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> someFunction person::{name} =&gt; {\\n  <span class=\\\"hljs-comment\\\">/* you can use `name` here */</span>\\n}\\n\\n<span class=\\\"hljs-keyword\\\">let</span> otherFunction person::({name} <span class=\\\"hljs-keyword\\\">as</span> thePerson) =&gt; {\\n  <span class=\\\"hljs-comment\\\">/* you can use both `name` and the whole record as `thePerson` here */</span>\\n}</code></pre>\\n      </div>\\n<p><strong>Keep reading the section, pattern matching, for a crazier form of destructuring</strong>!</p>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p>Destructuring can make your code much more concise without requiring you to name intermediate variables. Do use them! But don't abuse them and make your code overly nested &#x26; terse.</p>\\n<p>If you're destructuring a record or a variant whose definition isn't in the current file, you need to explicitly annotate it. See <a href=\\\"/guide/language/record#record-needs-an-explicit-definition\\\">here</a> and <a href=\\\"/guide/language/variant#variant-needs-an-explicit-definition\\\">here</a>.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/external.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"External\",\n\t\t\t\t\t\t\t\t\t\"order\": 170\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p><code>external</code>, or \\\"FFI\\\" (foreign function interface), or simply \\\"interop\\\" (for \\\"interoperability\\\") is how Reason communicates with other languages, like C or JavaScript.</p>\\n<p>Imagine writing a let binding, but with its body omitted and its type mandatorily written down:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>external myCFunction: int =&gt; string = <span class=\\\"hljs-string\\\">\\\"theCFunction\\\"</span>;</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>external getElementsByClassName : string =&gt; array <span class=\\\"hljs-type\\\">Dom</span>.element =\\n  <span class=\\\"hljs-string\\\">\\\"document.getElementsByClassName\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">val</span>];</code></pre>\\n      </div>\\n<p>(The above is a <a href=\\\"https://bucklescript.github.io/bucklescript/Manual.html\\\">BuckleScript</a>-specific external that binds to a JavaScript function of the same name.)</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>You'd use an external value/function as if it was a normal let binding.</p>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p>If you come from a JavaScript background: <strong>do take some time to learn about the <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_binding_to_simple_js_functions_values\\\">BuckleScript externals</a></strong>! In the beginning, you'll likely encounter quite a few <code>external</code>s before you get to write 100% pure idiomatic Reason code.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>Reason takes interoperating with existing code very seriously. Our type system has very strong guarantees. However, such strong feature also means that, without a great interop system, it'd be very hard to gradually convert a codebase over to Reason. Fortunately, the FFI allows us to cooperate very well with <a href=\\\"/guide/javascript/converting\\\">dirty, existing code</a>. The combination of a sound type system + great interop means that we get the benefits of a traditional gradual type system regarding incremental codebase coverage &#x26; conversion, without the downside of such gradual type system: complex features to support existing patterns, slow analysis, diminishing return in terms of type coverage, etc.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/function.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Function\",\n\t\t\t\t\t\t\t\t\t\"order\": 100\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Can you believe we haven't covered function until now?</p>\\n<p>Functions are declared with <code>fun</code> and return the expression.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> greet = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> name<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; <span class=\\\"hljs-string\\\">\\\"Hello \\\"</span> ^ name;</code></pre>\\n      </div>\\n<p>This declares a function and assigns to it the name <code>greet</code>, which you can call like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>greet <span class=\\\"hljs-string\\\">\\\"world!\\\"</span>; <span class=\\\"hljs-comment\\\">/* \\\"Hello world!\\\" */</span></code></pre>\\n      </div>\\n<p>Multi-arguments functions have arguments separated by space:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> add = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> x<span class=\\\"hljs-params\\\"> y<span class=\\\"hljs-params\\\"> z<span class=\\\"hljs-params\\\"> </span></span></span></span></span>=&gt; x + y + z;\\nadd <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-number\\\">3</span>; <span class=\\\"hljs-comment\\\">/* 6 */</span></code></pre>\\n      </div>\\n<p>For longer functions, you'd surround the body with a block:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> greetMore = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> name<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; {\\n  <span class=\\\"hljs-keyword\\\">let</span> part1 = <span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>;\\n  part1 ^ <span class=\\\"hljs-string\\\">\\\" \\\"</span> ^ name\\n};</code></pre>\\n      </div>\\n<p><strong>Since function definitions occur often</strong>, we gave <code>let + fun</code> a shorthand:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> add x y z =&gt; x + y + z;\\n<span class=\\\"hljs-comment\\\">/* same as: let add = fun x y z =&gt; x + y + z; */</span></code></pre>\\n      </div>\\n<p><strong>Be mindful of function's precedence</strong>! You need to wrap the call with parentheses in some situations:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> increment x =&gt; x + <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> double x =&gt; x + x;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> eleven = increment (double <span class=\\\"hljs-number\\\">5</span>);</code></pre>\\n      </div>\\n<p>If you forget to wrap <code>double 5</code> in parentheses, you'd get <code>increment double 5</code>, as if the <code>increment</code> function wrongly takes two arguments.</p>\\n<h3 id=\\\"no-argument\\\"><a href=\\\"#no-argument\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>No Argument</h3>\\n<p>A function always takes an argument; but sometimes, we'd use it for e.g. side-effects, and don't have anything to pass to it. In other languages, we'd conceptually pass \\\"no argument\\\". In Reason, every function takes an argument; here we'd conventionally pass it the value <code>()</code>, called \\\"unit\\\".</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* receive &amp; destructure the unit argument */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> logSomething () =&gt; {\\n  print_endline <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>;\\n  print_endline <span class=\\\"hljs-string\\\">\\\"world\\\"</span>;\\n};\\n\\n<span class=\\\"hljs-comment\\\">/* call the function with the value of type unit */</span>\\nlogSomething ();</code></pre>\\n      </div>\\n<p><code>()</code> is a totally normal value, the single possible value in <code>unit</code>. Reason gave it a special syntax out of convenience.</p>\\n<h3 id=\\\"labeled-arguments\\\"><a href=\\\"#labeled-arguments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Labeled Arguments</h3>\\n<p>Multi-arguments functions, especially those whose arguments are of the same type, can be confusing to call.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> addCoordinates x y =&gt; {\\n  <span class=\\\"hljs-comment\\\">/* use x and y here */</span>\\n};\\n...\\naddCoordinates <span class=\\\"hljs-number\\\">5</span> <span class=\\\"hljs-number\\\">6</span>; <span class=\\\"hljs-comment\\\">/* which is x, which is y? */</span></code></pre>\\n      </div>\\n<p>In OCaml/Reason, you can attach labels to an argument:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> addCoordinates x::x y::y =&gt; {\\n  <span class=\\\"hljs-comment\\\">/* use x and y here */</span>\\n};\\n...\\naddCoordinates x::<span class=\\\"hljs-number\\\">5</span> y::<span class=\\\"hljs-number\\\">6</span>;</code></pre>\\n      </div>\\n<p>Since we have currying (more on that below), we can provide the arguments in any order:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>addCoordinates y::<span class=\\\"hljs-number\\\">6</span> x::<span class=\\\"hljs-number\\\">5</span>;</code></pre>\\n      </div>\\n<p>The <code>x::x</code> part during declaration means the function accepts an argument labeled <code>x</code> and can refer to it in the function body as the variable <code>x</code>. This is so that we can have the following pattern, where labeled arguments are renamed inside the function for conciseness:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> drawCircle radius::r color::<span class=\\\"hljs-built_in\\\">c</span> =&gt; {\\n  setColor <span class=\\\"hljs-built_in\\\">c</span>;\\n  startAt r r;\\n  ...\\n};\\n\\ndrawCircle radius::<span class=\\\"hljs-number\\\">10</span> color::<span class=\\\"hljs-string\\\">\\\"red\\\"</span>;</code></pre>\\n      </div>\\n<p>For the common case of <code>radius::radius</code> (where the label is the same as the local variable name), we have the syntax shorthand <code>::x</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> drawCircle ::radius ::color =&gt; {\\n  setColor color;\\n  startAt radius radius;\\n  ...\\n}</code></pre>\\n      </div>\\n<p>Here's the syntax for typing the arguments:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> drawCircle radius::(r: int) color::(<span class=\\\"hljs-built_in\\\">c</span>: string) =&gt; ...;</code></pre>\\n      </div>\\n<h3 id=\\\"optional-labeled-arguments\\\"><a href=\\\"#optional-labeled-arguments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Optional Labeled Arguments</h3>\\n<p>Labeled function arguments can be made optional during declaration. You can then omit them when calling the function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* radius can be omitted */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> drawCircle ::color ::radius=? () =&gt; {\\n  setColor color;\\n  <span class=\\\"hljs-keyword\\\">switch</span> radius {\\n  | <span class=\\\"hljs-type\\\">None</span> =&gt; startAt <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-number\\\">1</span>;\\n  | <span class=\\\"hljs-type\\\">Some</span> r_ =&gt; startAt r_ r_;\\n  }\\n};</code></pre>\\n      </div>\\n<p>If omitted, <code>radius</code> is <strong>wrapped</strong> in the standard library's <code>option</code> type, defaulting to <code>None</code>. If provided, it'll be wrapped with a <code>Some</code>. So <code>radius</code>'s type value is either <code>None</code> or <code>Some int</code> here.</p>\\n<p><strong>Note</strong>: <code>None | Some foo</code> is a data structure type called variant, described <a href=\\\"/guide/language/variant\\\">below</a>. This particular variant type is provided by the standard library. It's called <code>option</code>. Its definition: <code>type option 'a = None | Some 'a</code>.</p>\\n<p><strong>Note</strong> the unit <code>()</code> at the end of <code>drawCircle</code>. Without it, since <code>radius</code> and <code>color</code> are both labeled, can be curried, and can be applied out-of-order, it's unclear what the following mean:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> whatIsThis = drawCircle ::color;</code></pre>\\n      </div>\\n<p>Is <code>whatIsThis</code> a curried <code>drawCircle</code> function, waiting for the optional <code>radius</code> to be applied? Or did it finish applying? To address this confusion, append a positional (aka non-labeled) argument to <code>drawCircle</code> (conventionally <code>()</code>), and OCaml will, as a rule of thumb, presume the optional labeled argument is omitted when the positional argument is provided.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> curriedFunction = drawCircle ::color;\\n<span class=\\\"hljs-keyword\\\">let</span> actualResultWithoutProvidingRadius = drawCircle ::color ();</code></pre>\\n      </div>\\n<h4 id=\\\"explicitly-passed-optional\\\"><a href=\\\"#explicitly-passed-optional\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Explicitly Passed Optional</h4>\\n<p>Sometimes, you might want to forward a value to a function without knowing whether the value is <code>None</code> or <code>Some a</code>. Naively, you'd do:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> result = <span class=\\\"hljs-keyword\\\">switch</span> payloadRadius {\\n| <span class=\\\"hljs-type\\\">None</span> =&gt; drawCircle ::color ()\\n| <span class=\\\"hljs-type\\\">Some</span> r =&gt; drawCircle ::color radius::r ()\\n};</code></pre>\\n      </div>\\n<p>This quickly gets tedious. We provide a shortcut:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> result = drawCircle ::color radius::?payloadRadius ();</code></pre>\\n      </div>\\n<p>This means \\\"I understand <code>radius</code> is optional, and that when I pass it a value it needs to be an <code>int</code>, but I don't know whether the value I'm passing is <code>None</code> or <code>Some val</code>, so I'll pass you the whole <code>option</code> wrapper\\\".</p>\\n<h4 id=\\\"optional-with-default-value\\\"><a href=\\\"#optional-with-default-value\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Optional with Default Value</h4>\\n<p>Optional labeled arguments can also be provided a default value. They aren't wrapped in an <code>option</code> type.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> drawCircle ::radius=<span class=\\\"hljs-number\\\">1</span> ::color () =&gt; {\\n  setColor color;\\n  startAt r r;\\n};</code></pre>\\n      </div>\\n<h4 id=\\\"recursive-functions\\\"><a href=\\\"#recursive-functions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Recursive Functions</h4>\\n<p>By default, values can't see a binding that points to it, but including the\\n<code>rec</code> keyword in a <code>let</code> binding makes this possible. This allows functions\\nto see and call themselves, giving us the power of recursion.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-keyword\\\">rec</span> neverTerminate = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> ()<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; neverTerminate ();</code></pre>\\n      </div>\\n<h4 id=\\\"mutually-recursive-functions\\\"><a href=\\\"#mutually-recursive-functions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mutually Recursive Functions</h4>\\n<p>Mutually recursive functions start like a single recursive function using the\\n<code>rec</code> keyword, and then are chained together with <code>and</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-keyword\\\">rec</span> callSecond = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> ()<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; callFirst ()\\nand callFirst = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> ()<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; callSecond ();</code></pre>\\n      </div>\\n<p><strong>Note</strong> that there's no semicolon ending the first line and no <code>let</code> on the second line.</p>\\n<h4 id=\\\"currying\\\"><a href=\\\"#currying\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Currying</h4>\\n<p>Reason functions can automatically be <strong>partially</strong> called:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> add = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> x<span class=\\\"hljs-params\\\"> y<span class=\\\"hljs-params\\\"> </span></span></span></span>=&gt; x + y;\\n<span class=\\\"hljs-keyword\\\">let</span> addFive = add <span class=\\\"hljs-number\\\">5</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> eleven = addFive <span class=\\\"hljs-number\\\">6</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> twelve = addFive <span class=\\\"hljs-number\\\">7</span>;</code></pre>\\n      </div>\\n<p>Actually, the above <code>add</code> is nothing but syntactic sugar for this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> add = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> x<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> y<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; x + y;</code></pre>\\n      </div>\\n<p>OCaml optimizes this to avoid the unnecessary function allocation (2 functions here, naively speaking) whenever it can! This way, we get</p>\\n<ul>\\n<li>Nice syntax</li>\\n<li>Currying for free (every function takes a single argument, actually!)</li>\\n<li>No performance cost</li>\\n</ul>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/if-else.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"If-Else\",\n\t\t\t\t\t\t\t\t\t\"order\": 110\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">if</span> (showMenu) {\\n  displayMenu ();\\n};</code></pre>\\n      </div>\\n<p>Reason <code>if</code>s are expressions; they're evaluated to their body's content:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-keyword\\\">if</span> (isMorning) {\\n  <span class=\\\"hljs-string\\\">\\\"Good morning!\\\"</span>\\n} <span class=\\\"hljs-keyword\\\">else</span> {\\n  <span class=\\\"hljs-string\\\">\\\"Hello!\\\"</span>\\n};</code></pre>\\n      </div>\\n<p>We also have ternary sugar.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = isMorning ? <span class=\\\"hljs-string\\\">\\\"Good morning!\\\"</span> : <span class=\\\"hljs-string\\\">\\\"Hello!\\\"</span>;</code></pre>\\n      </div>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p><strong><code>if-else</code> and ternary are much less used</strong> in Reason than in other languages; <a href=\\\"/guide/language/pattern-matching\\\">Pattern-matching</a> kills a whole category of code that previously required conditionals. Prefer <code>if-else</code> if you only have, say, 2 branches.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>Reason ternary is just a sugar for the <code>bool</code> variant and a switch:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">switch</span> isMorning {\\n| <span class=\\\"hljs-literal\\\">true</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Good morning!\\\"</span>\\n| <span class=\\\"hljs-literal\\\">false</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Hello!\\\"</span>\\n}</code></pre>\\n      </div>\\n<p>If you pass that through <a href=\\\"/guide/editor-tools/extra-goodies#refmt\\\"><code>refmt</code></a>, you'd get:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>isMorning ? <span class=\\\"hljs-string\\\">\\\"Good morning!\\\"</span> : <span class=\\\"hljs-string\\\">\\\"Hello!\\\"</span>;</code></pre>\\n      </div>\\n<p>Interested? Here's a <a href=\\\"https://medium.com/@chenglou/cool-things-reason-formatter-does-9e1f79e25a82\\\">blog post</a> about the spirit of our <code>refmt</code>.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Language basics\",\n\t\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Start your Reason learning journey here! A few pointers:</p>\\n<ul>\\n<li>Many sections have a \\\"Tip &#x26; Tricks\\\" and \\\"Design Decisions\\\" section. These are optional reads; feel free to skip them, but do come around and learn the extra tidbits!</li>\\n<li>If you need to bind to an existing JS library, <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_ffi\\\">BuckleScript's FFI</a> is your friend.</li>\\n<li>If you ever feel stuck, ask a question in <a href=\\\"/community\\\">our community</a> and/or submit a pull request by clicking the \\\"Suggest an edit\\\" button on the right.</li>\\n</ul>\\n<p>Enjoy!</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/imperative-loops.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Imperative Loops\",\n\t\t\t\t\t\t\t\t\t\"order\": 150\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"for-loops\\\"><a href=\\\"#for-loops\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>For Loops</h3>\\n<p>For loops iterate from a starting value up to (and including) the ending value.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">for</span> myBinding <span class=\\\"hljs-keyword\\\">in</span> (startValue) <span class=\\\"hljs-keyword\\\">to</span> (endValue) {\\n  <span class=\\\"hljs-comment\\\">/* use myBinding here */</span>\\n};</code></pre>\\n      </div>\\n<p>The parenthesis around <code>startValue</code> and <code>endValue</code> may be omitted if they are\\nunnecessary.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> xStart = <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> xEnd = <span class=\\\"hljs-number\\\">3</span>;\\n<span class=\\\"hljs-comment\\\">/* prints: 1 2 3 */</span>\\n<span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> xStart <span class=\\\"hljs-keyword\\\">to</span> xEnd {\\n  print_int x;\\n  print_string <span class=\\\"hljs-string\\\">\\\" \\\"</span>;\\n};</code></pre>\\n      </div>\\n<p>You can make the <code>for</code> loop count in the opposite direction by using <code>downto</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">for</span> myBinding <span class=\\\"hljs-keyword\\\">in</span> (startValue) <span class=\\\"hljs-keyword\\\">downto</span> (endValue) {\\n  statements\\n};</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> xStart = <span class=\\\"hljs-number\\\">3</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> xEnd = <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-comment\\\">/* prints: 3 2 1 */</span>\\n<span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> xStart <span class=\\\"hljs-keyword\\\">downto</span> xEnd {\\n  print_int x;\\n  print_string <span class=\\\"hljs-string\\\">\\\" \\\"</span>;\\n};</code></pre>\\n      </div>\\n<h3 id=\\\"while-loops\\\"><a href=\\\"#while-loops\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>While Loops</h3>\\n<p>While loops execute a code block while some condition is true. The form of a <code>while</code> loop includes a single expression, the condition to test.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">while</span> (<span class=\\\"hljs-forDocGrammarHighlighting\\\">testCondition</span>) {\\n  statements;\\n};</code></pre>\\n      </div>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p>There's no loop-breaking <code>break</code> keyword (nor early <code>return</code> from functions, for that matter) in Reason. In general, prefer <code>map</code>/<code>filter</code>/<code>reduce</code> over imperative loops. However, we can break out of a while loop easily through using a <a href=\\\"/guide/language/mutation\\\">mutable binding</a>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Random</span>.self_init ();\\n<span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-keyword\\\">break</span> = <span class=\\\"hljs-keyword\\\">ref</span> <span class=\\\"hljs-literal\\\">false</span>;\\n<span class=\\\"hljs-keyword\\\">while</span> (not !<span class=\\\"hljs-keyword\\\">break</span>) {\\n  <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-type\\\">Random</span>.int <span class=\\\"hljs-number\\\">10</span> === <span class=\\\"hljs-number\\\">3</span>) {\\n    <span class=\\\"hljs-keyword\\\">break</span> := <span class=\\\"hljs-literal\\\">true</span>\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    print_endline <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>\\n  }\\n};</code></pre>\\n      </div>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/jsx.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"JSX\",\n\t\t\t\t\t\t\t\t\t\"order\": 160\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Would you like some HTML syntax in your Reason? If not, quickly skip over this section and pretend you didn't see anything!</p>\\n<p>Reason supports the JSX syntax, with some slight differences compared to the one in <a href=\\\"https://facebook.github.io/react/docs/introducing-jsx.html\\\">ReactJS</a>. Reason JSX isn't tied to ReactJS; they translate to normal function calls:</p>\\n<h3 id=\\\"capitalized-tag\\\"><a href=\\\"#capitalized-tag\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Capitalized Tag</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>&lt;<span class=\\\"hljs-type\\\">MyComponent</span> foo=bar /&gt;</code></pre>\\n      </div>\\n<p>becomes</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">MyComponent</span>.make foo::bar children::[] ()</code></pre>\\n      </div>\\n<h3 id=\\\"uncapitalized-tag\\\"><a href=\\\"#uncapitalized-tag\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Uncapitalized Tag</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>&lt;div foo=bar&gt;child1 child2&lt;/div&gt;</code></pre>\\n      </div>\\n<p>becomes</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>div foo::bar children::[child1, child2] () [@<span class=\\\"hljs-type\\\">JSX</span>]</code></pre>\\n      </div>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>See <a href=\\\"//reasonml.github.io/reason-react/\\\">ReasonReact</a> for an example application of JSX.</p>\\n<p>Here's a JSX tag that shows most of the features.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>&lt;<span class=\\\"hljs-type\\\">MyComponent</span>\\n  booleanAttribute=<span class=\\\"hljs-literal\\\">true</span>\\n  stringAttribute=<span class=\\\"hljs-string\\\">\\\"string\\\"</span>\\n  intAttribute=<span class=\\\"hljs-number\\\">1</span>\\n  forcedOptional=?(<span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>)\\n  onClick={updater handleClick}\\n  onClickThisWorksToo=(updater handleClick)&gt;\\n  &lt;div&gt;\\n    (<span class=\\\"hljs-type\\\">ReasonReact</span>.stringToElement <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>)\\n  &lt;/div&gt;\\n&lt;/<span class=\\\"hljs-type\\\">MyComponent</span>&gt;</code></pre>\\n      </div>\\n<h3 id=\\\"departures-from-js-jsx\\\"><a href=\\\"#departures-from-js-jsx\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Departures From JS JSX</h3>\\n<ul>\\n<li>Attributes don't mandate curly braces, unless they're complex expressions (in which case they're formatted to parentheses).</li>\\n<li>There is no support for JSX spread attributes.</li>\\n<li>Punning!</li>\\n</ul>\\n<h4 id=\\\"punning\\\"><a href=\\\"#punning\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Punning</h4>\\n<p>ReactJS JSX's argument punning, e.g. <code>&#x3C;input checked /></code>, due to unfortunate historical reasons, desugars to <code>&#x3C;input checked=true /></code>, in order to conform to DOM's idioms. Reason doesn't have such baggage, so we've decided to desugar it to <code>&#x3C;input checked=checked /></code>. This allows folks to cram many more props into a ReasonReact component without it looking too bloated:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>&lt;<span class=\\\"hljs-type\\\">MyComponent</span> isLoading text onClick /&gt;</code></pre>\\n      </div>\\n<h3 id=\\\"tip--tricks\\\"><a href=\\\"#tip--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tip &#x26; Tricks</h3>\\n<p>For library authors wanting to take advantage of the JSX: the <code>[@JSX]</code> attribute above is a hook for potential ppx macros to spot a function wanting to format as JSX. Once you spot the function, you can turn it into any other expression.</p>\\n<p>This way, everyone gets to benefit the JSX syntax without needing to opt into a specific library using it, e.g. ReasonReact.</p>\\n<p>JSX calls supports the features of <a href=\\\"/guide/language/function#labeled-arguments\\\">labeled functions</a>: optional, explicitly passed optional and optional with default.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>The way we designed this JSX is related to how we'd like to help the language evolve. See the section \\\"What's the point?\\\" in <a href=\\\"https://medium.com/@chenglou/cool-things-reason-formatter-does-9e1f79e25a82\\\">this blog post</a>.</p>\\n<p>The ability to have macros in the language + the library-agnostic JSX syntax allows every library to potentially have JSX without hassle. This way, we add some visual familiarities to the underlying OCaml language without compromising on its semantics (aka how it executes). One big goal of Reason is to let more folks take advantage of the beautiful language that is OCaml, while discarding the time-consuming debates around syntax and formatting.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/integer-and-float.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Integer & Float\",\n\t\t\t\t\t\t\t\t\t\"order\": 40\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"integers\\\"><a href=\\\"#integers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Integers</h3>\\n<p>32-bits, truncated when necessary. Reason provides the usual operations on them: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, etc.</p>\\n<h4 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h4>\\n<p>See the <a href=\\\"/api/Int32.html\\\">Int32 module</a> in the standard library. For JS compilation, see <a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.Int.html\\\">Js.Int</a>.</p>\\n<h4 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h4>\\n<p><strong>Careful when you bind to JavaScript numbers</strong>! Long ones might be truncated. Bind JS number as float instead.</p>\\n<h3 id=\\\"floats\\\"><a href=\\\"#floats\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Floats</h3>\\n<p>Float requires other operators: <code>+.</code>, <code>-.</code>, <code>*.</code>, <code>/.</code>, etc. Like <code>0.5 +. 0.6</code>.</p>\\n<h4 id=\\\"usage-1\\\"><a href=\\\"#usage-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h4>\\n<p>There's no Float module in the current standard library. For JS compilation, see <a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.Float.html\\\">Js.Float</a>.</p>\\n<h4 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h4>\\n<p>\\\"Why the heck can't I just use an overloaded <code>+</code> for both int and float? Why is it that each time I find a performant language with great types and interop and community, I find these kind of flaws?\\\"</p>\\n<p>There, there. Polymorphic operators, under the current type system, would need to be hard-coded into the compiler. The physical polymorphic equal, <code>==</code>, is such an operator; <code>+</code> and the rest aren't. <a href=\\\"https://www.reddit.com/r/ocaml/comments/2vyk10/modular_implicits/\\\">Improvements are under way</a> to make them work as desired. In the meantime, let's keep shipping =).</p>\\n<p>Additionally, floats are rather special in Reason/OCaml native. <a href=\\\"http://www.lexifi.com/blog/unboxed-floats-ocaml\\\">Check here</a> if you're interested in learning some rather interesting optimizations!</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/more-on-type.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"More on Type\",\n\t\t\t\t\t\t\t\t\t\"order\": 120\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"type-argument\\\"><a href=\\\"#type-argument\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Type Argument!</h3>\\n<p>Types can accept parameters, akin to generics in other languages. It's as if a type is a function that takes in arguments and returns a new type! The parameters <strong>need</strong> to start with <code>'</code>.</p>\\n<p>The use-case of a parameterized type is to kill duplications. Before:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* this is a tuple of 3 items, explained next */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> intCoordinates = (int, int, int);\\n<span class=\\\"hljs-keyword\\\">type</span> floatCoordinates = (float, float, float);\\n\\n<span class=\\\"hljs-keyword\\\">let</span> buddy: intCoordinates = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-number\\\">20</span>);</code></pre>\\n      </div>\\n<p>After:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> coordinates 'a = ('a, 'a, 'a);\\n\\n<span class=\\\"hljs-comment\\\">/* apply the coordinates \\\"type function\\\" and return the type (int, int, int) */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> intCoordinatesAlias = coordinates int;\\n<span class=\\\"hljs-keyword\\\">let</span> buddy: intCoordinatesAlias = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-number\\\">20</span>);\\n\\n<span class=\\\"hljs-comment\\\">/* or, more commonly, write it inline */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> buddy: coordinates float = (<span class=\\\"hljs-number\\\">10.5</span>, <span class=\\\"hljs-number\\\">20.5</span>, <span class=\\\"hljs-number\\\">20.5</span>);</code></pre>\\n      </div>\\n<p>In practice, types are inferred for you. So the more concise version of the above example would be nothing but:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> buddy = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-number\\\">20</span>);</code></pre>\\n      </div>\\n<p>The type system infers that it's a <code>(int, int, int)</code>. Nothing else needed to be written down.</p>\\n<p>Type arguments appear everywhere.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* inferred as `list string` */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> greetings = [<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>, <span class=\\\"hljs-string\\\">\\\"world\\\"</span>, <span class=\\\"hljs-string\\\">\\\"how are you\\\"</span>];</code></pre>\\n      </div>\\n<p>If types didn't accept parameters (aka, if we didn't have \\\"type functions\\\"), the standard library will need to define the types <code>listOfString</code>, <code>listOfInt</code>, <code>listOfTuplesOfInt</code>, etc.</p>\\n<p>Types can receive more arguments, and be composable.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> result 'a 'b =\\n| <span class=\\\"hljs-type\\\">Ok</span> 'a\\n| <span class=\\\"hljs-type\\\">Error</span> 'b;\\n\\n<span class=\\\"hljs-keyword\\\">type</span> myPayload = {data: string};\\n\\n<span class=\\\"hljs-keyword\\\">type</span> myPayloadResults 'errorType = list (result myPayload 'errorType);\\n\\n<span class=\\\"hljs-keyword\\\">let</span> payloadResults: myPayloadResults string = [\\n  <span class=\\\"hljs-type\\\">Ok</span> {data: <span class=\\\"hljs-string\\\">\\\"hi\\\"</span>},\\n  <span class=\\\"hljs-type\\\">Ok</span> {data: <span class=\\\"hljs-string\\\">\\\"bye\\\"</span>},\\n  <span class=\\\"hljs-type\\\">Error</span> <span class=\\\"hljs-string\\\">\\\"Something wrong happened!\\\"</span>\\n];</code></pre>\\n      </div>\\n<h3 id=\\\"mutually-recursive-types\\\"><a href=\\\"#mutually-recursive-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mutually Recursive Types</h3>\\n<p>Just like functions, types can be mutually recursive through <code>and</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> student = {taughtBy: teacher}\\nand teacher = {students: list student};</code></pre>\\n      </div>\\n<p><strong>Note</strong> that there's no semicolon ending the first line and no <code>type</code> on the second line.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>A type system allowing type argument is basically allowing type-level functions. <code>list int</code> is really the <code>list</code> type function taking in the <code>int</code> type, and returning the final, concrete type you'd use in some places. You might have noticed that in other languages, this is more or less called \\\"generics\\\". For example, <code>ArrayList&#x3C;Integer></code> in Java.</p>\\n<p><a href=\\\"https://en.wikipedia.org/wiki/Rule_of_least_power\\\">The principle of least power</a> applies when you're trying to \\\"Get Things Done\\\". If the problem domain allows, definitely pick the least abstract (aka, the most concrete) solution available, so that the solution is reached faster and has fewer unstable indirections you'd have to traverse. For example, prefer types over free-form data, prefer data-driven configuration over turing-complete function calls, prefer function calls over macros, prefer macros over project forks, etc. When you constraint your domain and power, things become easier to analyze. That is, <em>if</em> the domain is constrained enough to allow it.</p>\\n<p>When a type system is an all-encompassing aspect of your program, we need to make sure we leave enough power order not to overly constrain your expressiveness; without \\\"type functions\\\", you'd end up with quite a bit of boilerplate, e.g. hard-coded <code>listOfInt</code>, <code>listOfString</code>, <code>listOfArrayOfFloat</code>, their respective helper functions, etc. However, please also make sure you don't overly abuse the power given to you through a rather powerful type system. Sometimes, it's fine to write a <em>little</em> bit of boilerplate to reduce the need for otherwise extra powerful types. If anything, tasteful tradeoffs might show your pragmatism and judgement more than fancy types!</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/let-binding.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Let Binding\",\n\t\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>A \\\"let binding\\\", in other languages, might be called a \\\"variable declaration/assignment\\\". <code>let</code> gives names to values. They can be seen and referenced by code that comes after them.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> greeting = <span class=\\\"hljs-string\\\">\\\"hello!\\\"</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> score = <span class=\\\"hljs-number\\\">10</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> newScore = <span class=\\\"hljs-number\\\">10</span> + score;\\n...</code></pre>\\n      </div>\\n<h3 id=\\\"block-scope\\\"><a href=\\\"#block-scope\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Block Scope</h3>\\n<p>Bindings can be scoped through <code>{}</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">if</span> (displayGreeting) {\\n  <span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-string\\\">\\\"Enjoying the docs so far?\\\"</span>;\\n  print_endline message;\\n};\\n<span class=\\\"hljs-comment\\\">/* `message` not accessible here! */</span></code></pre>\\n      </div>\\n<h3 id=\\\"bindings-are-immutable\\\"><a href=\\\"#bindings-are-immutable\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Bindings Are Immutable</h3>\\n<p>\\\"Immutable\\\" as in, \\\"doesn't change\\\". Once a binding refers to a value, it cannot refer to anything else (unless it\\nexplicitly contains a mutable value, discussed later). However, you may create a new binding of the same name which <em>shadows</em> the previous binding; from that point onward, the binding will refer to the newly assigned value.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>;\\nprint_endline message; <span class=\\\"hljs-comment\\\">/* Prints \\\"hello\\\" */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-string\\\">\\\"bye\\\"</span>;\\nprint_endline message; <span class=\\\"hljs-comment\\\">/* Prints \\\"bye\\\" */</span></code></pre>\\n      </div>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p>Since bindings are scoped through <code>{}</code>, you can create an anonymous scope around them:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = {\\n  <span class=\\\"hljs-keyword\\\">let</span> part1 = <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>;\\n  <span class=\\\"hljs-keyword\\\">let</span> part2 = <span class=\\\"hljs-string\\\">\\\"world\\\"</span>;\\n  part1 ^ <span class=\\\"hljs-string\\\">\\\" \\\"</span> ^ part2\\n};\\n<span class=\\\"hljs-comment\\\">/* `part1` and `part2` not accessible here! */</span></code></pre>\\n      </div>\\n<p>This prevents misuse of the bindings after these lines.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>Reason is backed by OCaml under the hood. a let binding, in OCaml syntax, looks like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-keyword\\\">in</span>\\n<span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-keyword\\\">in</span>\\na + b</code></pre>\\n      </div>\\n<p>This could be conceptually read in this format instead:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-keyword\\\">in</span>\\n  <span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-keyword\\\">in</span>\\n    a + b</code></pre>\\n      </div>\\n<p>Which is the following in Reason:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-number\\\">2</span>;\\na + b;</code></pre>\\n      </div>\\n<p>Which might remind you of:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Reason syntax */</span>\\n<span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> a<span class=\\\"hljs-params\\\"> </span></span></span>=&gt;\\n  <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> b<span class=\\\"hljs-params\\\"> </span></span></span>=&gt;\\n    a + b;</code></pre>\\n      </div>\\n<p>Though they're not strictly the same, hopefully you can see that <code>let</code> is just an expression and akin to a function! In Reason, we've turned <code>in</code> into <code>;</code> for visual familiarity; but don't let that hide the underlying elegance of expressions.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/list-and-array.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"List & Array\",\n\t\t\t\t\t\t\t\t\t\"order\": 80\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"list\\\"><a href=\\\"#list\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>List</h3>\\n<p>Lists are:</p>\\n<ul>\\n<li>homogeneous</li>\\n<li>immutable</li>\\n<li>fast at prepending items</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myList = [<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>];</code></pre>\\n      </div>\\n<p>Reason lists are simple, singly linked list.</p>\\n<h4 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h4>\\n<p>You'd use list for its resizability, its fast prepend (adding at the head), and its fast split, all of which are immutable yet efficient!</p>\\n<p>The standard lib provides a <a href=\\\"/api/List.html\\\">List module</a> (and its counterpart with labeled arguments, <code>ListLabels</code>).</p>\\n<h5 id=\\\"immutable-prepend\\\"><a href=\\\"#immutable-prepend\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Immutable Prepend</h5>\\n<p>Use the spread syntax, which is just <code>List.cons</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myList = [<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>];\\n<span class=\\\"hljs-keyword\\\">let</span> anotherList = [<span class=\\\"hljs-number\\\">0</span>, ...myList];</code></pre>\\n      </div>\\n<p><code>myList</code> didn't mutate. <code>anotherList</code> is now <code>[0, 1, 2, 3]</code>. This is efficient (constant time, not linear). <code>anotherList</code>'s last 3 elements are shared with <code>myList</code>!</p>\\n<p><strong>Note that <code>[a, ...b, ...c]</code> is a syntax error</strong>. We don't support multiple spread for a list. That'd be an accidental linear operation (<code>O(b)</code>), since each item of b would be one-by-one added to the head of <code>c</code>. You can use <code>List.concat</code> for this.</p>\\n<p>Updating an arbitrary item in the middle of a list is discouraged, since its performance and allocation overhead would be linear (<code>O(n)</code>).</p>\\n<h5 id=\\\"access\\\"><a href=\\\"#access\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Access</h5>\\n<p><code>switch</code> (described in the <a href=\\\"/guide/language/pattern-matching\\\">pattern matching section</a>) is usually used to access list items:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = switch myList {\\n| <span class=\\\"hljs-literal\\\">[]</span> =&gt; <span class=\\\"hljs-string\\\">\\\"This list is empty\\\"</span>\\n| [a, ...rest] =&gt; <span class=\\\"hljs-string\\\">\\\"The head of the list is the string \\\"</span> ^ a\\n}</code></pre>\\n      </div>\\n<p>To access an arbitrary list item, use <code>List.nth</code>.</p>\\n<h4 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h4>\\n<p>Feel free to allocate as many empty lists as you'd like. As explained in the <a href=\\\"/guide/language/variant#list\\\">variant section for list</a>, an empty list is actually a parameter-less variant constructor under the hood, which compiles to a mere integer. No extra memory allocation needed.</p>\\n<p>To understand how prepend can be immutable and <code>O(1)</code> at the same time, see the explanation of <a href=\\\"/guide/language/variant#list\\\">list's underlying representation</a>.</p>\\n<h4 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h4>\\n<p>In the future, we might provide an out-of-the-box list data structure that's immutable, resizable and features all-around fast operations, such as <a href=\\\"https://github.com/facebookincubator/immutable-re\\\">Immutable-re</a> (still work in progress!).</p>\\n<h3 id=\\\"array\\\"><a href=\\\"#array\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Array</h3>\\n<p>Arrays are like lists, except they are:</p>\\n<ul>\\n<li>mutable</li>\\n<li>fast at random access &#x26; updates</li>\\n<li>fix-sized on native (flexibly sized on JavaScript)</li>\\n</ul>\\n<p>You'd surround them with <code>[|</code> and <code>|]</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myArray = [|<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>, <span class=\\\"hljs-string\\\">\\\"world\\\"</span>, <span class=\\\"hljs-string\\\">\\\"how are you\\\"</span>|];</code></pre>\\n      </div>\\n<h4 id=\\\"usage-1\\\"><a href=\\\"#usage-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h4>\\n<p>Standard library <a href=\\\"/api/Array.html\\\">Array</a> and <a href=\\\"/api/ArrayLabels.html\\\">ArrayLabel</a> module. For JS compilation, you also have the familiar <a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.Array.html\\\">Js.Array</a> bindings API.</p>\\n<p>Access &#x26; update an array item like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myArray = [|<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>, <span class=\\\"hljs-string\\\">\\\"world\\\"</span>, <span class=\\\"hljs-string\\\">\\\"how are you\\\"</span>|];\\n\\n<span class=\\\"hljs-keyword\\\">let</span> firstItem = myArray.(<span class=\\\"hljs-number\\\">0</span>); <span class=\\\"hljs-comment\\\">/* \\\"hello\\\" */</span>\\n\\nmyArray.(<span class=\\\"hljs-number\\\">0</span>) = <span class=\\\"hljs-string\\\">\\\"hey\\\"</span>;\\n\\n<span class=\\\"hljs-comment\\\">/* now [|\\\"hey\\\", \\\"world\\\", \\\"how are you\\\"|] */</span></code></pre>\\n      </div>\\n<p>The above array access/update is just syntax sugar for <code>Array.get</code>/<code>Array.set</code>.</p>\\n<h4 id=\\\"tips--tricks-1\\\"><a href=\\\"#tips--tricks-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h4>\\n<p>If you're compiling to JavaScript, know that Reason arrays map straightforwardly to JavaScript arrays, and vice-versa. Thus, even though arrays are fix-sized on native, you can still use the <code>Js.Array</code> API to resize them. This is fine.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/module.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Module\",\n\t\t\t\t\t\t\t\t\t\"order\": 180\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"basics\\\"><a href=\\\"#basics\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Basics</h3>\\n<p><strong>Modules are like mini files</strong>! They can contain type definitions, <code>let</code>\\nbindings, nested modules, etc.</p>\\n<h4 id=\\\"creation\\\"><a href=\\\"#creation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creation</h4>\\n<p>To create a module, use the <code>module</code> keyword. The module name must start with a\\n<strong>capital letter</strong>. Whatever you could place in a <code>.re</code> file, you may place\\ninside a module definition's <code>{}</code> block.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">School</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> profession = <span class=\\\"hljs-type\\\">Teacher</span> | <span class=\\\"hljs-type\\\">Director</span>;\\n\\n  <span class=\\\"hljs-keyword\\\">let</span> person1 = <span class=\\\"hljs-type\\\">Teacher</span>;\\n  <span class=\\\"hljs-keyword\\\">let</span> getProfession person =&gt;\\n    <span class=\\\"hljs-keyword\\\">switch</span> person {\\n    | <span class=\\\"hljs-type\\\">Teacher</span> =&gt; <span class=\\\"hljs-string\\\">\\\"A teacher\\\"</span>\\n    | <span class=\\\"hljs-type\\\">Director</span> =&gt; <span class=\\\"hljs-string\\\">\\\"A director\\\"</span>\\n    };\\n};</code></pre>\\n      </div>\\n<p>A module's contents (including types!) can be accessed much like a record's,\\nusing the <code>.</code> notation. This demonstrates modules' utility for namespacing.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> anotherPerson: <span class=\\\"hljs-type\\\">School</span>.profession = <span class=\\\"hljs-type\\\">School</span>.<span class=\\\"hljs-type\\\">Teacher</span>;\\nprint_endline (<span class=\\\"hljs-type\\\">School</span>.getProfession anotherPerson); <span class=\\\"hljs-comment\\\">/* \\\"A teacher\\\" */</span></code></pre>\\n      </div>\\n<p>Nested modules work too.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">MyModule</span> = </span>{\\n  <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">NestedModule</span> = </span>{\\n     <span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>;\\n  };\\n};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-type\\\">MyModule</span>.<span class=\\\"hljs-type\\\">NestedModule</span>.message;</code></pre>\\n      </div>\\n<h4 id=\\\"opening-a-module\\\"><a href=\\\"#opening-a-module\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>open</code>ing a module</h4>\\n<p>Constantly referring to a value/type in a module can be tedious. We can open a\\nmodule's definition and refer to its contents without prepending them with the\\nmodule's name. Two ways:</p>\\n<p>Local open.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message =\\n  <span class=\\\"hljs-type\\\">School</span>.(\\n    <span class=\\\"hljs-keyword\\\">switch</span> person1 {\\n    | <span class=\\\"hljs-type\\\">Teacher</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Hello teacher!\\\"</span>\\n    | <span class=\\\"hljs-type\\\">Director</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Hello director!\\\"</span>\\n    }\\n  );</code></pre>\\n      </div>\\n<p>Global open. <strong>Use this sparingly as it allows convenience at the cost of ease\\nof reasoning</strong>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>open <span class=\\\"hljs-type\\\">School</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> anotherPerson: profession = <span class=\\\"hljs-type\\\">Teacher</span>;\\nprintProfession anotherPerson;</code></pre>\\n      </div>\\n<h4 id=\\\"extending-modules\\\"><a href=\\\"#extending-modules\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Extending modules</h4>\\n<p>Using <code>include</code> in a module statically \\\"spreads\\\" a module's content into\\na new one, thus often fulfill the role of \\\"inheritance\\\" or \\\"mixin\\\".</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">BaseComponent</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">let</span> defaultGreeting = <span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>;\\n  <span class=\\\"hljs-keyword\\\">let</span> getAudience ::excited =&gt; excited ? <span class=\\\"hljs-string\\\">\\\"world!\\\"</span> : <span class=\\\"hljs-string\\\">\\\"world\\\"</span>;\\n};\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">ActualComponent</span> = </span>{\\n  <span class=\\\"hljs-comment\\\">/* the content is copied over */</span>\\n  <span class=\\\"hljs-keyword\\\">include</span> <span class=\\\"hljs-type\\\">BaseComponent</span>;\\n  <span class=\\\"hljs-comment\\\">/* overrides BaseComponent.defaultGreeting */</span>\\n  <span class=\\\"hljs-keyword\\\">let</span> defaultGreeting = <span class=\\\"hljs-string\\\">\\\"Hey\\\"</span>;\\n  <span class=\\\"hljs-keyword\\\">let</span> render () =&gt; defaultGreeting ^ <span class=\\\"hljs-string\\\">\\\" \\\"</span> ^ getAudience excited::<span class=\\\"hljs-literal\\\">true</span>;\\n};</code></pre>\\n      </div>\\n<p><strong>Note</strong>: <code>include</code> and <code>open</code> are very different! The former literally copies\\nover definitions into the new module for it to appropriate. The latter simply\\nallows refering to items (values, types, constructors, etc.) in the <code>open</code>ed\\nmodule's scope in an \\\"unqualified\\\" way (aka, <code>foo</code> instead of the qualified\\n<code>MyModule.foo</code>).</p>\\n<h4 id=\\\"every-re-file-is-a-module\\\"><a href=\\\"#every-re-file-is-a-module\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Every <code>.re</code> file is a module</h4>\\n<p>An OCaml/Reason file maps to a module; this unlocks some interesting\\nexpressivity that'd previously require code generation in other languages. The\\nfile <code>react.re</code> implicitly forms a module <code>React</code>, which can be seen by other\\nsource files.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* fileA.re. This typically compiles to module FileA below */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-number\\\">2</span>;\\n\\n<span class=\\\"hljs-comment\\\">/* fileB.re */</span>\\n<span class=\\\"hljs-comment\\\">/* Maps fileA's implementation to a new API */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> alpha = <span class=\\\"hljs-type\\\">FileA</span>.a;\\n<span class=\\\"hljs-keyword\\\">let</span> beta = <span class=\\\"hljs-type\\\">FileA</span>.b;</code></pre>\\n      </div>\\n<p>This contrived snippet expresses \\\"copying\\\" a file:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* fileA.re. This typically compiles to module FileA below */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-number\\\">2</span>;\\n\\n<span class=\\\"hljs-comment\\\">/* fileB.re */</span>\\n<span class=\\\"hljs-comment\\\">/* compiles to exactly fileA.re's content with no runtime overhead! */</span>\\n<span class=\\\"hljs-keyword\\\">include</span> <span class=\\\"hljs-type\\\">FileA</span>;</code></pre>\\n      </div>\\n<h2 id=\\\"signatures\\\"><a href=\\\"#signatures\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Signatures</h2>\\n<p>A module's type is called a \\\"signature\\\", and can be written explicitly. If a\\nmodule is like a <code>.re</code> (implementation) file, then a module's signature is like\\na <code>.rei</code> (interface) file.</p>\\n<h4 id=\\\"creation-1\\\"><a href=\\\"#creation-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creation</h4>\\n<p>To create a signature, use the <code>module type</code> keyword. The signature name must start with a\\n<strong>capital letter</strong>. Whatever you could place in a <code>.rei</code> file, you may place\\ninside a signature definition's <code>{}</code> block.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Picking up previous section's example */</span>\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">type</span> <span class=\\\"hljs-title\\\">EstablishmentType</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> profession;\\n  <span class=\\\"hljs-keyword\\\">let</span> getProfession: profession =&gt; string;\\n};</code></pre>\\n      </div>\\n<p>A signature defines the list of requirements that a module must satisfy in order\\nfor that module to match the signature. Those requirements are of the form:</p>\\n<ul>\\n<li>\\n<p><code>let x: int;</code> requires a <code>let</code> binding named <code>x</code>, of type <code>int</code>.</p>\\n</li>\\n<li>\\n<p><code>type t = someType;</code> requires a type field <code>t</code> to be equal to <code>someType</code>.</p>\\n</li>\\n<li>\\n<p><code>type t;</code> requires a type field <code>t</code>, but without imposing any requirements on\\nthe actual, concrete type of <code>t</code>. We'd use <code>t</code> in other entries in the\\nsignature to describe relationships, e.g. <code>let makePair: t -> (t, t)</code> but we\\ncannot, for example, assume that <code>t</code> is an <code>int</code>. This gives us great,\\nenforced abstraction abilities.</p>\\n</li>\\n</ul>\\n<p>To illustrate the various kinds of type entries, consider the above signature\\n<code>EstablishmentType</code> which requires that a module:</p>\\n<ul>\\n<li>Declare a type named <code>profession</code>.</li>\\n<li>Must include a function that takes in a value of the type <code>profession</code> and\\nreturns a string.</li>\\n</ul>\\n<p><strong>Note</strong>:</p>\\n<p>Modules of the type <code>EstablishmentType</code> can contain more fields than the\\nsignature declares, just like the module <code>School</code> in the previous section (if we\\nchoose to assign it the type <code>EstablishmentType</code>. Otherwise, <code>School</code> exposes\\nevery field). This effectively makes the <code>person1</code> field an enforced\\nimplementation detail! Outsiders can't access it, since it's not present in the\\nsignature; the signature <strong>constrained</strong> what others can access.</p>\\n<p>The type <code>EstablishmentType.profession</code> is <strong>abstract</strong>: it doesn't have a\\nconcrete type; it's saying \\\"I don't care what the actual type is, but it's used\\nas input to <code>getProfession</code>\\\". This is useful to fit many modules under the same\\ninterface:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">Company</span>: <span class=\\\"hljs-title\\\">EstablishmentType</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> profession = <span class=\\\"hljs-type\\\">CEO</span> | <span class=\\\"hljs-type\\\">Designer</span> | <span class=\\\"hljs-type\\\">Engineer</span> | ...;\\n\\n  <span class=\\\"hljs-keyword\\\">let</span> getProfession person =&gt; ...\\n  <span class=\\\"hljs-keyword\\\">let</span> person1 = ...;\\n  <span class=\\\"hljs-keyword\\\">let</span> person2 = ...;\\n};</code></pre>\\n      </div>\\n<p>It's also useful to hide the underlying type as an implementation detail others\\ncan't rely on. If you ask what the type of <code>Company.profession</code> is, instead of\\nexposing the variant, it'll only tell you \\\"it's <code>Company.profession</code>\\\".</p>\\n<h4 id=\\\"every-rei-file-is-a-signature\\\"><a href=\\\"#every-rei-file-is-a-signature\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Every <code>.rei</code> file is a signature</h4>\\n<p>Similar to how a <code>react.re</code> file implicitly defines a module <code>React</code>, a file\\n<code>react.rei</code> implicitly defines a signature for <code>React</code>. If <code>react.rei</code> isn't\\nprovided, the signature of <code>react.re</code> defaults to exposing all the fields of the\\nmodule. Because they don't contain implementation files, <code>.rei</code> files are used\\nin the ecosystem to also document the public API of their corresponding modules.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* file react.re (implementation. Compiles to module React) */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> state = int;\\n<span class=\\\"hljs-keyword\\\">let</span> render = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> str<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; str;</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* file react.rei (interface. Compiles to signature of module React) */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> state = int;\\n<span class=\\\"hljs-keyword\\\">let</span> render: str =&gt; str;</code></pre>\\n      </div>\\n<h2 id=\\\"module-functions-functors\\\"><a href=\\\"#module-functions-functors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Module Functions (functors)</h2>\\n<p>Modules can be passed to functions! It would be the equivalent of passing a file\\nas a first-class item. However, modules are at a different \\\"layer\\\" of the\\nlanguage than other common concepts, so we can't pass them to <em>regular</em>\\nfunctions. Instead, we pass them to special functions called \\\"functors\\\".</p>\\n<p>The syntax for defining and using functors is very much like the syntax\\nfor defining and using regular functions. The primary differences are:</p>\\n<ul>\\n<li>Functors use the <code>module</code> keyword instead of <code>let</code> and the <code>fun</code>\\nkeyword designates \\\"functor\\\" rather than \\\"function\\\" in this case.</li>\\n<li>Functors take modules as arguments and return a module.</li>\\n<li>Functors <em>require</em> annotating arguments.</li>\\n<li>Functors must start with a capital letter (just like modules/signatures).</li>\\n</ul>\\n<p>Here's an example <code>MakeSet</code> functor, that takes in a module of the type\\n<code>Comparable</code> and returns a new set that can contain such comparable items.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">type</span> <span class=\\\"hljs-title\\\">Comparable</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> t;\\n  <span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-built_in\\\">equal</span>: t =&gt; t =&gt; bool;\\n};\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">MakeSet</span> = <span class=\\\"hljs-title\\\">fun</span> (<span class=\\\"hljs-title\\\">Item</span>: <span class=\\\"hljs-title\\\">Comparable</span>) =&gt; </span>{\\n  <span class=\\\"hljs-comment\\\">/* let's use a list as our naive backing data structure */</span>\\n  <span class=\\\"hljs-keyword\\\">type</span> backingType = list <span class=\\\"hljs-type\\\">Item</span>.t;\\n  <span class=\\\"hljs-keyword\\\">let</span> empty = [];\\n  <span class=\\\"hljs-keyword\\\">let</span> add (currentSet: backingType) (newItem: <span class=\\\"hljs-type\\\">Item</span>.t) :backingType =&gt;\\n    <span class=\\\"hljs-comment\\\">/* if item exists */</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-type\\\">List</span>.exists (<span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> x<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; <span class=\\\"hljs-type\\\">Item</span>.<span class=\\\"hljs-built_in\\\">equal</span> x newItem) currentSet) {\\n      currentSet <span class=\\\"hljs-comment\\\">/* return the same (immutable) set (a list really) */</span>\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n      [newItem, ...currentSet]; <span class=\\\"hljs-comment\\\">/* prepend to the set and return it */</span>\\n    }\\n};</code></pre>\\n      </div>\\n<p>Functors can be applied using function application syntax. In this case, we're\\ncreating a set, whose items are pairs of integers.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">IntPair</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> t = (int, int);\\n  <span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-built_in\\\">equal</span> (x1, y1) (x2, y2) =&gt; x1 == x2 &amp;&amp; y1 == y2;\\n  <span class=\\\"hljs-keyword\\\">let</span> create x y =&gt; (x, y);\\n};\\n\\n<span class=\\\"hljs-comment\\\">/* IntPair abides by the Comparable signature required by MakeSet */</span>\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">SetOfIntPairs</span> = <span class=\\\"hljs-title\\\">MakeSet</span> <span class=\\\"hljs-title\\\">IntPair</span>;</span></code></pre>\\n      </div>\\n<h4 id=\\\"module-functions-types\\\"><a href=\\\"#module-functions-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Module functions types</h4>\\n<p>Like with module types, functor types also act to constrain and hide what we may\\nassume about functors. The syntax for functor types are consistent with those\\nfor function types, but with types capitalized to represent the signatures of\\nmodules the functor accepts as arguments and return values. In the\\nprevious example, we're exposing the backing type of a set; by giving <code>MakeSet</code>\\na functor signature, we can hide the underlying data structure!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">type</span> <span class=\\\"hljs-title\\\">Comparable</span> = ...\\n\\n<span class=\\\"hljs-title\\\">module</span> <span class=\\\"hljs-title\\\">type</span> <span class=\\\"hljs-title\\\">MakeSetType</span> = (<span class=\\\"hljs-title\\\">Item</span>: <span class=\\\"hljs-title\\\">Comparable</span>) =&gt; </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> backingType;\\n  <span class=\\\"hljs-keyword\\\">let</span> empty: backingType;\\n  <span class=\\\"hljs-keyword\\\">let</span> add: backingType =&gt; <span class=\\\"hljs-type\\\">Item</span>.t =&gt; backingType;\\n};\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">MakeSet</span>: <span class=\\\"hljs-title\\\">MakeSetType</span> = <span class=\\\"hljs-title\\\">fun</span> (<span class=\\\"hljs-title\\\">Item</span>: <span class=\\\"hljs-title\\\">Comparable</span>) =&gt; </span>{\\n  ...\\n};</code></pre>\\n      </div>\\n<h2 id=\\\"drawbacks\\\"><a href=\\\"#drawbacks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Drawbacks</h2>\\n<p>Modules and functors are at a different \\\"layer\\\" of language than the rest (\\nfunctions, let bindings, data structures, etc.). For example, you can't easily\\npass them into a tuple or record. Use them judiciously! Lots of times, just a\\nrecord or a function is enough.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">School</span> = </span>{...};\\n\\n<span class=\\\"hljs-comment\\\">/* this will straight up give you a syntax error! */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> schools = (<span class=\\\"hljs-type\\\">School</span>, <span class=\\\"hljs-type\\\">School</span>);</code></pre>\\n      </div>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/mutation.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Mutation\",\n\t\t\t\t\t\t\t\t\t\"order\": 140\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Reason has great traditional imperative &#x26; mutative programming capabilities. You should use these features sparingly, but sometimes they allow your code to be more performant and written in a more familiar pattern.</p>\\n<h3 id=\\\"mutate-let-binding\\\"><a href=\\\"#mutate-let-binding\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mutate Let-binding</h3>\\n<p>Let-bindings are immutable, but you can wrap it with a <code>ref</code>, which is like a box whose content can change:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> foo = <span class=\\\"hljs-keyword\\\">ref</span> <span class=\\\"hljs-number\\\">5</span>;</code></pre>\\n      </div>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>You can get the actual value of a <code>ref</code> through the <code>!</code> operator:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-keyword\\\">let</span> five = !foo; <span class=\\\"hljs-comment\\\">/* 5 */</span></code></pre>\\n      </div>\\n<p>Assign a new value to <code>foo</code> like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code>foo := 6;</code></pre>\\n      </div>\\n<p>Note that the previous binding <code>five</code> stays <code>5</code>, since it got the underlying item on the <code>ref</code> box, not the <code>ref</code> itself.</p>\\n<h3 id=\\\"tip--tricks\\\"><a href=\\\"#tip--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tip &#x26; Tricks</h3>\\n<p><strong>Just kidding</strong>! <code>ref</code> isn't actually a special feature! It's just an ordinary syntax sugar for a <a href=\\\"/api/Pervasives.html#TYPEref\\\">predefined mutable record type called <code>ref</code></a> in the standard library (search \\\"References\\\" in that page). Here's the desugared version:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> foo = {contents: <span class=\\\"hljs-number\\\">5</span>};\\n<span class=\\\"hljs-keyword\\\">let</span> five = foo.contents;\\nfoo.contents = <span class=\\\"hljs-number\\\">5</span>;</code></pre>\\n      </div>\\n<p>Before reaching for <code>ref</code>, know that you can achieve lightweight, local \\\"mutations\\\" through overriding let bindings:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> foo = <span class=\\\"hljs-number\\\">10</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> foo = someCondition ? foo + <span class=\\\"hljs-number\\\">5</span> : foo;\\nprint_int foo; <span class=\\\"hljs-comment\\\">/* either 15 or 10 */</span></code></pre>\\n      </div>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/overview.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Overview\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<table>\\n<thead>\\n<tr>\\n<th>Primitive</th>\\n<th>Example</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Strings</td>\\n<td><code>\\\"Hello\\\"</code></td>\\n</tr>\\n<tr>\\n<td>Characters</td>\\n<td><code>'x'</code></td>\\n</tr>\\n<tr>\\n<td>Integers</td>\\n<td><code>23</code>\\n, \\n<code>-23</code></td>\\n</tr>\\n<tr>\\n<td>Floats</td>\\n<td><code>23.0</code>\\n, \\n<code>-23.0</code></td>\\n</tr>\\n<tr>\\n<td>Integer Addition</td>\\n<td><code>23 + 1</code></td>\\n</tr>\\n<tr>\\n<td>Float Addition</td>\\n<td><code>23.0 +. 1.0</code></td>\\n</tr>\\n<tr>\\n<td>Integer Division/Multiplication</td>\\n<td><code>2 / 23 * 1</code></td>\\n</tr>\\n<tr>\\n<td>Float Division/Multiplication</td>\\n<td><code>2.0 /. 23.0 *. 1.0</code></td>\\n</tr>\\n<tr>\\n<td>String Concatenation</td>\\n<td><code>\\\"Hello \\\" ^ \\\"World\\\"</code></td>\\n</tr>\\n<tr>\\n<td>Comparison</td>\\n<td><code>></code>\\n, \\n<code>&#x3C;</code>\\n, \\n<code>>=</code>\\n, \\n<code>=&#x3C;</code></td>\\n</tr>\\n<tr>\\n<td>Boolean operations</td>\\n<td><code>not</code>\\n, \\n<code>&#x26;&#x26;</code>\\n, \\n<code>||</code></td>\\n</tr>\\n<tr>\\n<td>Reference, Physical (deep) Equality</td>\\n<td><code>===</code>\\n, \\n<code>==</code></td>\\n</tr>\\n<tr>\\n<td>Immutable Lists</td>\\n<td><code>[1, 2, 3]</code></td>\\n</tr>\\n<tr>\\n<td>Immutable Prepend</td>\\n<td><code>[item1, item2, ...theRest]</code></td>\\n</tr>\\n<tr>\\n<td>Arrays</td>\\n<td><code>[|1, 2, 3|]</code></td>\\n</tr>\\n<tr>\\n<td>Records</td>\\n<td><code>type player = {score: int}; {score: 100}</code></td>\\n</tr>\\n</tbody>\\n</table>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/object.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Object\",\n\t\t\t\t\t\t\t\t\t\"order\": 175\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Most of time in Reason, you'd be using record to group named values together. In certain niche situations, however, you might want to use a similar feature called object; they're a bit more flexible and come with different tradeoffs.</p>\\n<p><strong>If you come from JavaScript</strong>, you're mostly likely <strong>not</strong> looking for plain Reason objects. Skip right to the Tip &#x26; Tricks section below.</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<h4 id=\\\"type-declaration\\\"><a href=\\\"#type-declaration\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Type Declaration</h4>\\n<p>An object <strong>doesn't need a type declaration</strong>, though it can have one. It looks like a record, except with a <code>.</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tesla = {\\n  .\\n  color: string\\n};</code></pre>\\n      </div>\\n<p>The dot at the beginning indicates that this is a \\\"closed\\\" object type, which means that an object based on this type must have exactly this shape.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> car 'a = {\\n  ..\\n  color: string\\n} <span class=\\\"hljs-keyword\\\">as</span> 'a;</code></pre>\\n      </div>\\n<p>Two dots, also called an elision, indicate that this is an \\\"open\\\" object type, and therefore can also contain other values and methods. An open object is also polymorphic and therefore requires a parameter.</p>\\n<h4 id=\\\"creation\\\"><a href=\\\"#creation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creation</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tesla = {\\n  .\\n  drive: int =&gt; int\\n};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> obj :tesla = {\\n  <span class=\\\"hljs-keyword\\\">val</span> hasEnvy = <span class=\\\"hljs-keyword\\\">ref</span> <span class=\\\"hljs-literal\\\">false</span>;\\n  <span class=\\\"hljs-keyword\\\">pub</span> drive speed =&gt; {\\n    this#enableEnvy <span class=\\\"hljs-literal\\\">true</span>;\\n    speed\\n  };\\n  <span class=\\\"hljs-keyword\\\">pri</span> enableEnvy envy =&gt; {\\n    hasEnvy := envy\\n  };\\n};</code></pre>\\n      </div>\\n<p>This object is of object type tesla and has a public method <code>drive</code>. It also contains a private method <code>enableEnvy</code> that is only accessible from within the object.</p>\\n<p>As you can see, a Reason object can also access <code>this</code>. Just like a JavaScript object's <code>this</code>, our <code>this</code> has very erratic behavior depending on the context. Just kidding. Our <code>this</code> always points to the object itself correctly. Gotta learn from history.</p>\\n<p>The following example shows an open object type which uses a type as parameter. The object type parameter is required to implement all the methods of the open object type.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tesla 'a = {\\n  ..\\n  drive: int =&gt; int\\n} <span class=\\\"hljs-keyword\\\">as</span> 'a;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> obj:\\n  tesla {. drive: int =&gt; int, doYouWant: unit =&gt; bool}\\n  = {\\n  <span class=\\\"hljs-keyword\\\">val</span> hasEnvy = <span class=\\\"hljs-keyword\\\">ref</span> <span class=\\\"hljs-literal\\\">false</span>;\\n  <span class=\\\"hljs-keyword\\\">pub</span> drive speed =&gt; {\\n    this#enableEnvy <span class=\\\"hljs-literal\\\">true</span>;\\n    speed\\n  };\\n  <span class=\\\"hljs-keyword\\\">pub</span> doYouWant () =&gt; !hasEnvy;\\n  <span class=\\\"hljs-keyword\\\">pri</span> enableEnvy envy =&gt; {\\n    hasEnvy := envy\\n  };\\n};</code></pre>\\n      </div>\\n<h3 id=\\\"tip--tricks\\\"><a href=\\\"#tip--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tip &#x26; Tricks</h3>\\n<p>If you come from JavaScript, you're probably not looking for vanilla Reason objects, but BuckleScript's <a href=\\\"https://bucklescript.github.io/bucklescript/Manual.html#_binding_to_js_objects\\\">special object</a>. These are different in that they:</p>\\n<ul>\\n<li>access fields through <code>##</code></li>\\n<li>always come with with <code>Js.t</code> (as a type parameter to the <code>Js.t</code> type).</li>\\n<li>compile to actual JS objects.</li>\\n</ul>\\n<p>Because they're used so often, Reason give the BS object value <code>[%bs.obj {foo: bar}]</code> a special syntax sugar: <code>{\\\"foo\\\": bar}</code>. It looks like a quoted record, basically.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/pattern-matching.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Pattern Matching!\",\n\t\t\t\t\t\t\t\t\t\"order\": 135\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p><em>Make sure you've read on <a href=\\\"/guide/language/variant\\\">Variant</a> first</em>.</p>\\n<p><strong>We're finally here</strong>! Pattern matching is one of <em>the</em> best features of the language. It's like destructuring, but comes with even more help from the type system.</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>Consider a variant:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> payload =\\n| <span class=\\\"hljs-type\\\">BadResult</span> int\\n| <span class=\\\"hljs-type\\\">GoodResult</span> string\\n| <span class=\\\"hljs-type\\\">NoResult</span>;</code></pre>\\n      </div>\\n<p>While using the <code>switch</code> expression on it, you can \\\"destructure\\\" it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> data = <span class=\\\"hljs-type\\\">GoodResult</span> <span class=\\\"hljs-string\\\">\\\"Product shipped!\\\"</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> message =\\n  <span class=\\\"hljs-keyword\\\">switch</span> data {\\n  | <span class=\\\"hljs-type\\\">GoodResult</span> theMessage =&gt; <span class=\\\"hljs-string\\\">\\\"Success! \\\"</span> ^ theMessage\\n  | <span class=\\\"hljs-type\\\">BadResult</span> errorCode =&gt;\\n    <span class=\\\"hljs-string\\\">\\\"Something's wrong. The error code is: \\\"</span> ^ (string_of_int errorCode)\\n  };</code></pre>\\n      </div>\\n<p>Notice how we've destructured <code>data</code> while handling each different case. The above <code>switch</code> will give you a compiler warning:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-type\\\">Warning</span> <span class=\\\"hljs-number\\\">8</span>: this pattern-matching <span class=\\\"hljs-keyword\\\">is</span> not exhaustive.\\n<span class=\\\"hljs-type\\\">Here</span> <span class=\\\"hljs-keyword\\\">is</span> an example <span class=\\\"hljs-keyword\\\">of</span> a value that <span class=\\\"hljs-keyword\\\">is</span> not matched:\\n<span class=\\\"hljs-type\\\">NoResult</span></code></pre>\\n      </div>\\n<p>Isn't that great? While matching on the shape of your data, the type system warned of an unhandled case. This <strong>conditional</strong> aspect is what makes it pattern matching rather than plain destructuring. Most data structures with a \\\"<strong>if this then that</strong>\\\" aspect works with it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">switch</span> myList {\\n| [] =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"Empty list\\\"</span>\\n| [a, ...theRest] =&gt; print_endline (<span class=\\\"hljs-string\\\">\\\"list with the head value \\\"</span> ^ a)\\n};\\n\\n<span class=\\\"hljs-keyword\\\">switch</span> myArray {\\n| [|<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>|] =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"This is an array with item 1 and 2\\\"</span>\\n| [||] =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"This array has no element\\\"</span>\\n| <span class=\\\"hljs-number\\\">_</span> =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"This is an array\\\"</span>\\n}</code></pre>\\n      </div>\\n<p>The <code>_</code> case is a special fall-through case that allows all unmatched conditions to go to that branch.</p>\\n<p>You can even switch on string, int and others. You can even have many patterns going to the same result!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> reply =\\n  <span class=\\\"hljs-keyword\\\">switch</span> message {\\n  | <span class=\\\"hljs-string\\\">\\\"Reason's pretty cool\\\"</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Yep\\\"</span>\\n  | <span class=\\\"hljs-string\\\">\\\"good night\\\"</span> =&gt; <span class=\\\"hljs-string\\\">\\\"See ya!\\\"</span>\\n  | <span class=\\\"hljs-string\\\">\\\"hello\\\"</span> | <span class=\\\"hljs-string\\\">\\\"hi\\\"</span> | <span class=\\\"hljs-string\\\">\\\"heya\\\"</span> | <span class=\\\"hljs-string\\\">\\\"hey\\\"</span> =&gt; <span class=\\\"hljs-string\\\">\\\"hello to you too!\\\"</span>\\n  | <span class=\\\"hljs-number\\\">_</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Nice to meet you!\\\"</span>\\n  };</code></pre>\\n      </div>\\n<p>Combined with other data structures, pattern matching can produce extremely concise, compiler-verified, performant code:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message =\\n  <span class=\\\"hljs-keyword\\\">switch</span> data {\\n  | <span class=\\\"hljs-type\\\">GoodResult</span> theMessage =&gt; <span class=\\\"hljs-string\\\">\\\"Success! \\\"</span> ^ theMessage\\n  | <span class=\\\"hljs-type\\\">BadResult</span> (<span class=\\\"hljs-number\\\">0</span> | <span class=\\\"hljs-number\\\">1</span> | <span class=\\\"hljs-number\\\">5</span>) =&gt; <span class=\\\"hljs-string\\\">\\\"Something's wrong. It's a server side problem.\\\"</span>\\n  | <span class=\\\"hljs-type\\\">BadResult</span> errorCode =&gt; <span class=\\\"hljs-string\\\">\\\"Unknown error occurred. Code: \\\"</span> ^ string_of_int errorCode\\n  | <span class=\\\"hljs-type\\\">NoResult</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Things look fine\\\"</span>\\n  };</code></pre>\\n      </div>\\n<h4 id=\\\"when-clauses\\\"><a href=\\\"#when-clauses\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>When clauses</h4>\\n<p>When you really need to use arbitrary logic with an otherwise clean pattern match, you can slip in some <code>when</code> clauses, which are basically <code>if</code> sugar:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message =\\n  <span class=\\\"hljs-keyword\\\">switch</span> data {\\n  | <span class=\\\"hljs-type\\\">GoodResult</span> theMessage =&gt; ...\\n  | <span class=\\\"hljs-type\\\">BadResult</span> errorCode when isServerError errorCode =&gt; ...\\n  | <span class=\\\"hljs-type\\\">BadResult</span> errorCode =&gt; ... <span class=\\\"hljs-comment\\\">/* otherwise */</span>\\n  | <span class=\\\"hljs-type\\\">NoResult</span> =&gt; ...\\n  };</code></pre>\\n      </div>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p><strong>Flatten your pattern-match whenever you can</strong>. This is a real bug remover. Example below.</p>\\n<p>Do not abuse the fall-through <code>_</code> case too much. This prevents the compiler from telling you that you've forgotten to cover a case (exhaustiveness check), which would be especially helpful after a refactoring where you add a new case to a variant. Try only using <code>_</code> against infinite possibilities, e.g. string, int, etc.</p>\\n<p>Here's a series of examples, from worst to best:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> optionBoolToJsBoolean opt =&gt; \\n  <span class=\\\"hljs-keyword\\\">if</span> (opt == <span class=\\\"hljs-type\\\">None</span>) {\\n    <span class=\\\"hljs-type\\\">Js</span>.false_\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (opt == <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-literal\\\">true</span>) {\\n      <span class=\\\"hljs-type\\\">Js</span>.true_\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n      <span class=\\\"hljs-type\\\">Js</span>.false_\\n    }\\n  };</code></pre>\\n      </div>\\n<p>Now that's just silly =). Let's turn it into pattern-matching:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> optionBoolToJsBoolean opt =&gt; <span class=\\\"hljs-keyword\\\">switch</span> opt {\\n| <span class=\\\"hljs-type\\\">None</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.false_\\n| <span class=\\\"hljs-type\\\">Some</span> a =&gt; <span class=\\\"hljs-keyword\\\">switch</span> a {\\n  | <span class=\\\"hljs-literal\\\">true</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.true_\\n  | <span class=\\\"hljs-literal\\\">false</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.false_\\n  }\\n};</code></pre>\\n      </div>\\n<p>Slightly better, but still nested. Pattern-matching allows you to do this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> optionBoolToJsBoolean opt =&gt; <span class=\\\"hljs-keyword\\\">switch</span> opt {\\n| <span class=\\\"hljs-type\\\">None</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.false_\\n| <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-literal\\\">true</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.true_\\n| <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-literal\\\">false</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.false_\\n};</code></pre>\\n      </div>\\n<p>Much more linear-looking! Now, you might be tempted to do this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> optionBoolToJsBoolean opt =&gt; <span class=\\\"hljs-keyword\\\">switch</span> opt {\\n| <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-literal\\\">true</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.true_\\n| <span class=\\\"hljs-number\\\">_</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.false_\\n};</code></pre>\\n      </div>\\n<p>Which is much more concise, but kills the exhaustiveness check mentioned above. This is the best:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> optionBoolToJsBoolean opt =&gt; <span class=\\\"hljs-keyword\\\">switch</span> opt {\\n| <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-literal\\\">true</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.true_\\n| <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-literal\\\">false</span> | <span class=\\\"hljs-type\\\">None</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.false_\\n};</code></pre>\\n      </div>\\n<p>Pretty darn hard to make a mistake in this code at this point! Whenever you'd like to use an if-else with many branches, prefer pattern matching instead. It's more concise and <a href=\\\"/guide/language/variant#design-decisions\\\">performant</a> too.</p>\\n<p>See another example, with switch + tuple <a href=\\\"/guide/language/tuple#tips--tricks\\\">here</a>.</p>\\n<h3 id=\\\"design-notes\\\"><a href=\\\"#design-notes\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Notes</h3>\\n<p>The notorious <a href=\\\"https://en.wikipedia.org/wiki/Fizz_buzz#Programming_interviews\\\">fizzbuzz problem</a> strangely trips some people up, partially due its nature of paralyzing the programmer who hopes to simplify/unify the few condition branches in search of elegance where there's none. While fizzbuzz is slightly too dynamic to be solved in <code>when</code>-less switches, hopefully you can see that usually, pattern-matching's visual conciseness allows us to overcome decision paralysis, while keeping all the benefits (and more, as you've seen) of a bunch of brute-forced <code>if-else</code>s. There's really nothing wrong with explicitly listing out all the possibilities; Pattern matching corresponds to <strong>case analysis</strong> in math, a valid problem-solving technique that proves to be extremely convenient.</p>\\n<p>Using a Reason <code>switch</code> for the first time might make you feel like you've been missing out all these years. Careful, for it might ruin other languages for you =).</p>\\n<p>If you've tried to refactor a big, nested if-else logic, you might realize it's very hard to get the logic right. On the other hand, pattern matching + tuple conceptually maps to a 2D table, where each cell can be independently filled. This ensures that whenever you need to add a case in the <code>switch</code>, you can target that and only that table cell, without messing other cells up.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> animal = <span class=\\\"hljs-type\\\">Dog</span> | <span class=\\\"hljs-type\\\">Cat</span> | <span class=\\\"hljs-type\\\">Bird</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> result = <span class=\\\"hljs-keyword\\\">switch</span> (isBig, myAnimal) {\\n| (<span class=\\\"hljs-literal\\\">true</span>, <span class=\\\"hljs-type\\\">Dog</span>) =&gt; <span class=\\\"hljs-number\\\">1</span>\\n| (<span class=\\\"hljs-literal\\\">true</span>, <span class=\\\"hljs-type\\\">Cat</span>) =&gt; <span class=\\\"hljs-number\\\">2</span>\\n| (<span class=\\\"hljs-literal\\\">true</span>, <span class=\\\"hljs-type\\\">Bird</span>) =&gt; <span class=\\\"hljs-number\\\">3</span>\\n| (<span class=\\\"hljs-literal\\\">false</span>, <span class=\\\"hljs-type\\\">Dog</span> | <span class=\\\"hljs-type\\\">Cat</span>) =&gt; <span class=\\\"hljs-number\\\">4</span>\\n| (<span class=\\\"hljs-literal\\\">false</span>, <span class=\\\"hljs-type\\\">Bird</span>) =&gt; <span class=\\\"hljs-number\\\">5</span>\\n};</code></pre>\\n      </div>\\n<table>\\n<thead>\\n<tr>\\n<th>isBig \\\\ myAnimal</th>\\n<th>Dog</th>\\n<th>Cat</th>\\n<th>Bird</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>true</td>\\n<td>1</td>\\n<td>2</td>\\n<td>3</td>\\n</tr>\\n<tr>\\n<td>false</td>\\n<td>4</td>\\n<td>4</td>\\n<td>5</td>\\n</tr>\\n</tbody>\\n</table>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/type.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Type!\",\n\t\t\t\t\t\t\t\t\t\"order\": 15\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Types are the highlight of Reason! Here, you get a glimpse of why so many are excited about them.</p>\\n<p>This section briefly introduces the types syntax so that you can power through the subsequent sections without getting confused. More advanced topics on types can be found in the <a href=\\\"/guide/language/more-on-type\\\">More On Types</a> section.</p>\\n<h3 id=\\\"annotations\\\"><a href=\\\"#annotations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Annotations</h3>\\n<p>This let-binding doesn't contain any written type:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> score = <span class=\\\"hljs-number\\\">10</span>;</code></pre>\\n      </div>\\n<p>Reason knows that <code>score</code> is an <code>int</code>, judging by the value <code>10</code>. This is called <strong>inference</strong>.</p>\\n<p>But types can also be explicitly written down by choice:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> score: int = <span class=\\\"hljs-number\\\">10</span>;</code></pre>\\n      </div>\\n<p>You can also wrap any expression in parentheses and annotate it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myInt = <span class=\\\"hljs-number\\\">5</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> myInt = (<span class=\\\"hljs-number\\\">5</span>: int);\\n<span class=\\\"hljs-keyword\\\">let</span> myInt = (<span class=\\\"hljs-number\\\">5</span>: int) + (<span class=\\\"hljs-number\\\">4</span>: int);\\n<span class=\\\"hljs-keyword\\\">let</span> add (x: int) (y: int) :int =&gt; x + y;\\n<span class=\\\"hljs-keyword\\\">let</span> drawCircle radius::(r: int) :unit =&gt; ...;</code></pre>\\n      </div>\\n<p>Note: in the last line, <code>radius::(r: int)</code> is a labeled argument. More on this <a href=\\\"/guide/language/function\\\">here</a>.</p>\\n<h3 id=\\\"aliases\\\"><a href=\\\"#aliases\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Aliases</h3>\\n<p>You can refer to a type by a different name. They'll be equivalent:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> scoreType = int;\\n<span class=\\\"hljs-keyword\\\">let</span> x: scoreType = <span class=\\\"hljs-number\\\">10</span>;</code></pre>\\n      </div>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>Reason is backed by OCaml, whose type system has received decades of engineering. Here are a few highlights:</p>\\n<ul>\\n<li>\\n<p><strong>Types can be inferred</strong>. The type system deduces the types for you even if you don't manually write them down. This speeds up the prototyping phase. Additionally, editor features like <a href=\\\"https://github.com/reasonml-editor/vscode-reasonml\\\">VSCode's codelens</a> show you all the types while you write code.</p>\\n</li>\\n<li>\\n<p><strong>The type coverage is always 100%</strong>. We don't need a \\\"type coverage\\\" tool! Every piece of Reason code has a type.</p>\\n</li>\\n<li>\\n<p><strong>The type system is completely \\\"sound\\\"</strong>. This means that, as long as your code compiles fine, every type guarantees that it's not lying about itself. In a conventional, best-effort type system, just because the type says it's e.g. \\\"an integer that's never null\\\", doesn't mean it's actually never null. In contrast, a pure Reason program has no null bugs.</p>\\n</li>\\n</ul>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/record.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Record\",\n\t\t\t\t\t\t\t\t\t\"order\": 60\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Records are like JavaScript objects but are</p>\\n<ul>\\n<li>lighter</li>\\n<li>immutable by default</li>\\n<li>fixed in field names and types</li>\\n<li>veeery fast</li>\\n<li>veeeery nicely typed</li>\\n</ul>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>Type (mandatory):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {\\n  age: int,\\n  name: string\\n};</code></pre>\\n      </div>\\n<p>Value (this will be inferred to be of type <code>person</code>):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> me = {\\n  age: <span class=\\\"hljs-number\\\">5</span>,\\n  name: <span class=\\\"hljs-string\\\">\\\"Big Reason\\\"</span>\\n};</code></pre>\\n      </div>\\n<p>Access (the familiar dot notation):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> name = me.name;</code></pre>\\n      </div>\\n<h4 id=\\\"record-needs-an-explicit-definition\\\"><a href=\\\"#record-needs-an-explicit-definition\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Record Needs an Explicit Definition</h4>\\n<p>If you only write <code>{age: 5, name: \\\"Baby Reason\\\"}</code> without an explicit declaration somewhere above, the type system will give you an error. If the type definition resides in another file, you need to explicitly indicate which file it is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* School.re */</span>\\n\\n<span class=\\\"hljs-keyword\\\">type</span> person = {age: int, name: string};</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* example.re */</span>\\n\\n<span class=\\\"hljs-keyword\\\">let</span> me: <span class=\\\"hljs-type\\\">School</span>.person = {age: <span class=\\\"hljs-number\\\">20</span>, name: <span class=\\\"hljs-string\\\">\\\"Big Reason\\\"</span>};\\n<span class=\\\"hljs-comment\\\">/* or */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> me = <span class=\\\"hljs-type\\\">School</span>.{age: <span class=\\\"hljs-number\\\">20</span>, name: <span class=\\\"hljs-string\\\">\\\"Big Reason\\\"</span>};\\n<span class=\\\"hljs-comment\\\">/* or */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> me = {<span class=\\\"hljs-type\\\">School</span>.age: <span class=\\\"hljs-number\\\">20</span>, name: <span class=\\\"hljs-string\\\">\\\"Big Reason\\\"</span>};</code></pre>\\n      </div>\\n<p>Either of the above 3 says \\\"this record's definition is found in the School file\\\". The first one, the regular type annotation, is preferred.</p>\\n<h4 id=\\\"immutable-update\\\"><a href=\\\"#immutable-update\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Immutable Update</h4>\\n<p>New records can be created from old records with the <code>...</code> spread operator. The original record isn't mutated.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> meNextYear = {...me, age: me.age + <span class=\\\"hljs-number\\\">1</span>};</code></pre>\\n      </div>\\n<p>This update is very efficient! Try a few in our <a href=\\\"/try\\\">playground</a> to see how records are compiled.</p>\\n<p><strong>Note</strong>: spread cannot add new fields, as a record's shape is fixed by its type.</p>\\n<h4 id=\\\"mutable-update\\\"><a href=\\\"#mutable-update\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mutable Update</h4>\\n<p>Record fields can optionally be mutable. This allows you to update those fields in-place with the <code>=</code> operator.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {\\n  name: string,\\n  <span class=\\\"hljs-keyword\\\">mutable</span> age: int\\n};\\n<span class=\\\"hljs-keyword\\\">let</span> baby = {name: <span class=\\\"hljs-string\\\">\\\"Baby Reason\\\"</span>, age: <span class=\\\"hljs-number\\\">5</span>};\\nbaby.age = baby.age + <span class=\\\"hljs-number\\\">1</span>; <span class=\\\"hljs-comment\\\">/* alter `baby`. Happy birthday! */</span></code></pre>\\n      </div>\\n<h3 id=\\\"syntax-shorthand\\\"><a href=\\\"#syntax-shorthand\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Syntax shorthand</h3>\\n<p>To reduce redundancy, we provide <strong>punning</strong> for a record's types and values. You can use it when the name of a record field matches the name of its value/type.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> horsePower = {power: int, metric: bool};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> metric = <span class=\\\"hljs-literal\\\">true</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> someHorsePower = {power: <span class=\\\"hljs-number\\\">10</span>, metric};\\n<span class=\\\"hljs-comment\\\">/* same as the value {power: 10, metric: metric}; */</span>\\n\\n<span class=\\\"hljs-keyword\\\">type</span> car = {name: string, horsePower};\\n<span class=\\\"hljs-comment\\\">/* same as the type {name: string, horsePower: horsePower}; */</span></code></pre>\\n      </div>\\n<p><strong>Note that there's no punning for a single record field</strong>! <code>{foo}</code> doesn't do what you expect (it's a block that returns the value <code>foo</code>).</p>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<h4 id=\\\"interop-with-javascript\\\"><a href=\\\"#interop-with-javascript\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Interop with JavaScript</h4>\\n<p>If you're working with JavaScript, the record syntax &#x26; operations should feel familiar, and you might be tempted to interop with JS by converting a JS object to a record, and vice-versa. This is fine, but we have an <strong>even better way without conversion overhead</strong>! See <a href=\\\"https://bucklescript.github.io/bucklescript/Manual.html#_binding_to_js_objects\\\">here</a> which talks about <strong><a href=\\\"/guide/language/object\\\">Reason objects</a></strong>. Here's an example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> payload = <span class=\\\"hljs-type\\\">Js</span>.t {\\n    .\\n    name: string\\n};\\nexternal sendQuery: payload =&gt; unit = <span class=\\\"hljs-string\\\">\\\"sendQuery\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"myAjaxLibrary\\\"</span>];\\nsendQuery {<span class=\\\"hljs-string\\\">\\\"name\\\"</span>: <span class=\\\"hljs-string\\\">\\\"Reason\\\"</span>};</code></pre>\\n      </div>\\n<p>Notice the dot in the type definiton. That's is an object type notation, and has nothing to do with a record! Objects will be described in a later section.</p>\\n<h4 id=\\\"record-types-are-found-by-field-name\\\"><a href=\\\"#record-types-are-found-by-field-name\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Record Types Are Found By Field Name</h4>\\n<p>With records, you <strong>cannot</strong> say \\\"I'd like this function to take any record type, as long as they have the field <code>age</code>\\\". The following <em>works</em>, but not as expected:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {age: int, name: string};\\n<span class=\\\"hljs-keyword\\\">type</span> monster = {age: int, hasTentacles: bool};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> getAge entity =&gt; entity.age;</code></pre>\\n      </div>\\n<p>The last line's function will infer that the parameter <code>entity</code> must be of type <code>monster</code>. So the follow code's last line fails:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> kraken = {age: <span class=\\\"hljs-number\\\">9999</span>, hasTentacles: <span class=\\\"hljs-literal\\\">true</span>};\\n<span class=\\\"hljs-keyword\\\">let</span> me = {age: <span class=\\\"hljs-number\\\">5</span>, name: <span class=\\\"hljs-string\\\">\\\"Baby Reason\\\"</span>};\\n\\ngetAge kraken;\\ngetAge me;</code></pre>\\n      </div>\\n<p>The type system will complain that <code>me</code> is a <code>person</code>, and that <code>getAge</code> only works on <code>monster</code>. If you need such capability, use Reason objects, mentioned in the previous section.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>After reading the constraints in the previous sections, and if you're coming from a dynamic language background, you might be wondering why one would bother with record in the first place instead of straight using object, since the former needs explicit typing and doesn't allow different records with the same field name to be passed to the same function, etc.</p>\\n<ol>\\n<li>\\n<p>The truth is that most of the times in your app, your data's shape is actually fixed, and if it's not, it can potentially be better represented as a combination of variant (introduced next) + record instead*.</p>\\n</li>\\n<li>\\n<p>Record, since its fields are fixed, is compiled to an array with array index accesses instead of JS object (try it in the playground!). On native, it compiles to basically a region of memory where a field access is just one field lookup + one actual access, aka <strong>2 assembly instructions</strong>. The good old days where folks measured in nanoseconds...</p>\\n</li>\\n</ol>\\n<!--TODO: sharable playground  -->\\n<ol start=\\\"3\\\">\\n<li>Finally, since a record type is resolved through finding that single explicit type declaration (we call this \\\"nominal typing\\\"), the type error messages end up better than the counterpart (\\\"structural typing\\\", like for tuples). This makes refactoring easier; changing a record type's fields naturally allows the compiler to know that it's still the same record, just misused in some places. Otherwise, under structural typing, it might get hard to tell whether the definition site or the usage site is wrong.</li>\\n</ol>\\n<p>* And we're not just finding excuses for ourselves! Reason objects do support these features.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/tuple.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Tuple\",\n\t\t\t\t\t\t\t\t\t\"order\": 50\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Tuples are</p>\\n<ul>\\n<li>immutable</li>\\n<li>ordered</li>\\n<li>fix-sized at creation time</li>\\n<li>heterogeneous (can contain different types of values)</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> ageAndName = (<span class=\\\"hljs-number\\\">24</span>, <span class=\\\"hljs-string\\\">\\\"Lil' Reason\\\"</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> my3dCoordinates = (<span class=\\\"hljs-number\\\">20.0</span>, <span class=\\\"hljs-number\\\">30.5</span>, <span class=\\\"hljs-number\\\">100.0</span>);</code></pre>\\n      </div>\\n<p>Tuples' types can be used in type annotations as well. Tuple types visually resemble tuples values.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> ageAndName: (int, string) = (<span class=\\\"hljs-number\\\">24</span>, <span class=\\\"hljs-string\\\">\\\"Lil' Reason\\\"</span>);\\n<span class=\\\"hljs-comment\\\">/* a tuple type alias */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> coord3d = (float, float, float);\\n<span class=\\\"hljs-keyword\\\">let</span> my3dCoordinates: coord3d = (<span class=\\\"hljs-number\\\">20.0</span>, <span class=\\\"hljs-number\\\">30.5</span>, <span class=\\\"hljs-number\\\">100.0</span>);</code></pre>\\n      </div>\\n<p><strong>Note</strong>: there's no tuple of size 1. You'd just use the value itself.</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>The standard library provides <code>fst</code> and <code>snd</code> (<a href=\\\"/api/Pervasives.html\\\">here</a>, under \\\"Pair operations\\\"), convenience functions that allow you to access the first and second element of a 2-tuple. Generally, you'd access n-tuple members through destructuring (described later in the sidebar):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (<span class=\\\"hljs-number\\\">_</span>, y, <span class=\\\"hljs-number\\\">_</span>) = my3dCoordinates; <span class=\\\"hljs-comment\\\">/* now you've retrieved y */</span></code></pre>\\n      </div>\\n<p>The <code>_</code> means you're ignoring the indicated members of the tuple.</p>\\n<p>Tuples aren't meant to be updated mutatively; you'd create new ones by destructuring the old ones.</p>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p>You'd use tuples in handy situations that pass around multiple values without too much ceremony. For example, to return many values:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> getCenterCoordinates () =&gt; {\\n  <span class=\\\"hljs-keyword\\\">let</span> x = doSomeOperationsHere ();\\n  <span class=\\\"hljs-keyword\\\">let</span> y = doSomeMoreOperationsHere ();\\n  (x, y)\\n};</code></pre>\\n      </div>\\n<p>Or to \\\"pattern-match\\\" (covered later) on the conjunction of possibilities:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">switch</span> (isWindowOpen, isDoorOpen) { <span class=\\\"hljs-comment\\\">/* this is a 2-tuple */</span>\\n| (<span class=\\\"hljs-literal\\\">true</span>, <span class=\\\"hljs-literal\\\">true</span>) =&gt; ...\\n| (<span class=\\\"hljs-literal\\\">true</span>, <span class=\\\"hljs-literal\\\">false</span>) =&gt; ...\\n| (<span class=\\\"hljs-literal\\\">false</span>, <span class=\\\"hljs-literal\\\">true</span>) =&gt; ...\\n| (<span class=\\\"hljs-literal\\\">false</span>, <span class=\\\"hljs-literal\\\">false</span>) =&gt; ...\\n}</code></pre>\\n      </div>\\n<p>Try to keep the usage of tuple <strong>local</strong>. For data structures that are long-living and passed around often, prefer a <strong>record</strong>, which has named fields.</p>\\n<p>A tuple type might also be called a \\\"product type\\\", and <code>(string, int)</code> is written as <code>string * int</code> in some places. The idea is that a tuple is really a \\\"cartesian product\\\"; imagine a 2D grid, with <code>string</code> on the x axis and <code>int</code> on the y axis!</p>\\n<p>The combination of tuple + <code>switch</code> is very powerful and concise, and <strong>wipes out an entire category of bugs</strong>. Together, they cleanly list out all the possible combinations of values. A tuple of type <code>(bool, bool)</code> indeed has <code>2 * 2 = 4</code> possibilities, and the type system asks you to cover all 4. This lends itself well to code refactors; instead of informally adding a few if-else on arbitrary values here and there, you can directly pinpoint the exact <code>switch</code> branch you need to alter, no more and no less.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>Tuple's existence might seem odd for those coming from untyped languages. \\\"Why not just use a list/array?\\\"</p>\\n<p>A type system isn't all-powerful, nor should it be; some tasteful trade-offs need to be applied in order to keep the language simple, performant (both compilation and running speed) and easy to understand. Reason lists, for example, are more flexible in size; they can be concatenated, appended, sliced, etc. In return, they need to be homogenous (can only contain a single type of value per list), and random index access on them might not always be valid*. Tuple, on the other hand, through its constraint on size, is faster, gives the type system the leeway to exhaustively track all its items' types, and guarantees safe access. In general, you'll notice a few prominent, tasteful tradeoffs in a type system: record fields are fixed but can be heterogenous, while a map's fields are flexible but homogenous, etc.</p>\\n<p>A Reason tuple is typed \\\"structurally\\\". This means that even if you don't annotate your data with an explicit type, the compiler can still deduce it by looking at its content, its usage, etc. As long as the declarations and the usages' inferred shapes match up, you're all good!</p>\\n<p>* It's not that the Reason type system cannot accept heterogenous, dynamically-sized lists; it actually can (hint: GADT)! But making such feature the default increases both the first-time learning overhead and the understandability of code. Just because the types can accomplish it doesn't mean it's always a good idea to let some pieces of code grow unboundedly complex!</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/string-and-char.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"String & Char\",\n\t\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"string\\\"><a href=\\\"#string\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>String</h3>\\n<p>Reason strings are delimited using <strong>double</strong> quotes (single quotes are reserved for the character type below).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>let greeting = \\\"Hello world!\\\";\\nlet multilineGreeting = \\\"Hello\\n world!\\\";</code></pre>\\n      </div>\\n<p>Special characters in the string need to be escaped:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> oneSlash = <span class=\\\"hljs-string\\\">\\\"\\\\\\\\\\\"</span>;</code></pre>\\n      </div>\\n<p>To concatenate strings, use <code>^</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> greetings = <span class=\\\"hljs-string\\\">\\\"Hello \\\"</span> ^ <span class=\\\"hljs-string\\\">\\\"world!\\\"</span>;</code></pre>\\n      </div>\\n<h4 id=\\\"quoted-string\\\"><a href=\\\"#quoted-string\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Quoted String</h4>\\n<p>There's a special syntax for string that allows</p>\\n<ul>\\n<li>multiline string just like before</li>\\n<li>no special character escaping</li>\\n<li>hooks for special pre-processors</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> greetingAndOneSlash = {|<span class=\\\"hljs-type\\\">Hello</span>\\n<span class=\\\"hljs-type\\\">World</span>\\n\\\\\\n<span class=\\\"hljs-type\\\">Hehe</span>...\\n|};</code></pre>\\n      </div>\\n<p>Analogically speaking, it's like JavaScript's backtick string interpolation, except without needing to escape special chars, and without built-in interpolation of variables. Though you can trivially restore the latter functionality, <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_unicode_support_with_string_interpolation_since_1_7_0\\\">as BuckleScript has done</a>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> world = {js|世界|js}; <span class=\\\"hljs-comment\\\">/* Supports Unicode characters */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> helloWorld = {j|你好，$world|j}; <span class=\\\"hljs-comment\\\">/* Supports Unicode and interpolation variables */</span></code></pre>\\n      </div>\\n<p>BuckleScript's special pre-processor can then look for such <code>js</code> and <code>j</code> markers around the string and transforms it into something else.</p>\\n<h4 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h4>\\n<p><a href=\\\"/api/String.html\\\">More string operations can be found in the standard library</a>. For JS compilation, see the familiar <code>JS.String</code> API bindings in the <a href=\\\"http://bucklescript.github.io/bucklescript/api/Js_string.html\\\">BuckleScript API docs</a>. Since a Reason string maps to a JavaScript string, you can mix &#x26; match the string operations in both standard libraries.</p>\\n<h4 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h4>\\n<p><a href=\\\"https://twitter.com/jusrin00/status/875238742621028355\\\">https://twitter.com/jusrin00/status/875238742621028355</a></p>\\n<p><strong>You have an expressive type system now</strong>! In an untyped language, you'd often overload the meaning of string by using it as:</p>\\n<ul>\\n<li>a unique id: <code>var BLUE_COLOR = \\\"blue\\\"</code></li>\\n<li>an identifier into a data structure: <code>var BLUE = \\\"blue\\\"; var RED = \\\"red\\\"; var colors = [BLUE, RED]</code></li>\\n<li>the name of an object field: <code>person[\\\"age\\\"] = 24</code></li>\\n<li>an enum: <code>if (audio.canPlayType() === 'probably') {...}</code> <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType#Return_value\\\">(ಠ_ಠ)</a></li>\\n<li>other crazy patterns you'll soon find horrible, after getting used to Reason's alternatives.</li>\\n</ul>\\n<p>The more you overload the poor string type, the less the type system can help you! Reason provides concise, fast and maintainable types &#x26; data structures alternatives to the use-cases above (e.g. variants, in a later section).</p>\\n<p>Under native compilation, Reason strings compile to a simple representation whose performance is straightforward to analyze, at the expense of sometimes requiring manual performance tuning. For example, naively concatenating strings like <code>\\\"hi \\\" ^ \\\"how \\\" ^ \\\"are \\\" ^ \\\"you?\\\"</code> unnecessarily allocates the intermediate strings <code>\\\"are you?\\\"</code> and <code>\\\"how are you?\\\"</code>. In this case, prefer <a href=\\\"/api/String.html\\\"><code>String.concat</code></a>. In a way, it's somewhat nice that the traditional runtime analysis we've learned in school can finally be useful again.</p>\\n<p>Under JavaScript compilation, a Reason string maps to a JavaScript string and vice-versa, so no such above concern or analysis opportunities.</p>\\n<h4 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h4>\\n<p>Quoted string's feature of not escaping special characters enables neat DSLs like <a href=\\\"/api/Str.html\\\">regular expression</a>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> r = <span class=\\\"hljs-type\\\">Str</span>.regexp {|hello \\\\([<span class=\\\"hljs-type\\\">A</span>-<span class=\\\"hljs-type\\\">Za</span>-z]+\\\\)|};</code></pre>\\n      </div>\\n<p>as opposed to</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> r = <span class=\\\"hljs-type\\\">Str</span>.regexp <span class=\\\"hljs-string\\\">\\\"hello \\\\\\\\([A-Za-z]+\\\\\\\\)\\\"</span>;</code></pre>\\n      </div>\\n<p>Though for JS compilation, you'd use <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_regex_support\\\"><code>[%bs.re]</code></a> and <a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.Re.html\\\"><code>Js.Re</code></a> instead, since <code>Str</code> is not available.</p>\\n<p>Reason/OCaml's emphasis on simplicity over cleverness can be seen here through its straightforward native string implementation. An overly sophisticated string implementation can sometimes <a href=\\\"http://mrale.ph/blog/2016/11/23/making-less-dart-faster.html\\\">backfire</a>.</p>\\n<h3 id=\\\"char\\\"><a href=\\\"#char\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Char</h3>\\n<p>Reason has a type for a string with a single letter:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> firstLetterOfAlphabet = 'a';</code></pre>\\n      </div>\\n<p><strong>Note</strong>: Char doesn't support Unicode or UTF-8.</p>\\n<h4 id=\\\"tips--tricks-1\\\"><a href=\\\"#tips--tricks-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h4>\\n<p>A character <a href=\\\"/try/?reason=DYUwLgBAhhC8EHIoKA\\\">compiles to an integer ranging from 0 to 255</a>, for extra speed. You can also pattern-match (covered later) on it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> isVowel<span class=\\\"hljs-params\\\"> theChar<span class=\\\"hljs-params\\\"> </span></span></span></span>=&gt; <span class=\\\"hljs-keyword\\\">switch</span> theChar {\\n| 'a' | 'e' | 'i' | 'o' | 'u' | 'y' =&gt; <span class=\\\"hljs-literal\\\">true</span>\\n| <span class=\\\"hljs-number\\\">_</span> =&gt; <span class=\\\"hljs-literal\\\">false</span>\\n};</code></pre>\\n      </div>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/native/convert-from-ocaml.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Converting from OCaml\",\n\t\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Since Reason is just another syntax for OCaml, converting an OCaml project over is straightforward and doesn't require semantic changes. However, there are a few build setup and miscellaneous changes required.</p>\\n<h4 id=\\\"ocamlbuild---rebuild\\\"><a href=\\\"#ocamlbuild---rebuild\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>OCamlBuild -> Rebuild</h4>\\n<p>Reason comes with a drop in replacement for <code>ocamlbuild</code> called <code>rebuild</code>, that\\nwill automatically build any Reason file along with your OCaml files, with\\nno additional configuration. This allows you to add Reason files to your existing\\nOCaml project bit by bit. Wherever your script refers to <code>ocamlbuild</code>, just replace\\nit with <code>rebuild</code>.</p>\\n<h4 id=\\\"makefile\\\"><a href=\\\"#makefile\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Makefile</h4>\\n<p>If your build system executes explicit build commands, then the easiest way to\\nuse Reason with <code>ocamlopt/ocamlc</code> is by adding the following flags to each\\ncompilation step:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code><span class=\\\"hljs-comment\\\"># intf-suffix tells the compiler where to look for corresponding interface files</span>\\nocamlopt -pp refmt -intf-suffix rei -impl myFile.re\\nocamlopt -pp refmt -intf myFile.rei</code></pre>\\n      </div>\\n<p>If you are using <code>ocamlbuild</code> without <code>rebuild</code>, add the following to your\\n<code>_tags</code> file, but this likely won't be enough because <code>ocamlc</code>/<code>ocamlopt</code> will\\nneed the <code>-intf/-impl/-intf-suffix</code> flags:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code>&lt;**/*.{re,.rei}&gt;: package(reason), syntax(utf8)</code></pre>\\n      </div>\\n<h4 id=\\\"constructor-syntax-fix\\\"><a href=\\\"#constructor-syntax-fix\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Constructor Syntax Fix</h4>\\n<p>The converted Reason code may attach <code>[@implicit_arity]</code> to variant constructors, like so: <code>C 1 2 [@implicit_arity]</code>.\\nThis is due to the fact that OCaml has the ambiguous syntax where a multi-arguments\\nconstructor is expecting argument in a tuple form. So at parsing time we don't\\nknow if <code>C (1, 2)</code> in OCaml should be translated to <code>C (1, 2)</code> or <code>C 1 2</code> in Reason.\\nBy default, we will convert it to <code>C 1 2 [@implicit_arity]</code>, which tells the compiler\\nthis can be either <code>C 1 2</code> or <code>C (1, 2)</code>.</p>\\n<p>To prevent <code>[@implicit_arity]</code> from being generated, one can supply <code>--assume-explicit-arity</code>\\nto <code>refmt</code>. This forces the formatter to generate <code>C 1 2</code> instead of <code>C 1 2 [@implicit_arity]</code>.</p>\\n<p>However, since <code>C 1 2</code> requires multiple arguments, it may fail the compilation if it is actually\\na constructor with a single tuple as an argument (e.g., <code>Some</code>).\\nWe already have some internal exception rules to cover the common constructors who requires a single tuple\\nas argument so that they will be converted correctly (e.g., <code>Some (1, 2)</code> will be converted\\nto <code>Some (1, 2)</code> instead of <code>Some 1 2</code>, which doesn't compile).</p>\\n<p>To provide your own exception list, create a line-separated file that contains all constructors (without module prefix)\\nin your project that expects a single tuple as argument, and use <code>--heuristics-file &#x3C;filename></code>\\nto tell <code>refmt</code> that all constructors\\nlisted in the file will be treated as constructor with a single tuple as argument:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code>&gt; cat heuristics.txt\\n  TupleConstructor\\n  And\\n  Or</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code>&gt; cat test.ml</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tm =\\n  <span class=\\\"hljs-type\\\">TupleConstructor</span> <span class=\\\"hljs-keyword\\\">of</span> (<span class=\\\"hljs-built_in\\\">int</span> * <span class=\\\"hljs-built_in\\\">int</span>)\\n| <span class=\\\"hljs-type\\\">MultiArgumentsConstructor</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-built_in\\\">int</span> * <span class=\\\"hljs-built_in\\\">int</span>\\n<span class=\\\"hljs-keyword\\\">let</span> x = <span class=\\\"hljs-type\\\">TupleConstructor</span>(<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>)\\n<span class=\\\"hljs-keyword\\\">let</span> y = <span class=\\\"hljs-type\\\">MultiArgumentsConstructor</span>(<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>)\\n<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-type\\\">Test</span> = <span class=\\\"hljs-keyword\\\">struct</span>\\n  <span class=\\\"hljs-keyword\\\">type</span> a = | <span class=\\\"hljs-type\\\">And</span> <span class=\\\"hljs-keyword\\\">of</span> (<span class=\\\"hljs-built_in\\\">int</span> * <span class=\\\"hljs-built_in\\\">int</span>) | <span class=\\\"hljs-type\\\">Or</span> <span class=\\\"hljs-keyword\\\">of</span> (<span class=\\\"hljs-built_in\\\">int</span> * <span class=\\\"hljs-built_in\\\">int</span>)\\n<span class=\\\"hljs-keyword\\\">end</span>;;\\n<span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-type\\\">Test</span>.<span class=\\\"hljs-type\\\">And</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>)\\n<span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-type\\\">Test</span>.<span class=\\\"hljs-type\\\">Or</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>)\\n<span class=\\\"hljs-keyword\\\">let</span> c = <span class=\\\"hljs-type\\\">Some</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>)</code></pre>\\n      </div>\\n<p>Then only the constructor identifiers that were listed will be assumed to accept tuples instead of multiple arguments.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code>&gt; refmt --heuristics-file \\\\\\n    ./heuristics.txt --assume-explicit-arity \\\\\\n    --parse ml --print re test.ml</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>  <span class=\\\"hljs-keyword\\\">type</span> tm =\\n    | <span class=\\\"hljs-type\\\">TupleConstructor</span> <span class=\\\"hljs-keyword\\\">of</span> (int, int)\\n    | <span class=\\\"hljs-type\\\">MultiArgumentsConstructor</span> <span class=\\\"hljs-keyword\\\">of</span> int int;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> x = <span class=\\\"hljs-type\\\">TupleConstructor</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> y = <span class=\\\"hljs-type\\\">MultiArgumentsConstructor</span> <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-number\\\">2</span>;\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">Test</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> a = | <span class=\\\"hljs-type\\\">And</span> <span class=\\\"hljs-keyword\\\">of</span> (int, int) | <span class=\\\"hljs-type\\\">Or</span> <span class=\\\"hljs-keyword\\\">of</span> (int, int);\\n};\\n<span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-type\\\">Test</span>.<span class=\\\"hljs-type\\\">And</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-type\\\">Test</span>.<span class=\\\"hljs-type\\\">Or</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-built_in\\\">c</span> = <span class=\\\"hljs-type\\\">Some</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>);</code></pre>\\n      </div>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/native/quickstart.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p><strong>Note: the native workflow is heavily work-in-progress</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code><span class=\\\"hljs-comment\\\"># On OSX, install opam via Homebrew:</span>\\nbrew update\\nbrew install opam\\n<span class=\\\"hljs-comment\\\"># On Linux, see here (you'll need opam &gt;= 1.2.2): http://opam.ocaml.org/doc/Install.html</span>\\nopam init\\n<span class=\\\"hljs-comment\\\"># **Note**: add the line below to your ~/.bashrc or ~/.zshrc too; it's needed at every shell startup</span>\\n<span class=\\\"hljs-built_in\\\">eval</span> $(opam config env)\\nopam update\\nopam switch <span class=\\\"hljs-number\\\">4.02</span>.<span class=\\\"hljs-number\\\">3</span></code></pre>\\n      </div>\\n<p>Then clone our example <a href=\\\"https://github.com/reasonml/ReasonNativeProject\\\"><code>ReasonNativeProject</code></a> repo, and you're good to go!</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/native/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Native\",\n\t\t\t\t\t\t\t\t\t\"order\": 40\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>We currently use the default OCaml workflow to compile to native, although <a href=\\\"https://github.com/bsansouci/bsb-native\\\">there's work underway</a> to bring native compilation support to the BuckleScript builder.</p>\\n<blockquote>\\n<p><strong>Note</strong>: some parts of the native workflow likely don't work on Windows. The native workflow is currently <strong>work in progress</strong>, as we're currently focusing on polishing the JS workflow. Contribution welcome!</p>\\n</blockquote>\\n<p>Reason integrates well into existing toolchains such as <code>ocamlbuild</code>, and ships\\nwith a binary called <code>rebuild</code>, a thin wrapper around <a href=\\\"http://ocaml.org/learn/tutorials/ocamlbuild/\\\"><code>ocamlbuild</code></a>\\nthat ensures the right flags to be passed to the compiler for any files ending\\nin <code>.re</code>.</p>\\n<p>For native compilation, we use <a href=\\\"https://opam.ocaml.org\\\">OPAM</a>.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/variant.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Variant!\",\n\t\t\t\t\t\t\t\t\t\"order\": 70\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>Behold, the crown jewel of Reason data structures!</p>\\n<p>Most data structures in most languages are about \\\"this <strong>and</strong> that\\\". A variant allows us to express \\\"this <strong>or</strong> that\\\".</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> myResponseVariant =\\n| <span class=\\\"hljs-type\\\">Yes</span>\\n| <span class=\\\"hljs-type\\\">No</span>\\n| <span class=\\\"hljs-type\\\">PrettyMuch</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> areYouCrushingIt = <span class=\\\"hljs-type\\\">Yes</span>;</code></pre>\\n      </div>\\n<p><code>Yes</code>, <code>No</code> and <code>PrettyMuch</code> aren't strings, nor references, nor some special data type. They're called \\\"constructors\\\" (or \\\"tag\\\"). The <code>|</code> bar separates each constructor.</p>\\n<p><strong>Note</strong>: a variant's constructors need to be capitalized.</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>Along with a variant comes one of the most important features of Reason, the <code>switch</code> expression.</p>\\n<p>A Reason <code>switch</code> is visually similar to other languages' <code>switch</code> (aka a large <code>if/elseif/elseif...</code>). It allows you to check every possible case of a variant. To use it, enumerate every variant constructor of the particular variant you'd like to use, each followed by an <code>=></code> and the expression corresponding to that case.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-keyword\\\">switch</span> (areYouCrushingIt) {\\n| <span class=\\\"hljs-type\\\">No</span> =&gt; <span class=\\\"hljs-string\\\">\\\"No worries. Keep going!\\\"</span>\\n| <span class=\\\"hljs-type\\\">Yes</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Great!\\\"</span>\\n| <span class=\\\"hljs-type\\\">PrettyMuch</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Nice!\\\"</span>\\n};\\n<span class=\\\"hljs-comment\\\">/* message is \\\"Great!\\\" */</span></code></pre>\\n      </div>\\n<p>A variant has an extremely rich amount of type system assistance. For example, we'll give you a type error if you've forgotten to cover a case of your variant, or if two cases are redundant. Be sure to check out switch and pattern-matching in a <a href=\\\"/guide/language/pattern-matching\\\">later section</a>!</p>\\n<h4 id=\\\"variant-needs-an-explicit-definition\\\"><a href=\\\"#variant-needs-an-explicit-definition\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Variant Needs an Explicit Definition</h4>\\n<p>If the variant you're using is in a different file, bring it into scope like you'd do <a href=\\\"/guide/language/record#record-needs-an-explicit-definition\\\">for a record</a>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Zoo.re */</span>\\n\\n<span class=\\\"hljs-keyword\\\">type</span> animal = <span class=\\\"hljs-type\\\">Dog</span> | <span class=\\\"hljs-type\\\">Cat</span> | <span class=\\\"hljs-type\\\">Bird</span>;</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* example.re */</span>\\n\\n<span class=\\\"hljs-keyword\\\">let</span> pet: <span class=\\\"hljs-type\\\">Zoo</span>.animal = <span class=\\\"hljs-type\\\">Dog</span>; <span class=\\\"hljs-comment\\\">/* preferred */</span>\\n<span class=\\\"hljs-comment\\\">/* or */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> pet = <span class=\\\"hljs-type\\\">Zoo</span>.<span class=\\\"hljs-type\\\">Dog</span>;</code></pre>\\n      </div>\\n<h4 id=\\\"constructor-arguments\\\"><a href=\\\"#constructor-arguments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Constructor Arguments</h4>\\n<p>A variant's constructors can hold extra data separated by space.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> account =\\n| <span class=\\\"hljs-type\\\">None</span>\\n| <span class=\\\"hljs-type\\\">Instagram</span> string\\n| <span class=\\\"hljs-type\\\">Facebook</span> string int;</code></pre>\\n      </div>\\n<p>Here, <code>Instagram</code> holds a <code>string</code>, and <code>Facebook</code> holds a <code>string</code> and an <code>int</code>. Usage:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myAccount = <span class=\\\"hljs-type\\\">Facebook</span> <span class=\\\"hljs-string\\\">\\\"Josh\\\"</span> <span class=\\\"hljs-number\\\">26</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> friendAccount = <span class=\\\"hljs-type\\\">Instagram</span> <span class=\\\"hljs-string\\\">\\\"Jenny\\\"</span>;</code></pre>\\n      </div>\\n<p><strong>Notice how using a constructor is like calling a function</strong>? It's as if <code>Facebook</code> was a function that accepts two arguments. This isn't a coincidence; there's a reason why a constructor's data is called \\\"constructor argument\\\".</p>\\n<p>Using <code>switch</code>, you can pattern-match (again, described in a later section) a constructor's arguments:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> greeting = <span class=\\\"hljs-keyword\\\">switch</span> (myAccount) {\\n| <span class=\\\"hljs-type\\\">None</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Hi!\\\"</span>\\n| <span class=\\\"hljs-type\\\">Facebook</span> name age =&gt;\\n  <span class=\\\"hljs-string\\\">\\\"Hi \\\"</span> ^ name ^ <span class=\\\"hljs-string\\\">\\\", you're \\\"</span> ^ (string_of_int age) ^ <span class=\\\"hljs-string\\\">\\\"-year-old.\\\"</span>\\n| <span class=\\\"hljs-type\\\">Instagram</span> name =&gt; <span class=\\\"hljs-string\\\">\\\"Hello \\\"</span> ^ name ^ <span class=\\\"hljs-string\\\">\\\"!\\\"</span>\\n}</code></pre>\\n      </div>\\n<h4 id=\\\"honorable-mentions\\\"><a href=\\\"#honorable-mentions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Honorable Mentions</h4>\\n<p>The <a href=\\\"/api/index.html\\\">standard library</a> exposes two important variants you'll come to hear a lot.</p>\\n<h5 id=\\\"option\\\"><a href=\\\"#option\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>option</code></h5>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> option 'a = <span class=\\\"hljs-type\\\">None</span> | <span class=\\\"hljs-type\\\">Some</span> 'a;</code></pre>\\n      </div>\\n<p>This is the convention used to simulate a \\\"nullable\\\" (aka <code>undefined</code> or <code>null</code>) value in other languages. Thanks to this convenience type definition, Reason can default every value to be non-nullable. An <code>int</code> will always be an int, never \\\"<code>int</code> <strong>or</strong> <code>null</code> <strong>or</strong> <code>undefined</code>\\\". If you do want to express a \\\"nullable int\\\", you'd use <code>option int</code>, whose possible values are <code>None</code> or <code>Some int</code>. <code>switch</code> forces you to handle both cases; therefore, <strong>a pure Reason program doesn't have null errors</strong>.</p>\\n<h5 id=\\\"list\\\"><a href=\\\"#list\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>list</code></h5>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> list 'a = <span class=\\\"hljs-type\\\">Empty</span> | <span class=\\\"hljs-type\\\">Head</span> 'a (list 'a);</code></pre>\\n      </div>\\n<p><em>Not the actual type definition. Just an illustration</em>.</p>\\n<p>This says: \\\"a list that holds a value of type <code>a</code> (whatever it is) is either empty, or holds that value plus another list\\\".</p>\\n<p>Reason gave <code>list</code> a syntax sugar. <code>[1, 2, 3]</code> is conceptually equivalent to <code>Head 1 (Head 2 (Head 3 Empty))</code>. Once again, <code>switch</code> forces you to handle every case of this variant, including <code>Empty</code> (aka <code>[]</code>). <strong>This eliminates another big category of access bugs</strong>.</p>\\n<h5 id=\\\"other-variant-like-types\\\"><a href=\\\"#other-variant-like-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Other Variant-like Types</h5>\\n<p>Did you know that you can use <code>switch</code> on string, int, float, array, and most other data structures? Try it!</p>\\n<!-- TODO playground link -->\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p><strong>Be careful</strong> not to confuse a constructor carrying 2 arguments with a constructor carrying a single tuple argument:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> account =\\n| <span class=\\\"hljs-type\\\">Facebook</span> string int <span class=\\\"hljs-comment\\\">/* 2 arguments */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> account2 =\\n| <span class=\\\"hljs-type\\\">Instagram</span> (string, int) <span class=\\\"hljs-comment\\\">/* 1 argument - happens to be a 2-tuple */</span></code></pre>\\n      </div>\\n<h4 id=\\\"variants-must-have-constructors\\\"><a href=\\\"#variants-must-have-constructors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Variants Must Have constructors</h4>\\n<p>If you come from an untyped language, you might be tempted to try <code>type foo = int | string</code>. This isn't possible in Reason; you'd have to give each branch a constructor: <code>type foo = Int int | String int</code>. Though usually, needing this might be an anti-pattern. The Design Decisions section below explains more.</p>\\n<h4 id=\\\"interop-with-javascript\\\"><a href=\\\"#interop-with-javascript\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Interop with JavaScript</h4>\\n<p><em>This section assumes knowledge about BuckleScript's <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_ffi\\\">FFI</a>. Skip this if you haven't felt the itch to use variants for binding to JS functions yet</em>.</p>\\n<p>Quite a few JS libraries use functions that can accept many types of arguments. In these cases, it's very tempting to model them as variants. For example, suppose there's a <code>myLibrary.draw</code> JS function that takes in either a <code>number</code> or a <code>string</code>. You might be tempted to bind it like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code>/* reserved <span class=\\\"hljs-keyword\\\">for</span> internal usage */\\n<span class=\\\"hljs-keyword\\\">external</span> draw: <span class=\\\"hljs-symbol\\\">'a</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"draw\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"myLibrary\\\"</span>];\\n\\n<span class=\\\"hljs-keyword\\\">type</span> animal =\\n  | <span class=\\\"hljs-type\\\">MyFloat</span> <span class=\\\"hljs-built_in\\\">float</span>\\n  | <span class=\\\"hljs-type\\\">MyString</span> <span class=\\\"hljs-built_in\\\">string</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> betterDraw animal =&gt;\\n  switch animal {\\n  | <span class=\\\"hljs-type\\\">MyFloat</span> f =&gt; draw f\\n  | <span class=\\\"hljs-type\\\">MyString</span> s =&gt; draw s\\n  };</code></pre>\\n      </div>\\n<p>You could definitely do that, but there are better ways! For example, simply two <code>external</code>s that both compile to the same JS call:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-keyword\\\">external</span> drawFloat: <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"draw\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"myLibrary\\\"</span>];\\n<span class=\\\"hljs-keyword\\\">external</span> drawString: <span class=\\\"hljs-built_in\\\">string</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"draw\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"myLibrary\\\"</span>];</code></pre>\\n      </div>\\n<p>Or, get fancy and use an advanced feature of variant called GADT, then use BuckleScript's <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_phantom_arguments_and_ad_hoc_polymorphism\\\">phantom argument FFI feature</a>. If these words mean absolutely nothing to you, no worries; just use the previous suggestion.</p>\\n<h4 id=\\\"variant-types-are-found-by-field-name\\\"><a href=\\\"#variant-types-are-found-by-field-name\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Variant Types Are Found By Field Name</h4>\\n<p>Please refer to this <a href=\\\"/guide/language/record#record-types-are-found-by-field-name\\\">record section</a>. Variants are the same: a function can't accept an arbitrary constructor shared by two different variants. Again, such feature exists, it's called a polymorphic variant. We'll talk about this in the future =).</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>Variant in its many forms (polymorphic variant, open variant, GADT, etc.) are likely <em>the</em> feature of a type system such as Reason's. The aforementioned <code>option</code> variant, for example, obliterates the need for nullable types, a major source of bugs in other languages. Philosophically speaking, a problem is composed of many possible branches/conditions. Mishandling these conditions is the majority of what we call bugs. <strong>A type system doesn't magically eliminates bugs; it points out the unhandled conditions and asks you to cover them</strong>*. The ability to model \\\"this or that\\\" correctly is crucial.</p>\\n<p>For example, some folks wonder how the type system can safety eliminate badly formatted JSON data from propagating into their program. They don't, not by themselves! But if the parser returns the <code>option</code> type <code>None | Some actualData</code>, then you'd have to handle the <code>None</code> case explicitly in later call sites. That's all there is.</p>\\n<p>Performance-wise, a variant can potentially tremendously speed up your program's logic. Here's a piece of JavaScript:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-js\\\"><code><span class=\\\"hljs-built_in\\\">let</span> data = <span class=\\\"hljs-string\\\">'dog'</span>;\\n<span class=\\\"hljs-keyword\\\">if</span> (data === <span class=\\\"hljs-string\\\">'dog'</span>) {\\n  ...\\n} <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (data === <span class=\\\"hljs-string\\\">'cat'</span>) {\\n  ...\\n} <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (data === <span class=\\\"hljs-string\\\">'bird'</span>) {\\n  ...\\n}</code></pre>\\n      </div>\\n<p>There's a linear amount of branch checking here (<code>O(n)</code>). Compare this to using a Reason variant:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> animal = <span class=\\\"hljs-type\\\">Dog</span> | <span class=\\\"hljs-type\\\">Cat</span> | <span class=\\\"hljs-type\\\">Bird</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> data = <span class=\\\"hljs-type\\\">Dog</span>;\\n<span class=\\\"hljs-keyword\\\">switch</span> data {\\n| <span class=\\\"hljs-type\\\">Dog</span> =&gt; ...\\n| <span class=\\\"hljs-type\\\">Cat</span> =&gt; ...\\n| <span class=\\\"hljs-type\\\">Bird</span> =&gt; ...\\n}</code></pre>\\n      </div>\\n<p>The compiler sees the variant, then</p>\\n<ol>\\n<li>\\n<p>conceptually turns them into <code>type animal = 0 | 1 | 2</code></p>\\n</li>\\n<li>\\n<p>compiles <code>switch</code> to a constant-time format (<code>O(1)</code>).</p>\\n</li>\\n</ol>\\n<p>You might wonder why typed functional languages are used so often for parsing; switching on a large tree efficiently and safely is pretty much the best-case scenario for variants.</p>\\n<!-- TODO: playground link -->\\n<p>Mind blown yet? Variants have a deep connection to other fields of mathematics; <a href=\\\"https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types\\\">See here</a> for an interesting exploration.</p>\\n<p>* It's always nicer to design away the problem rather than resorting to a type system to cover the pitfalls; In reality, it's unrealistic to do so for every problem, or even just to understand every problem fully in order to design a solution. A type system allows you to safely make a big category of changes to codebases without needing to understand the whole thing upfront. In this regard, types also allows us not needing to overly design an API just to circumvent callers' simple pitfalls. They reduce the layers of abstractions needed to \\\"get things done\\\", which in return reduces callers' cognitive burden.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/editor-tools/extra-goodies.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Extra Goodies\",\n\t\t\t\t\t\t\t\t\t\"order\": 30\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"browser-extension-reason-tools\\\"><a href=\\\"#browser-extension-reason-tools\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Browser Extension: Reason-tools</h3>\\n<p><a href=\\\"https://github.com/reasonml/reason-tools\\\">Reason-tools</a> lets you quickly toggle between OCaml syntax and Reason syntax when you're browsing tutorials and documentations written in either syntax.</p>\\n<h3 id=\\\"bucklescript\\\"><a href=\\\"#bucklescript\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>BuckleScript</h3>\\n<p>You'll be seeing <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html\\\">BuckleScript</a> extensively throughout the rest of this documentation, since it's the engine that powers our JS compilation. Its global binaries are installed through <code>npm install -g bs-platform</code>.</p>\\n<h3 id=\\\"other-utilities\\\"><a href=\\\"#other-utilities\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Other Utilities</h3>\\n<p>The global installation you've done in the <a href=\\\"/guide/editor-tools/global-installation\\\">past section</a> comes with a few extra useful tools, described here.</p>\\n<h4 id=\\\"refmt\\\"><a href=\\\"#refmt\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refmt</h4>\\n<p><code>refmt</code> (\\\"Reason format\\\") is the binary that powers our editors' auto-formatting feature. It takes in your code and spits it out, nicely formatted. It also serves to convert to/from Reason/OCaml syntax. The Reason community uses it to achieve a consistent code style throughout different projects, and to avoid time-consuming manual formatting &#x26; stylistic debates. Here it is, used inside Vim:</p>\\n<img src=\\\"https://user-images.githubusercontent.com/1909539/28570942-3bd962a2-70f5-11e7-8934-1b7f249d7814.gif\\\">\\n<p>It <strong>responsively</strong> formatted the code based on the editor width (just to show a point). In other words, it doesn't just naively break to the next line at a certain characters limit; it solves the layout constrains and arranges your code accordingly.</p>\\n<p><code>refmt</code> can be used directly in the terminal. For example, to format your code outside of the editor, do <code>refmt --in-place myFile.re</code>. <strong>See <code>refmt --help</code> for all the options</strong>.</p>\\n<h4 id=\\\"merlin\\\"><a href=\\\"#merlin\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Merlin</h4>\\n<p><a href=\\\"https://github.com/ocaml/merlin\\\">Merlin</a> is the underlying engine powering type hint, refactor, real-time errors, jump to definitions, etc. to our editors. Its command line name is called <code>ocamlmerlin</code>, though you wouldn't call it manually (editors start it themselves and query it).</p>\\n<p>To configure Merlin to understand your project, you'd write a <code>.merlin</code> file at the root (documentation <a href=\\\"https://github.com/ocaml/merlin/wiki/project-configuration\\\">here</a>). <strong>For the JS workflow, this configuration is generated for you automatically by BuckleScript's <code>bsb</code>.</strong></p>\\n<h4 id=\\\"repl\\\"><a href=\\\"#repl\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>REPL</h4>\\n<p>Reason comes with a REPL called <code>rtop</code> which, once invoked, lets you interactively evaluate code. It features intelligent, type-driven autocompletion.</p>\\n<img src=\\\"https://user-images.githubusercontent.com/1909539/28570943-3bd9eb00-70f5-11e7-981c-4846719c0943.gif\\\">\\n<p>Use <code>#quit;</code> to close your REPL session.</p>\\n<p><strong>Note that <code>rtop</code> currently doesn't work easily with packages and <code>external</code>s</strong>. We recommend evaluating code inside our <a href=\\\"/try\\\">Try</a> playground.</p>\\n<h4 id=\\\"ocamlc-ocamlopt-ocamlrun-rebuild\\\"><a href=\\\"#ocamlc-ocamlopt-ocamlrun-rebuild\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ocamlc, ocamlopt, ocamlrun, rebuild</h4>\\n<p><code>ocamlc</code> and <code>ocamlopt</code> are the bare ocaml compilers.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/editor-tools/editors-plugins.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Editors Plugins\",\n\t\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p><strong>Make sure you've installed reason-cli from the previous section.</strong></p>\\n<p>Reason's nature lends itself to great editor support. Most of our editor plugins provides at minimum:</p>\\n<ul>\\n<li>Types display.</li>\\n<li>Programmatic code formatting through <code>refmt</code>.</li>\\n<li>Errors &#x26; warnings display.</li>\\n<li>Syntax highlighting.</li>\\n<li>Type-driven autocomplete.</li>\\n<li>Jump to definition.</li>\\n</ul>\\n<p>And other features. See, for example, our VSCode plugin's <a href=\\\"https://github.com/reasonml-editor/vscode-reasonml#features\\\">feature section</a>!</p>\\n<h3 id=\\\"officially-supported-editors\\\"><a href=\\\"#officially-supported-editors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Officially Supported Editors</h3>\\n<ul>\\n<li><a href=\\\"https://github.com/reasonml-editor/vscode-reasonml\\\">VSCode</a>: <strong>recommended</strong>.</li>\\n<li>\\n<p><a href=\\\"https://github.com/314eter/atom-ocaml-merlin\\\">Atom</a></p>\\n<ul>\\n<li>Please install the related packages with <code>apm install language-reason linter linter-refmt reason-refmt</code>.</li>\\n<li>Alternatively, if you use <a href=\\\"https://nuclide.io/\\\">Nuclide</a>, Reason support comes by default.</li>\\n<li>True to the spirit of JavaScript, <a href=\\\"https://github.com/zaaack/atom-ide-reason\\\">here's yet another Atom Reason plugin</a>! Actually, this one's the prospective de-facto Atom Reason plugin. If you feel adventurous, please dog food it!</li>\\n</ul>\\n</li>\\n<li><a href=\\\"https://github.com/reasonml-editor/vim-reason\\\">Vim</a></li>\\n<li><a href=\\\"https://github.com/reasonml-editor/reason-mode\\\">Emacs</a></li>\\n<li><a href=\\\"https://github.com/reasonml-editor/sublime-reason\\\">Sublime Text</a></li>\\n<li><a href=\\\"https://github.com/reasonml-editor/reasonml-idea-plugin\\\">IDEA</a></li>\\n</ul>\\n<p>The GitHub <a href=\\\"https://github.com/reasonml-editor/\\\">reasonml-editor</a> community hosts most of these plugins. If you'd like to add your favorite editor's plugin here, send us a <a href=\\\"https://github.com/reasonml/reasonml.github.io\\\">pull request</a>!</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/editor-tools/global-installation.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Global Installation\",\n\t\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p><strong>Before setting up the editor plugins</strong>, you need to install the global binaries needed by them.</p>\\n<h3 id=\\\"recommended-through-npmyarn\\\"><a href=\\\"#recommended-through-npmyarn\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>(Recommended) Through Npm/Yarn</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Platform</th>\\n<th>Install command</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>OSX</strong></td>\\n<td><code>npm install -g https://github.com/reasonml/reason-cli/archive/beta-v-1.13.6-bin-darwin.tar.gz</code></td>\\n</tr>\\n<tr>\\n<td><strong>Linux</strong></td>\\n<td><code>npm install -g https://github.com/reasonml/reason-cli/archive/beta-v-1.13.6-bin-linux.tar.gz</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p><strong><code>reason-cli</code> currently doesn't work on Windows</strong>, but it's not a hard requirement for using Reason; you still have great CLI build system diagnosis messages through BuckleScript, whose npm global package <a href=\\\"https://www.npmjs.com/package/bs-platform\\\"><code>bs-platform</code></a> does work on Windows.</p>\\n<h3 id=\\\"alternative-through-opam\\\"><a href=\\\"#alternative-through-opam\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>(Alternative) Through OPAM</h3>\\n<p><a href=\\\"https://opam.ocaml.org\\\">OPAM</a> is the native package manager for OCaml. If you come from OCaml and don't have npm/yarn, you can optionally install this way, but be careful!</p>\\n<p><strong>Make sure you're on OCaml <code>4.02.3</code></strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code>opam update\\nopam install reason.1.13.6\\nopam install merlin.2.5.4</code></pre>\\n      </div>\\n<h3 id=\\\"troubleshooting\\\"><a href=\\\"#troubleshooting\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Troubleshooting</h3>\\n<p>If your editor isn't behaving as expected with the above install, do the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-built_in\\\">which</span> ocamlmerlin refmt ocamlmerlin-reason</code></pre>\\n      </div>\\n<p>It should spit out three paths that contain the word <code>reason-cli</code>. Note: during <code>npm/yarn</code> installation, the <code>node_modules/reason-cli</code> paths may be symlinked to <code>/usr/local/bin</code> (if so, the latter will display).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code>ocamlmerlin -version</code></pre>\\n      </div>\\n<p>It should say \\\"The Merlin toolkit version 2.5.x, for Ocaml 4.02.3\\\". Not OCaml 4.03, not 4.04, etc.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/editor-tools/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Editor Setup\",\n\t\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"html\": \"<p>This section describes the tools you need to install to get a nice, friendly Reason editing environment.</p>\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"section\": \"guide\",\n\t\t\t\"sectionTitle\": \"Guide\",\n\t\t\t\"relatedFiles\": \"/^guide\\\\/.*\\\\.md$/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---guide-search-0a0c1ad6d44a0fd39cb9.js","module.exports = {\n\t\"data\": {\n\t\t\"allFile\": {\n\t\t\t\"edges\": [\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"The Reason Guide\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Here's how you start!</p>\\n<ul>\\n<li><a href=\\\"/guide/javascript/quickstart\\\">JavaScript quickstart</a></li>\\n<li><a href=\\\"/guide/native/quickstart\\\">Native quickstart</a></li>\\n<li><a href=\\\"/guide/editor-tools/global-installation\\\">Set up your editor</a></li>\\n</ul>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/examples.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Examples\",\n\t\t\t\t\t\t\t\t\"order\": 60\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>An example is worth a thousand words.</p>\\n<p>This section is dedicated to newcomers trying to figure out general idioms &#x26; conventions in Reason and BuckleScript. If you're a beginner who's got a good idea for an example, please suggest an edit!</p>\\n<h3 id=\\\"using-the-option-type\\\"><a href=\\\"#using-the-option-type\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Using the <code>option</code> type</h3>\\n<p><code>option</code> is a <a href=\\\"/guide/language/variant\\\">variant</a> that comes with the <a href=\\\"/api/index.html\\\">standard library</a>. It obviates the need for null values in other languages.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> possiblyNullValue1 = <span class=\\\"hljs-type\\\">None</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> possiblyNullValue2 = <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-string\\\">\\\"Hello@\\\"</span>;\\n\\n<span class=\\\"hljs-keyword\\\">switch</span> possiblyNullValue2 {\\n| <span class=\\\"hljs-type\\\">None</span> =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"Nothing to see here.\\\"</span>\\n| <span class=\\\"hljs-type\\\">Some</span> message =&gt; print_endline message\\n};</code></pre>\\n      </div>\\n<h3 id=\\\"creating-a-parametrized-type\\\"><a href=\\\"#creating-a-parametrized-type\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creating a parametrized type</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> universityStudent = {gpa: float};\\n\\n<span class=\\\"hljs-keyword\\\">type</span> response 'studentType = {status: int, student: 'studentType};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> result: response universityStudent = fetchDataFromServer ();</code></pre>\\n      </div>\\n<h3 id=\\\"creating-a-js-object\\\"><a href=\\\"#creating-a-js-object\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creating a JS Object</h3>\\n<p>Assuming you're <a href=\\\"/guide/javascript\\\">compiling to JS</a>, of course.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> obj1 = {\\n  <span class=\\\"hljs-string\\\">\\\"name\\\"</span>: <span class=\\\"hljs-string\\\">\\\"John\\\"</span>,\\n  <span class=\\\"hljs-string\\\">\\\"age\\\"</span>: <span class=\\\"hljs-number\\\">30</span>\\n};\\n<span class=\\\"hljs-comment\\\">/* Compiles to a JS object that looks exactly like what you're seeing */</span></code></pre>\\n      </div>\\n<p>Note that the above isn't a record; the keys are quoted in string. That's Reason syntax sugar for <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_create_js_objects_using_bs_obj\\\">bs.obj</a>. The type is inferred. Next example explicitly types it.</p>\\n<h3 id=\\\"typing-a-js-object\\\"><a href=\\\"#typing-a-js-object\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Typing a JS Object</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> payload = <span class=\\\"hljs-type\\\">Js</span>.t {.\\n  name: string,\\n  age: int\\n};\\n<span class=\\\"hljs-keyword\\\">let</span> obj1: payload = {<span class=\\\"hljs-string\\\">\\\"name\\\"</span>: <span class=\\\"hljs-string\\\">\\\"John\\\"</span>, <span class=\\\"hljs-string\\\">\\\"age\\\"</span>: <span class=\\\"hljs-number\\\">30</span>};</code></pre>\\n      </div>\\n<p>Note that <code>{. name: string, age: int}</code> is the syntax for a Reason/OCaml object type declaration (not a record!). It's lifted into <code>Js.t</code> so that BuckleScript sees the whole type and compiles it correctly to a regular JavaScript object. Ordinary, non-lifted OCaml objects are compiled into something else (rarely needed currently).</p>\\n<h3 id=\\\"binding-to-a-js-module-with-default-export\\\"><a href=\\\"#binding-to-a-js-module-with-default-export\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Binding to a JS Module with Default Export</h3>\\n<p>Assuming the module's called <code>store.js</code>, and has a default export, plus a method called <code>getDate</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> store = <span class=\\\"hljs-type\\\">Js</span>.t {. getDate : (unit =&gt; float) [@bs.meth]};\\nexternal store : store = <span class=\\\"hljs-string\\\">\\\"./store\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span>];\\n<span class=\\\"hljs-type\\\">Js</span>.log store;\\n<span class=\\\"hljs-type\\\">Js</span>.log (store##getDate ());</code></pre>\\n      </div>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/ocaml.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Comparison to OCaml\",\n\t\t\t\t\t\t\t\t\"order\": 50\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>If you come from OCaml or are a newcomer reading a tutorial written on OCaml, this guide's for you! But don't forget that <a href=\\\"https://github.com/reasonml/reason-tools\\\">reason-tools</a> can convert between OCaml and Reason syntax on the fly.</p>\\n<h3 id=\\\"comments\\\"><a href=\\\"#comments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Comments</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>(* OCaml (*nest*) *)</code></td>\\n<td><code>/* Reason /*nest*/ */</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"operator-renaming\\\"><a href=\\\"#operator-renaming\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Operator Renaming</h3>\\n<p>Reason has all of OCaml's infix operators, but a couple of operators are expressed differently. In Reason, structural equality is written as <code>==</code>, and reference (physical) equality is written as <code>===</code>. In Reason, to achieve the corresponding inequality, simply swap the first character with a <code>!</code> character. (<code>!=</code> for structural inequality, and <code>!==</code> for reference inequality).</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Equality</th>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Structural</td>\\n<td><code>x = y</code></td>\\n<td><code>x == y</code></td>\\n</tr>\\n<tr>\\n<td>Reference</td>\\n<td><code>x == y</code></td>\\n<td><code>x === y</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<table>\\n<thead>\\n<tr>\\n<th>Inequality</th>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Structural</td>\\n<td><code>x &#x3C;> y</code></td>\\n<td><code>x != y</code></td>\\n</tr>\\n<tr>\\n<td>Reference</td>\\n<td><code>x != y</code></td>\\n<td><code>x !== y</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"local-scope\\\"><a href=\\\"#local-scope\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Local Scope</h3>\\n<p>Reason's lexical scoping is exactly the same as OCaml's, but let bindings syntactically resemble \\\"block scope\\\" which is more familiar to many developers. In Reason, they are created with <code>{}</code> braces, which may contain both <code>let</code> bindings and imperative commands, separated by <code>;</code>. All blocks evaluate to the last line and the semicolon on the last line is optional. <code>{}</code> braces are only needed if you have more than one item to chain together via <code>;</code>.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet _ =\\n  let msg = \\\"Hello\\\" in\\n  print_string msg;\\n  let msg2 = \\\"Goodbye\\\" in\\n  print_string msg2</pre>\\n    </td>\\n    <td>\\n      <pre>\\n{\\n  let msg = \\\"Hello\\\";\\n  print_string msg;\\n  let msg2 = \\\"Goodbye\\\";\\n  print_string msg2\\n};</pre>\\n    </td>\\n  </tr>\\n</table>\\n<p>Reason's <code>{}</code> syntax removes many commonly reported pain points in OCaml's syntax:</p>\\n<ul>\\n<li>Double semicolons are removed entirely.</li>\\n<li><code>begin</code>/<code>end</code> is removed entirely.</li>\\n<li>Infamous imperative parsing <a href=\\\"https://github.com/ocaml/ocaml/pull/278\\\">issues</a> are gone.</li>\\n<li>Module bodies and local scope are unified.</li>\\n</ul>\\n<h3 id=\\\"local-scope-vs-module-body\\\"><a href=\\\"#local-scope-vs-module-body\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Local Scope Vs. Module Body</h3>\\n<p>In Reason, everything that can go between the <code>{}</code> in <a href=\\\"#local-scope\\\">Local Scopes</a> and in module bodies. You can usually even cut/paste code between the two contexts. In OCaml, the syntaxes for the two contexts are very different. Local scope requires trailing <code>in</code>, but module bodies do not and some imperative statements must be assigned to <code>_</code> or <code>()</code>, or else use double <code>;;</code>.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml Module Body</p></th><th scope=\\\"col\\\"><p>Reason Module Body</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet ten = 10\\nlet () = imperativeFunc ten ten\\nlet () = imperativeFunc 0 0</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet ten = 10;\\nimperativeFunc ten ten;\\nimperativeFunc 0 0;</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet ten = 10;;\\nimperativeFunc ten ten;;\\nimperativeFunc 0 0;;</pre>\\n    </td>\\n    <td>Same as above</td>\\n  </tr>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml Local Scope</p></th><th scope=\\\"col\\\"><p>Reason Local Scope</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet ten = 10 in\\nlet _ = imperativeFunc ten ten in\\nimperativeFunc 0 0</pre>\\n    </td>\\n    <td>\\n       same as above\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet ten = 10 in begin\\n  imperativeFunc ten ten;\\n  imperativeFunc 0 0\\nend</pre>\\n    </td>\\n    <td>\\n       same as above\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet ten = 10 in (\\n  imperativeFunc ten ten;\\n  imperativeFunc 0 0\\n)</pre>\\n    </td>\\n    <td>\\n       same as above\\n    </td>\\n  </tr>\\n</table>\\n<h3 id=\\\"tuple-and-record\\\"><a href=\\\"#tuple-and-record\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tuple and Record</h3>\\n<p>In Reason, tuples always require parentheses.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let tup = 4, 5</code></td>\\n<td><code>let tup = (4, 5);</code></td>\\n</tr>\\n<tr>\\n<td><code>let tup = ((1: int), (2:int))</code></td>\\n<td><code>let tup = (1: int, 2:int);</code></td>\\n</tr>\\n<tr>\\n<td><code>fun ((a: int), (b: int)) -> a</code></td>\\n<td><code>fun (a: int, b: int) => a;</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>In Reason, record values resemble JavaScript, using <code>:</code> instead of <code>=</code>. Because Reason tuples always require wrapping parens, records may contain lambdas as values without needing extra parens.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet myRec = {x = 0; y = 10}</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet myRec = {x: 0, y: 10};</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet myFuncs = {\\n  myFun = (fun x -> x + 1);\\n  your = (fun a b -> a + b);\\n}</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet myFuncs = {\\n  myFun: fun x => x + 1,\\n  your: fun a b => a + b\\n};</pre>\\n    </td>\\n</table>\\n<h3 id=\\\"lists\\\"><a href=\\\"#lists\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Lists</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let list = [1; 2; 3]</code></td>\\n<td><code>let list = [1, 2, 3]</code></td>\\n</tr>\\n<tr>\\n<td><code>let list = hd :: tl</code></td>\\n<td><code>let list = [hd, ...tl];</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"type-definitions\\\"><a href=\\\"#type-definitions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Type Definitions</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml Tuple</th>\\n<th>Reason Tuple</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>type tuple = int * int</code></td>\\n<td><code>type tuple = (int, int);</code></td>\\n</tr>\\n<tr>\\n<td><code>let tup: tuple = (10, 30)</code></td>\\n<td><code>let tup: tuple = (10, 30);</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml Record</th>\\n<th>Reason Record</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>type r = {x: int; y: int}</code></td>\\n<td><code>type r = {x: int, y: int};</code></td>\\n</tr>\\n<tr>\\n<td><code>let myRec: r = {x = 0; y = 10}</code></td>\\n<td><code>let myRec: r = {x: 0, y: 10};</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml Function</th>\\n<th>Reason Function</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>type func = int -> int</code></td>\\n<td><code>type func = int => int;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x: func = fun a -> a + 1</code></td>\\n<td><code>let x: func = fun a => a + 1;</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"functions\\\"><a href=\\\"#functions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Functions</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let x a b = e</code></td>\\n<td><code>let x a b => e;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = fun a b -> e</code></td>\\n<td><code>let x = fun a b => e;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = fun a -> fun b -> e</code></td>\\n<td><code>let x = fun a => fun b => e;</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"single-argument-match-functions\\\"><a href=\\\"#single-argument-match-functions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Single argument match functions</h4>\\n<p>OCaml has a function definition (<code>function |</code>) which is considered to be\\nequivalent of <code>function a -> match a with ...</code>. Reason has the same, but\\nthe syntax makes it clear how it is actually an extension of a single argument\\nfunction. The single case match is a natural extension of the simple lambda,\\nand the multicase lambda is a natural extension of the single case lambda.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>Form</p></th><th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      lambda\\n    </td>\\n    <td>\\n      <pre>\\nfun pat -> e</pre>\\n    </td>\\n    <td>\\n      <pre>\\nfun pat => e</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      one match case\\n    </td>\\n    <td>\\n      <pre>\\nfunction | pat -> e</pre>\\n    </td>\\n    <td>\\n      <pre>\\nfun | pat => e</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      many cases\\n    </td>\\n    <td>\\n      <pre>\\nfunction | pat -> e\\n         | pat2 -> e</pre>\\n    </td>\\n    <td>\\n      <pre>\\nfun | pat => e\\n    | pat2 => e</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h4 id=\\\"annotating-arguments\\\"><a href=\\\"#annotating-arguments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Annotating Arguments</h4>\\n<p>In both Reason and OCaml, arguments are annotated with types by (as with\\neverything else), wrapping them in parenthesis after appending\\n<code>:typeAnnotation</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> (arg<span class=\\\"hljs-params\\\"> :<span class=\\\"hljs-params\\\"> argType)<span class=\\\"hljs-params\\\"> </span></span></span></span></span>=&gt; returnValue;</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> (arg<span class=\\\"hljs-params\\\"> :<span class=\\\"hljs-params\\\"> argType)<span class=\\\"hljs-params\\\"> </span></span></span></span></span>=&gt; <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> (arg2<span class=\\\"hljs-params\\\"> :<span class=\\\"hljs-params\\\"> arg2Type)<span class=\\\"hljs-params\\\"> </span></span></span></span></span>=&gt; returnValue;</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> (arg<span class=\\\"hljs-params\\\"> :<span class=\\\"hljs-params\\\"> argType)<span class=\\\"hljs-params\\\"> (arg2<span class=\\\"hljs-params\\\"> :<span class=\\\"hljs-params\\\"> arg2Type)<span class=\\\"hljs-params\\\"> </span></span></span></span></span></span></span></span>=&gt; returnValue;</code></pre>\\n      </div>\\n<p>Both Reason and OCaml allow annotating the return type, when using the\\n\\\"super sugared let binding\\\" form.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-comment\\\">(* OCaml *)</span>\\n<span class=\\\"hljs-keyword\\\">let</span> myFunc (a:<span class=\\\"hljs-built_in\\\">int</span>) (b:<span class=\\\"hljs-built_in\\\">int</span>) :<span class=\\\"hljs-built_in\\\">int</span> * <span class=\\\"hljs-built_in\\\">int</span> = (a, b)\\n<span class=\\\"hljs-keyword\\\">let</span> myFunc (a:<span class=\\\"hljs-built_in\\\">int</span>) (b:<span class=\\\"hljs-built_in\\\">int</span>) :<span class=\\\"hljs-built_in\\\">int</span> <span class=\\\"hljs-built_in\\\">list</span> = [<span class=\\\"hljs-number\\\">1</span>]\\n<span class=\\\"hljs-keyword\\\">let</span> myFunc (a:<span class=\\\"hljs-built_in\\\">int</span>) (b:<span class=\\\"hljs-built_in\\\">int</span>) :<span class=\\\"hljs-built_in\\\">int</span> -&gt; <span class=\\\"hljs-built_in\\\">int</span> = <span class=\\\"hljs-keyword\\\">fun</span> x -&gt; x + a + b</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Reason */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> myFunc (a:int) (b:int) :(int, int) =&gt; (a, b);\\n<span class=\\\"hljs-keyword\\\">let</span> myFunc (a:int) (b:int) :list int =&gt; [<span class=\\\"hljs-number\\\">1</span>];\\n<span class=\\\"hljs-keyword\\\">let</span> myFunc (a:int) (b:int) :(int =&gt; int) =&gt; <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> x<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; x + a + b;</code></pre>\\n      </div>\\n<p>Because we're using <code>=></code> for all functions everywhere in Reason, there's\\none case where we need to add extra parens around a return type that is\\nitself a function type.</p>\\n<h4 id=\\\"type-parameters\\\"><a href=\\\"#type-parameters\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Type Parameters</h4>\\n<h5 id=\\\"ocaml\\\"><a href=\\\"#ocaml\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>OCaml</h5>\\n<p>OCaml's type applications (think \\\"generics\\\"), are applied in reverse order.</p>\\n<p>With OCaml, there are some unintuitive consequences of this.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> x: <span class=\\\"hljs-built_in\\\">int</span> <span class=\\\"hljs-built_in\\\">list</span> = [<span class=\\\"hljs-number\\\">2</span>]\\n\\n<span class=\\\"hljs-keyword\\\">type</span> listOfListOfInts = <span class=\\\"hljs-built_in\\\">int</span> <span class=\\\"hljs-built_in\\\">list</span> <span class=\\\"hljs-built_in\\\">list</span>\\n\\n<span class=\\\"hljs-comment\\\">(* Parsed as: *)</span>\\n<span class=\\\"hljs-keyword\\\">type</span> listOfListOfInts = (<span class=\\\"hljs-built_in\\\">int</span> <span class=\\\"hljs-built_in\\\">list</span>) <span class=\\\"hljs-built_in\\\">list</span></code></pre>\\n      </div>\\n<p>Things get even more strange when type constructors accept multiple parameters.\\nMultiple arguments require parenthesis and commas to separate type parameters,\\nbut those parentheses don't represent tuples. The parentheses/comma form must\\nalso be given when constructing type instances such as <code>(int, string) tuple</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">type</span> (<span class=\\\"hljs-symbol\\\">'a</span>, <span class=\\\"hljs-symbol\\\">'b</span>) tuple = <span class=\\\"hljs-symbol\\\">'a</span> * <span class=\\\"hljs-symbol\\\">'b</span>\\n\\n<span class=\\\"hljs-keyword\\\">type</span> listOfTuplesOfStringAndInt = (<span class=\\\"hljs-built_in\\\">string</span>, <span class=\\\"hljs-built_in\\\">int</span>) tuple <span class=\\\"hljs-built_in\\\">list</span>\\n\\n<span class=\\\"hljs-comment\\\">(* Which is parsed as: *)</span>\\n<span class=\\\"hljs-keyword\\\">type</span> listOfTuplesOfStringAndInt = ((<span class=\\\"hljs-built_in\\\">string</span>, <span class=\\\"hljs-built_in\\\">int</span>) tuple) <span class=\\\"hljs-built_in\\\">list</span>\\n\\n<span class=\\\"hljs-comment\\\">(* Which allows a list of (tuples of (string and int)) *)</span>\\n<span class=\\\"hljs-keyword\\\">let</span> tuples: listOfTuplesOfStringAndInt = [(<span class=\\\"hljs-string\\\">\\\"asdf\\\"</span>, <span class=\\\"hljs-number\\\">3</span>)]</code></pre>\\n      </div>\\n<h5 id=\\\"reason\\\"><a href=\\\"#reason\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reason</h5>\\n<p>In summary, Reason unifies almost all of the syntax into simple \\\"function\\napplication\\\" style meaning that type parameters follow the same space-separated\\nlist pattern seen everywhere else in the syntax. As with everything else,\\nparentheses may be used to enforce precedence. This results in fewer syntactic\\npatterns to learn.</p>\\n<p>For example, you can imagine <code>list</code> being a \\\"function\\\" for types that accepts a\\ntype and returns a new type.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet x: int list = [2]\\ntype listOfListOfInts = int list list\\ntype ('a, 'b) tup = ('a * 'b)\\ntype pairs = (int, int) tup list\\nlet tuples: pairs = [(2, 3)]</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet x: list int = [2];\\ntype listOfListOfInts = list (list int);\\ntype tup 'a 'b = ('a, 'b);\\ntype pairs = list (tup int int);\\nlet tuples: pairs = [(2, 3)];</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h3 id=\\\"tuples-as-type-parameters\\\"><a href=\\\"#tuples-as-type-parameters\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tuples as Type Parameters</h3>\\n<p>Because OCaml uses parens and commas to represent multiple arguments to type\\nconstructors, it's confusing when one of the arguments to a type constructor is\\nitself a tuple. In OCaml, it's difficult to remember the difference between a\\ntype constructor accepting multiple arguments and a type constructor accepting\\na single argument which happens to be a tuple.</p>\\n<p>The following examples shows the difference between passing <em>two</em> type\\nparameters to <code>pair</code>, and a <em>single</em> type parameter that happens to be a tuple.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>type intPair = (int, int) pair</code></td>\\n<td><code>type intPair = pair int int;</code></td>\\n</tr>\\n<tr>\\n<td><code>type pairList = (int * int) list</code></td>\\n<td><code>type pairList = list (int, int);</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<ul>\\n<li>In Reason, syntax that represent tuple or tuple types, always looks like\\ntuples.</li>\\n<li>In Reason, syntax that represent records or record types, always look like\\nrecords.</li>\\n<li>Just about everything else uses the syntactic pattern of function application\\n(space separated arguments).</li>\\n</ul>\\n<h3 id=\\\"variants\\\"><a href=\\\"#variants\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Variants</h3>\\n<h6 id=\\\"ocaml-1\\\"><a href=\\\"#ocaml-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>OCaml</h6>\\n<ul>\\n<li>OCaml already expects constructor argument types to be specified in tuple\\nform, so it's confusing when a single constructor expects a single argument\\nthat <em>happens</em> to be a tuple type.</li>\\n<li>What's even more confusing is that the constructors don't <em>actually</em> accept\\ntuples, yet the syntax appear to resemble tuples.</li>\\n<li>Sometimes the syntax for instantiating a constructor with multiple arguments\\noverlaps the syntax for constructing a variant with a single argument that\\nhappens to be a tuple - so it looks <em>exactly</em> like you <em>are</em> supplying a\\ntuple when you are not actually supplying a tuple.</li>\\n</ul>\\n<h6 id=\\\"reason-1\\\"><a href=\\\"#reason-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reason</h6>\\n<ul>\\n<li>Variant constructor types are expected to be listed as space separated lists,\\nusing parenthesis to group precedence (as with <strong>everything</strong> else).</li>\\n<li>Constructing instances of the variant (as you would have guessed) follows\\nfunction application style (space separated lists).</li>\\n<li>Tuples <strong>always</strong> <em>look</em> like tuples, and anything that looks like a tuple\\n<em>is</em> a tuple.</li>\\n</ul>\\n<table>\\n  <thead>\\n    <tr>\\n      <th scope=\\\"col\\\">\\n        <p>OCaml</p>\\n      </th>\\n      <th scope=\\\"col\\\">\\n        <p>Reason</p>\\n      </th>\\n    </tr>\\n  </thead>\\n  <tr>\\n    <td>\\n      <pre>\\ntype myVariant =\\n  | HasNothing\\n  | HasSingleInt of int\\n  | HasSingleTuple of (int * int)\\n  | HasMultipleInts of int * int\\n  | HasMultipleTuples of (int * int) * (int * int)\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\ntype myVariant =\\n  | HasNothing\\n  | HasSingleInt int\\n  | HasSingleTuple (int, int)\\n  | HasMultipleInts int int\\n  | HasMultipleTuples (int, int) (int, int);\\n      </pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet a = HasSingleInt 10\\nlet a = HasSingleTuple (10, 10)\\nlet a = HasMultipleInts (10, 10)\\nlet a = HasMultipleTuples ((10, 10), (10, 10))\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet a = HasSingleInt 10;\\nlet a = HasSingleTuple (10, 10);\\nlet a = HasMultipleInts 10 10;\\nlet a = HasMultipleTuples (10, 10) (10, 10);\\n      </pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet res = match x with\\n  | HasNothing -> 0\\n  | HasSingleInt x -> 0\\n  | HasSingleTuple (x, y) -> 0\\n  | HasMultipleInts (x, y) -> 0\\n  | HasMultipleTuples ((x, y), (q, r)) -> 0\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet res = switch x {\\n| HasNothing => 0\\n| HasSingleInt x => 0\\n| HasSingleTuple (x, y) => 0\\n| HasMultipleInts x y => 0\\n| HasMultipleTuples (x, y) (q, r) => 0\\n};\\n      </pre>\\n    </td>\\n  </tr>\\n</table>\\n<h3 id=\\\"pattern-matching\\\"><a href=\\\"#pattern-matching\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Pattern Matching</h3>\\n<p>Can you spot the error in the OCaml example? This is one of the most common mistakes among OCaml programmers. The second <code>match</code> <em>must</em> be wrapped in parentheses, otherwise the <code>Some</code> case is parsed as belonging to the outer <code>match</code>. Reason's required <code>{}</code> blocks around match cases prevent this issue.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml (BROKEN)</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet res = match x with\\n  | A (x, y) -> match y with\\n    | None -> 0\\n    | Some i -> 10\\n  | B (x, y) -> 0</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet res = switch x {\\n  | A (x, y) => switch y {\\n    | None => 0\\n    | Some i => 10\\n  }\\n  | B x y => 0\\n};</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h3 id=\\\"modules-and-signatures\\\"><a href=\\\"#modules-and-signatures\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Modules and Signatures</h3>\\n<h4 id=\\\"definition\\\"><a href=\\\"#definition\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Definition</h4>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nmodule type MySig = sig\\n  type t = int\\n  val x: int\\nend\\nmodule MyModule: MySig = struct\\n  type t = int\\n  let x = 10\\nend\\nmodule MyModule = struct\\n  module NestedModule = struct\\n     let msg = \\\"hello\\\";\\n  end\\nend\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\nmodule type MySig = {\\n  type t = int;\\n  let x: int;\\n};\\nmodule MyModule: MySig = {\\n  type t = int;\\n  let x = 10;\\n};\\nmodule MyModule = {\\n  module NestedModule = {\\n     let msg = \\\"hello\\\";\\n  };\\n};\\n      </pre>\\n    </td>\\n  </tr>\\n</table>\\n<h4 id=\\\"functors-types\\\"><a href=\\\"#functors-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Functors Types</h4>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nmodule type FType =\\n  functor (A: ASig) ->\\n  functor (B: BSig) -> Result\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\nmodule type FType =\\n  (A: ASig) =>\\n  (B: BSig) => Result;\\n      </pre>\\n    </td>\\n  </tr>\\n</table>\\n<h3 id=\\\"functors\\\"><a href=\\\"#functors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Functors</h3>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nmodule F =\\n  functor (A: ASig) ->\\n  functor (B: BSig) -> struct end</pre>\\n    </td>\\n    <td>\\n      <pre>\\nmodule F =\\n  fun (A: ASig) =>\\n  fun (B: BSig) => {};</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nmodule F = functor (A: ASig) (B: BSig) -> struct end</pre>\\n    </td>\\n    <td>\\n      <pre>\\nmodule F = fun (A: ASig) (B: BSig) => {};</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nmodule F (A: ASig) (B: BSig) = struct end</pre>\\n    </td>\\n    <td>\\n      <pre>\\nmodule F (A: ASig) (B: BSig) => {};</pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nmodule Res = F(A)(B)</pre>\\n    </td>\\n    <td>\\n      <pre>\\nmodule Res = F A B;</pre>\\n    </td>\\n  </tr>\\n</table>\\n<p><strong>Note: There is currently a known inconsistency where functors do not\\nconform to function application syntax when in type annotation position - see\\n<a href=\\\"https://github.com/facebook/reason\\\">the Reason repo's</a> <code>formatTest/modules.re</code>.</strong></p>\\n<h3 id=\\\"various-improvements\\\"><a href=\\\"#various-improvements\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Various Improvements</h3>\\n<p>OCaml doesn't require parens around sequences <code>(a;b;c;d)</code> or tuples <code>(x,y)</code>, so\\nthat ends up ruling out a bunch of other very convenient syntax rules.  Since\\nReason always uses <code>{}</code> to enclose sequences or let bindings, and Reason\\nalways requires <code>()</code> around tuples, many other syntax constructs are expressed\\nmore intuitively, without requiring extra wrapping in parenthesis.</p>\\n<h4 id=\\\"lambdas-as-record-fields-no-longer-need-extra-parens\\\"><a href=\\\"#lambdas-as-record-fields-no-longer-need-extra-parens\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Lambdas as record fields no longer need extra parens</h4>\\n<p>This is a welcomed improvement because the OCaml type errors the user would\\nsee were very confusing when it would believe the function's return value\\nwas a tuple with infix <code>,</code> comma.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet myFuncs = {\\n  myFun = (fun x -> x + 1);\\n  your = (fun a b -> a + b);\\n}</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet myFuncs = {\\n  myFun: fun x => x + 1,\\n  your: fun a b => a + b\\n}</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h4 id=\\\"lambdas-as-match-results-no-longer-need-extra-parens\\\"><a href=\\\"#lambdas-as-match-results-no-longer-need-extra-parens\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Lambdas as match results no longer need extra parens</h4>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet x = match prnt with\\n  | None -> fun a -> blah\\n  (* Extra () required ! *)\\n  | Some \\\"_\\\" -> (fun a -> ())\\n  | Some \\\"ml\\\" -> blah\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet x = switch prnt {\\n| None => fun a => blah\\n| Some \\\"_\\\" => fun a => ()\\n| Some \\\"ml\\\" => blah\\n};</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h4 id=\\\"lambdas-and-type-annotations-in-tuples-no-longer-require-extra-parens\\\"><a href=\\\"#lambdas-and-type-annotations-in-tuples-no-longer-require-extra-parens\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Lambdas and type annotations in tuples no longer require extra parens</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let tuple = ((fun x -> x), 20)</code></td>\\n<td><code>let tuple = (fun x => x, 20);</code></td>\\n</tr>\\n<tr>\\n<td><code>let tuple = ((\\\"hi\\\": string), (20: int))</code></td>\\n<td><code>let tuple = (\\\"hi\\\": string, 20: int);</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"various-differences\\\"><a href=\\\"#various-differences\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Various Differences</h3>\\n<h4 id=\\\"as-precedence\\\"><a href=\\\"#as-precedence\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>as</code> precedence</h4>\\n<p>With Reason, <code>as</code> has a higher precedence than <code>|</code> bar. This allows creating <code>as</code> aliases\\nfor entire rows in pattern matching.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p>OCaml</p></th><th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet ppp = match MyThing 20 with\\n  | (MyThing x as ppp)\\n  | (YourThing x as ppp) -> ppp;\\n      </pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet ppp = switch (MyThing 20) {\\n| MyThing x as ppp\\n| YourThing x as ppp => ppp;\\n};\\n      </pre>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>\\n      <pre>\\nlet | (MyThing _ as ppp)\\n    | (YourThing _ as ppp) = ppp;</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet | MyThing _ as ppp\\n    | YourThing _ as ppp = ppp;</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h4 id=\\\"mutable-record-field-updates\\\"><a href=\\\"#mutable-record-field-updates\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mutable Record Field Updates</h4>\\n<p>Because equalities and their negations have been made more consistent in Reason,\\nthe <code>=</code> operator is available for mutable field update.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>myRec.field &#x3C;- \\\"next\\\"</code></td>\\n<td><code>myRec.field = \\\"next\\\"</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"prefix-operators\\\"><a href=\\\"#prefix-operators\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Prefix operators</h4>\\n<p>In Reason, <code>!</code> and other prefix operators have lower precedence than dot <code>.</code> or send <code>#</code>.\\nThis is more consistent with what other languages do, and is more practical\\nwhen (or if) the <code>!</code> symbol is used to represent boolean <code>not</code>.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let x = !(foo.bar)</code></td>\\n<td><code>let x = !foo.bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !(foo#bar)</code></td>\\n<td><code>let x = !foo#bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !(!foo.bar)</code></td>\\n<td><code>let x = !(!foo).bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !(!foo#bar)</code></td>\\n<td><code>let x = !(!foo)#bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !(!(foo.bar))</code></td>\\n<td><code>let x = !(!foo.bar);</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !(!(foo#bar))</code></td>\\n<td><code>let x = !(!foo#bar);</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !!(foo.bar)</code></td>\\n<td><code>let x = !!foo.bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !!(foo#bar)</code></td>\\n<td><code>let x = !!foo#bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !~(foo.bar)</code></td>\\n<td><code>let x = !~foo.bar;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = !~(foo#bar)</code></td>\\n<td><code>let x = !~foo#bar;</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"comment-escaping\\\"><a href=\\\"#comment-escaping\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Comment Escaping</h4>\\n<p>Because Reason uses C-style comments, some obscure custom prefix/infix\\noperators must be written differently.  The rules for prefix/infix operators\\nare the same as in OCaml syntax, but with the following exceptions:</p>\\n<p>Specifically, if any character except the first in an prefix/infix operator is\\na star or forward slash, that must be first escaped with a backslash. These will\\nbe parsed <em>without</em> the backslash when added to the AST. When reprinted, the\\nescape backslashes are added back in automatically.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let (/*) a b = a + b</code></td>\\n<td><code>let (/\\\\*) a b => a + b;</code></td>\\n</tr>\\n<tr>\\n<td><code>let x = 12 /-* 23 /-* 12</code></td>\\n<td><code>let x = 12 /-\\\\* 23 /-\\\\* 12;</code></td>\\n</tr>\\n<tr>\\n<td><code>let y = (/*) a b</code></td>\\n<td><code>let y = (/\\\\*) a b;</code></td>\\n</tr>\\n<tr>\\n<td><code>let (!=*) q r => q + r</code></td>\\n<td><code>let (!=\\\\*) q r => q + r;</code></td>\\n</tr>\\n<tr>\\n<td><code>let res = q (!=*) r</code></td>\\n<td><code>let res = q (!=\\\\*) r;</code></td>\\n</tr>\\n<tr>\\n<td><code>let (!=/*) q r = q + r</code></td>\\n<td><code>let (!=\\\\/\\\\*) q r => q + r;</code></td>\\n</tr>\\n<tr>\\n<td><code>let res = q (!=/*) r</code></td>\\n<td><code>let res = q (!=\\\\/\\\\*) r;</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"operator-renaming-1\\\"><a href=\\\"#operator-renaming-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Operator Renaming</h4>\\n<p>If Reason uses <code>==</code> to represent OCaml's <code>=</code>, and\\nuses <code>===</code> to represent OCaml's <code>==</code>, then how would Reason represent OCaml's\\n<code>===</code> symbol (if it were defined)? Reason provides a way! \\\"Escape\\\" the triple\\nequals symbol!</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Identifier</th>\\n<th>Meaning</th>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>\\\"===\\\"</code></td>\\n<td>Custom value</td>\\n<td><code>x === y</code></td>\\n<td><code>x \\\\=== y</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"repl\\\"><a href=\\\"#repl\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>REPL</h4>\\n<p>In Reason's repl <a href=\\\"/guide/editor-tools/extra-goodies#repl\\\"><code>rtop</code></a> (a customized <a href=\\\"https://github.com/diml/utop\\\"><code>utop</code></a>), each input is submitted via a single <code>;</code> semicolon. OCaml's repl requires two semicolons <code>;;</code>.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OCaml</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>;;</code></td>\\n<td><code>;</code></td>\\n</tr>\\n</tbody>\\n</table>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/what-and-why.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"What & Why\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"what-is-reason\\\"><a href=\\\"#what-is-reason\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What Is Reason?</h3>\\n<p>Reason is not a new language; it's a new syntax and toolchain powered by the battle-tested language, <a href=\\\"http://ocaml.org\\\">OCaml</a>. Reason gives OCaml a familiar syntax geared toward JavaScript programmers, and caters to the existing NPM/Yarn workflow folks already know.</p>\\n<p>In that regard, Reason can almost be considered as a solidly statically typed, faster and simpler cousin of JavaScript, minus the historical crufts, plus the features of ES2030 you can use today, and with access to both the JS and the OCaml ecosystem!</p>\\n<p>Reason compiles to JavaScript thanks to our partner project, <a href=\\\"https://bucklescript.github.io/bucklescript/Manual.html\\\">BuckleScript</a>, which compiles OCaml/Reason into readable JavaScript with smooth interop. Reason also compiles to fast, barebone assembly, thanks to OCaml itself.</p>\\n<h3 id=\\\"why-reason\\\"><a href=\\\"#why-reason\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Why Reason?</h3>\\n<blockquote>\\n<p>\\\"Why bother learning an <strong>entire</strong> new language?\\\"</p>\\n</blockquote>\\n<p>This isn't what Reason's about.</p>\\n<p>The realization is that 80% of OCaml's semantics (aka how it runs) already straightforwardly maps over to modern JavaScript and vice-versa*; if one has the luxury of leaving out a few corners of JavaScript and add a few nice things, one can actually achieve something that compiles to pretty readable JS and directly use 80% of its ecosystem &#x26; tooling. That is, on top of being able to compile to barebone assembly, iOS, Android and even <a href=\\\"http://www.algo-prog.info/ocapic/web/index.php?id=ocapic\\\">microcontrollers</a>!</p>\\n<p>However, it's unclear which features of JS to reshape, in order to fit it into the mold of a language with fast semantics and 100% sound typing. But we can <em>work backward</em>, from an already sound language with performance and simplicity taken into account, and give it a few tweaks so that it looks and acts a bit more like the better part of the familiar web language we've come to know.</p>\\n<p>All these decisions made it so that, for common use-cases, the learning curve of Reason isn't really higher than learning JS + a gradual type system; in return, you get:</p>\\n<ul>\\n<li><strong>A rock solid type system</strong>. OCaml types have 100% coverage (every line of code), inference (types can be deduced and aren't required to be written manually), and soundness (once it compiles, the types are guaranteed to be accurate).</li>\\n<li><strong>An eye for simplicity &#x26; pragmatism</strong>. We allow opt-in side-effect, mutation and object for familiarity &#x26; interop, while keeping the rest of the language pure, immutable and functional.</li>\\n<li><strong>A focus on performance &#x26; size</strong>. Reason's build system, <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_bucklescript_build_system_code_bsb_code\\\"><code>bsb</code></a>, finishes building in less than 100ms (incremental). Our produced output is also <a href=\\\"https://twitter.com/bobzhang1988/status/827562467148623875\\\">tiny</a>.</li>\\n<li><strong>Incremental learning &#x26; codebase conversion</strong>. Reap the benefits of a fully typed file from day one. If everything else fails, <a href=\\\"/guide/javascript/interop\\\">paste some raw JavaScript snippets right in your Reason file</a>.</li>\\n<li><strong>Great ecosystem &#x26; tooling</strong>. Use <a href=\\\"/guide/editor-tools/editors-plugins\\\">your favorite editor</a>, <a href=\\\"/guide/javascript/libraries\\\">your favorite NPM package</a>, and any of your <a href=\\\"https://github.com/reasonml/reason-react\\\">favorite</a> <a href=\\\"https://github.com/reasonml-community/bs-jest\\\">existing</a> <a href=\\\"https://webpack.js.org\\\">stack</a>.</li>\\n</ul>\\n<p>* Don't believe us? Check our <a href=\\\"/guide/javascript/syntax-cheatsheet\\\">JS -> Reason cheat sheet</a> or try a few snippets of Reason in <a href=\\\"/try/\\\">the playground</a> and observe the output at the right!</p>\\n<h3 id=\\\"why-ocaml-as-the-backing-language-why-not-my-favorite-language\\\"><a href=\\\"#why-ocaml-as-the-backing-language-why-not-my-favorite-language\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Why OCaml As The Backing Language? Why Not [My Favorite Language]?</h3>\\n<p>First of all, please understand that no matter which language we choose, we'd get this question from most of you! =)</p>\\n<p>Many backing languages would satisfy the previous section's points; the points below, however, have been deal-breakers in our considerations.</p>\\n<ul>\\n<li><strong>The ability to render to native code</strong>. OCaml's native (assembly) startup time is in <strong>single digit milliseconds</strong>. We have big plans to use Reason on native one day; meanwhile, we're focusing on adoption through great JavaScript compatibility.</li>\\n<li><strong>Side-effects, mutation &#x26; other escape hatches</strong>. These aren't usually the shiny selling points of a language; but being able to bridge toward a part of a codebase without an elaborate interop/rewrite is crucial for us at Facebook. OCaml defaults to immutable and functional code, but having the escape hatches makes the initial adoption sometimes simply possible.</li>\\n<li><strong>Implementation polish matters</strong>. OCaml's been refined over two decades and gets better every year. If we propose a new syntax &#x26; toolchain, we'd like it not to have deal-breaking semantics &#x26; type \\\"gotchas\\\" and/or diminishing return, 80% onto the writing of a codebase.</li>\\n<li><strong>The language for writing React</strong>. Reason's <a href=\\\"https://twitter.com/jordwalke\\\">creator</a> also created <a href=\\\"https://facebook.github.io/react/\\\">ReactJS</a>, whose first prototypes were written in SML, a distant cousin of OCaml. We've transcribed ReactML into ReactJS for wide adoption. A few years later, we're now iterating on the future of ReactJS through <a href=\\\"//reasonml.github.io/reason-react/\\\">ReasonReact</a>.</li>\\n<li><strong>Nice, growing community</strong>. I mean, we're really nice. I'm Canadian. We have members all over the world. If everything fails, ask in the Discord channel and <a href=\\\"https://twitter.com/ken_wheeler/status/894298052705615872\\\">at least a few of our members in your timezone will answer</a>.</li>\\n</ul>\\n<h3 id=\\\"dont-like-reason\\\"><a href=\\\"#dont-like-reason\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Don't Like Reason?</h3>\\n<p>Make sure you talk to us in <a href=\\\"https://discord.gg/reasonml\\\">Discord</a> first, to clear any misunderstanding/misconception! But if you <em>still</em> don't like Reason, here are some alternatives:</p>\\n<ul>\\n<li><a href=\\\"http://ocaml.org\\\">OCaml</a>. Reason's just a syntax and toolchain layer on top of OCaml. The OCaml&#x3C;->Reason interop should be seamless since we share the same abstract syntax tree. BuckleScript works fine in OCaml, naturally. <a href=\\\"http://ocsigen.org/js_of_ocaml/\\\">Js_of_ocaml</a> too.</li>\\n<li><a href=\\\"http://elm-lang.org\\\">Elm</a>. A cousin of ours! Make clean, fun webapps.</li>\\n<li><a href=\\\"http://www.purescript.org\\\">PureScript</a>. Inspired by Haskell, compiled to the web.</li>\\n</ul>\\n<p>Hope that helps! Want to know more? Strike a conversation with any of us in the <a href=\\\"/community/\\\">community</a>!</p>\\n<p><em>Reason is a open source community project from Facebook</em>.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/converting.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Converting from JS\",\n\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<h2 id=\\\"preparation\\\"><a href=\\\"#preparation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Preparation</h2>\\n<p><strong>Before you proceed</strong>, please make sure that Reason is what your team needs! As much as we vouch for Reason and BuckleScript's popularity, please don't unnecessarily thrash your colleagues and give them a bad first impression. That's hard to undo afterward.</p>\\n<p>This guide covers a workflow that's helped us convert things over rapidly and efficiently. It's not intended to go over language/FFI features (though it puts them in context). Basic Reason/BuckleScript knowledge is assumed.</p>\\n<h2 id=\\\"syntax\\\"><a href=\\\"#syntax\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Syntax</h2>\\n<p><strong>Goal</strong>: first and foremost, <strong>make the file syntactically valid</strong>. Don't care about wrong types, missing modules, bad file organization, too many externals, etc. We'll come back to clean these up after setting up the regression test that is \\\"no more syntax errors\\\".</p>\\n<p>Since the Reason syntax resembles enough to that of JavaScript, instead of starting a new Reason file, just copy over an existing js file and work on top of it.</p>\\n<p><em>Tip</em>: don't forget that you can use <code>refmt</code> in your editor/terminal! If you don't know e.g. the precedence of some operations, wrap them in as many parentheses as you wish, then <code>refmt</code> your code and see which ones remain. Likewise, no need to lose time on indentations and spacing; <code>refmt</code> takes care of them.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* original JS file you've copied over */</span>\\nconst school = require('school');\\n\\nconst defaultId = <span class=\\\"hljs-number\\\">10</span>;\\n\\nfunction queryResult(usePayload, payload) {\\n  <span class=\\\"hljs-keyword\\\">if</span> (usePayload) {\\n    <span class=\\\"hljs-keyword\\\">return</span> payload.student\\n  }\\n  <span class=\\\"hljs-keyword\\\">return</span> school.getStudentById(defaultId);\\n}</code></pre>\\n      </div>\\n<p>Here are some of the things you'd do at this step:</p>\\n<ul>\\n<li>\\n<p>Convert the function call syntax over.</p>\\n</li>\\n<li>\\n<p>Convert the <code>var</code>/<code>const</code> over to <code>let</code>.</p>\\n</li>\\n<li>\\n<p>Hide the <code>require</code>s.</p>\\n</li>\\n<li>\\n<p>Make other such changes. For idioms that don't have a BuckleScript equivalent, use <code>bs.raw</code> (<a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_embedding_arbitrary_js_code_as_an_expression\\\">documentation</a>).</p>\\n</li>\\n</ul>\\n<p>Again, <strong>worry only about making the file syntactically valid</strong>. Trying to learn all three of syntax, types and other semantics while converting over a file reduces your iteration speed to less than a third.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* syntactically valid, semantically wrong conversion */</span>\\n<span class=\\\"hljs-comment\\\">/* const school = require('school'); */</span>\\n\\n<span class=\\\"hljs-keyword\\\">let</span> defaultId = <span class=\\\"hljs-number\\\">10</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> queryResult usePayload payload =&gt; {\\n  <span class=\\\"hljs-keyword\\\">if</span> (usePayload) {\\n    payload.student\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    <span class=\\\"hljs-comment\\\">/* no need for early return in Reason; if-else is an expression */</span>\\n    school.getStudentById defaultId;\\n  }\\n};</code></pre>\\n      </div>\\n<h2 id=\\\"types-pass-1\\\"><a href=\\\"#types-pass-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Types, Pass 1</h2>\\n<p><strong>Goal</strong>: correct the types, but just enough to move onto the next step.</p>\\n<p>You might still occasionally get syntax errors, but not as drastic as the previous step's.</p>\\n<ul>\\n<li>\\n<p>Change <code>foo.bar</code> to <code>foo##bar</code>. This escape-hatch <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_how_to_consume_js_property_and_methods\\\">BuckleScript feature</a> will be your medium-term friend.</p>\\n</li>\\n<li>\\n<p>Convert <code>{foo: bar}</code> to <code>[%bs.obj {foo: bar}]</code> (<a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_create_js_objects_using_bs_obj\\\">docs</a>). After <code>refmt</code>, this will sugar to <code>{\\\"foo\\\": bar}</code>.</p>\\n</li>\\n<li>\\n<p>To communicate with external JS files, use <code>external</code>. They're BuckleScript's <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_ffi\\\">foreign function interface</a>.</p>\\n<ul>\\n<li>\\n<p>Inline externals. No need to create clean, well-separated files for externals for now. We'll come back to these.</p>\\n</li>\\n<li>\\n<p>If it's too cumbersome to correctly type an <code>external</code>'s input/output, use some placeholder polymorphic types, e.g. <code>external getStudentById: 'whatever => 'whateverElse = ...</code>.</p>\\n</li>\\n<li>\\n<p>For data types &#x26; patterns that are hard to properly convert over, you can occasionally create converters like <code>external unsafeCast : myPayloadType => anotherDataType = \\\"%identity\\\";</code>.</p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<p>This is the first pass; the final types likely look different. For now, reap the rewards! Once you're finally done fixing all the type errors, your JS file should now be generated. Keep it open side-by-side. Time to come back and fix all the hacks!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* syntactically valid, still semantically wrong, but better */</span>\\nexternal getStudentById: 'whatever =&gt; 'whateverElse = <span class=\\\"hljs-string\\\">\\\"getStudentById\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"school\\\"</span>];\\n\\n<span class=\\\"hljs-keyword\\\">let</span> defaultId = <span class=\\\"hljs-number\\\">10</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> queryResult usePayload payload =&gt; {\\n  <span class=\\\"hljs-keyword\\\">if</span> (usePayload) {\\n    payload##student <span class=\\\"hljs-comment\\\">/* this will be inferred as `Js.t 'a` */</span>\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    getStudentById defaultId;\\n  }\\n};</code></pre>\\n      </div>\\n<h2 id=\\\"runtime-semantics\\\"><a href=\\\"#runtime-semantics\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Runtime Semantics</h2>\\n<p><strong>Goal</strong>: fix the errors in the generated JS output.</p>\\n<p>Compare it with your old JS file. The output is likely incorrect; you probably mis-converted some idioms and mistyped some externals.</p>\\n<ul>\\n<li>\\n<p>Type the shape of JS objects (the things that required <code>##</code>).</p>\\n</li>\\n<li>\\n<p>Convert whichever parts to records/variants/idiomatic OCaml types.</p>\\n</li>\\n</ul>\\n<p>All this time, check the output for any change.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> student; <span class=\\\"hljs-comment\\\">/* abstract type, described later */</span>\\nexternal getStudentById: 'whatever =&gt; student = <span class=\\\"hljs-string\\\">\\\"getStudentById\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"school\\\"</span>];\\n\\n<span class=\\\"hljs-keyword\\\">type</span> payloadType = <span class=\\\"hljs-type\\\">Js</span>.t {. student: student};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> defaultId = <span class=\\\"hljs-number\\\">10</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> queryResult usePayload (payload: payloadType) =&gt; {\\n  <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-type\\\">Js</span>.to_bool usePayload) {\\n    payload##student\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    getStudentById defaultId;\\n  }\\n};</code></pre>\\n      </div>\\n<h2 id=\\\"clean-up-types-pass-2\\\"><a href=\\\"#clean-up-types-pass-2\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Clean Up (Types, Pass 2)</h2>\\n<p><strong>Goal</strong>: make your types legit (aka, sound).</p>\\n<p>Go back fix whatever you've left during the first pass.</p>\\n<ul>\\n<li>\\n<p>Make sure you don't have any <code>'whatever</code> types left in <code>external</code>s.</p>\\n</li>\\n<li>\\n<p>You can keep the <code>external</code>s inlined, or pull them out into a file.</p>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* in the current file */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> payloadType = <span class=\\\"hljs-type\\\">Js</span>.t {. student: <span class=\\\"hljs-type\\\">School</span>.student}; <span class=\\\"hljs-comment\\\">/* <span class=\\\"hljs-doctag\\\">TODO:</span> put this somewhere else! */</span>\\n\\n<span class=\\\"hljs-keyword\\\">let</span> defaultId = <span class=\\\"hljs-number\\\">10</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> queryResult usePayload (payload: payloadType) =&gt; {\\n  <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-type\\\">Js</span>.to_bool usePayload) {\\n    payload##student\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    <span class=\\\"hljs-type\\\">School</span>.getStudentById defaultId;\\n  }\\n};</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* in a dedicated School.re file */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> student;\\nexternal getStudentById: int =&gt; student = <span class=\\\"hljs-string\\\">\\\"getStudentById\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"School\\\"</span>];\\nexternal getAllStudents: unit =&gt; array student = <span class=\\\"hljs-string\\\">\\\"getAllStudents\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"School\\\"</span>];</code></pre>\\n      </div>\\n<p>Type <code>student</code> doesn't have an actual content; that's called an <a href=\\\"/guide/language/module#signatures\\\">abstract type</a>. It's a convenient way of specifying the relationship between external calls without knowing what the shape of the data is under the hood.</p>\\n<p>And then you're done!</p>\\n<h2 id=\\\"tips\\\"><a href=\\\"#tips\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips</h2>\\n<p><strong>Don't</strong> try to fully convert a JS file into a pristine Reason file in a single shot. Such method might actually slow you down! It's fine to have externals and <code>bs.obj</code> left, and temporarily not take advantage of nice OCaml features (variants, labeled arguments, etc.). Once you've converted a few other related files, you can come back and now refactor <strong>faster</strong> by banking on the type system.</p>\\n<p>Whatever nice utilities you find (e.g. convert a <code>Js.null_undefined Js.boolean</code> to a <code>bool</code>), put them in a <code>tempUtils.re</code> file or something. They're easy examples for your colleagues and removes some conversion churns.</p>\\n<p>We <strong>highly recommend</strong> you to check the JS output into version control. It makes your build system integration quasi-nonexistent, and makes sure that when you're not there, your teammates can make small changes, audit the output diff, and catch any mistakes. It's also a great selling point that the checked in JS output is friendly to emergency hot patches (a big selling point for managers!). Even if you're upgrading BuckleScript version, you'd catch any output difference. It's like <a href=\\\"https://facebook.github.io/jest/docs/snapshot-testing.html\\\">Jest snapshots</a>, for free!</p>\\n<p>As always, ping us on <a href=\\\"https://discord.gg/reasonml\\\">Discord</a> for more help!</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"JavaScript\",\n\t\t\t\t\t\t\t\t\"order\": 30\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Reason compiles to JavaScript and native code. The workflows for each are <strong>currently separated</strong>. This page describes the JavaScript workflow. Our native workflow is currently work-in-progress and can be seen <a href=\\\"/guide/native\\\">here</a>.\\nWhenever you get stuck:</p>\\n<ul>\\n<li>Check out the <a href=\\\"/community/faq\\\">frequently asked questions</a>.</li>\\n<li>Peruse some <a href=\\\"/community/examples\\\">code examples</a>.</li>\\n<li>Ask us questions on <a href=\\\"https://discord.gg/reasonml\\\">Discord</a>!</li>\\n</ul>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/libraries.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Libraries\",\n\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Libraries that have already been wrapped with BuckleScript bindings are customarily prefixed with <code>bs-</code>, e.g. <code>bs-director</code>. <a href=\\\"https://www.npmjs.com/search?q=keywords:bucklescript\\\">Here's a search</a> for all of the BS related libraries on NPM.</p>\\n<p>Take a look at <a href=\\\"https://github.com/reasonml-community\\\">reasonml-community</a> to see a list of curated bindings to JS libraries. And the <a href=\\\"https://github.com/reasonml-community/index\\\">index</a> which tries to keep track of non-curated bindings and libraries too.</p>\\n<p>If you can't find what you're looking for: sometimes you don't need a binding to use a JS library. Most JS data types, such as array and objects, <a href=\\\"https://bucklescript.github.io/bucklescript/Manual.html#_runtime_representation\\\">map over cleanly to Reason and vice-versa</a>. You also have access to the familiar <a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.html\\\">JS API</a>. Be sure to also check the \\\"Interop\\\" and \\\"Converting from JS\\\" sections here!</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/interop.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Interop\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<h2 id=\\\"just-dumping-javascript-in-the-middle-of-your-reason-code\\\"><a href=\\\"#just-dumping-javascript-in-the-middle-of-your-reason-code\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Just dumping JavaScript in the middle of your Reason code</h2>\\n<p>If you're just hacking things together, this can be very nice, but you also have all of the unsafety of JavaScript code 😄.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-type\\\">Js</span>.log <span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>;\\n[%%bs.raw {|\\nconsole.log(<span class=\\\"hljs-symbol\\\">'here</span> is some javascript <span class=\\\"hljs-keyword\\\">for</span> you');\\n|}];</code></pre>\\n      </div>\\n<blockquote>\\n<p><code>{|</code> and <code>|}</code> are the delimiters of a multi-line string in OCaml. You can also put a tag in there e.g. <code>{something|</code> and then it will look for a matching <code>|something}</code> to close.</p>\\n</blockquote>\\n<p>And here's the resulting javascript:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-javascript\\\"><code><span class=\\\"hljs-comment\\\">// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE</span>\\n'use strict';\\nconsole.log(<span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>);\\nconsole.log('here <span class=\\\"hljs-keyword\\\">is</span> some javascript <span class=\\\"hljs-keyword\\\">for</span> you');</code></pre>\\n      </div>\\n<h2 id=\\\"dumping-in-some-javascript-and-making-it-accessible-from-reason\\\"><a href=\\\"#dumping-in-some-javascript-and-making-it-accessible-from-reason\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dumping in some JavaScript, and making it accessible from Reason</h2>\\n<p>What if you want a value that can be used from your Reason code?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-type\\\">Js</span>.log <span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> x = [%bs.raw {| <span class=\\\"hljs-symbol\\\">'here</span> is a <span class=\\\"hljs-built_in\\\">string</span> from javascript' |}];\\n<span class=\\\"hljs-type\\\">Js</span>.log (x ^ <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>); /* ^ is the operator <span class=\\\"hljs-keyword\\\">for</span> <span class=\\\"hljs-built_in\\\">string</span> concat */</code></pre>\\n      </div>\\n<p>Now you might be wondering \\\"what magic is this?? How did ocaml know that <code>x</code> was a string? <strong>It doesn't</strong>. The type of <code>x</code> in this code is a magic type that will unify with anything! This is quite dangerous and can have cascading effects in OCaml's type inference algorithm.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> y = [%bs.raw {| <span class=\\\"hljs-symbol\\\">'something'</span> |}];\\n<span class=\\\"hljs-type\\\">Js</span>.log (<span class=\\\"hljs-string\\\">\\\"a string\\\"</span> ^ y, <span class=\\\"hljs-number\\\">10</span> + y);\\n/* danger!! ocaml won't stop you from using y <span class=\\\"hljs-keyword\\\">as</span> <span class=\\\"hljs-number\\\">2</span> totally different types */</code></pre>\\n      </div>\\n<p>To fix this, you should <strong>always</strong> provide a concrete type for the result of <code>bs.raw</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> x: <span class=\\\"hljs-built_in\\\">string</span> = [%bs.raw {| <span class=\\\"hljs-symbol\\\">'well</span>-typed' |}];\\n<span class=\\\"hljs-type\\\">Js</span>.log (x ^ <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>);\\n/* ocaml will error out <span class=\\\"hljs-keyword\\\">if</span> you <span class=\\\"hljs-keyword\\\">try</span> <span class=\\\"hljs-keyword\\\">to</span> use x <span class=\\\"hljs-keyword\\\">as</span> anything other than a <span class=\\\"hljs-built_in\\\">string</span> */</code></pre>\\n      </div>\\n<p>And here's the output!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-javascript\\\"><code>// Generated by BUCKLESCRIPT VERSION <span class=\\\"hljs-number\\\">1.7</span>.<span class=\\\"hljs-number\\\">4</span>, PLEASE EDIT WITH CARE\\n<span class=\\\"hljs-string\\\">'use strict'</span>;\\nconsole.log(<span class=\\\"hljs-string\\\">\\\"this is reason\\\"</span>);\\nvar x = ( <span class=\\\"hljs-string\\\">'here is a string from javascript'</span> );\\nconsole.log(x + <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>);\\nvar y = ( <span class=\\\"hljs-string\\\">'something'</span> );\\nconsole.log(/* tuple */[\\n      <span class=\\\"hljs-string\\\">\\\"a string\\\"</span> + y,\\n      <span class=\\\"hljs-number\\\">10</span> + y | <span class=\\\"hljs-number\\\">0</span>\\n    ]);\\nvar x<span class=\\\"hljs-variable\\\">$1</span> = ( <span class=\\\"hljs-string\\\">'well-typed'</span> );\\nconsole.log(x<span class=\\\"hljs-variable\\\">$1</span> + <span class=\\\"hljs-string\\\">\\\" back in reason land\\\"</span>);</code></pre>\\n      </div>\\n<blockquote>\\n<p>The difference between the 2 <code>%%</code> from the previous section and the 1 <code>%</code> here is important! <code>[%%something ...]</code> is an OCaml \\\"extension point\\\" that represents a <em>top-level</em> statement (it can't show up inside a function or value, for example). <code>[%something ...]</code> is an extension point that stands in for an <em>expression</em>, and can be put just about anywhere -- but make sure that the JavaScript you put inside is actually an expression! E.g. don't put a semicolon after it, or you'll get a syntax error when you try to run the resulting JavaScript.</p>\\n</blockquote>\\n<h2 id=\\\"dumping-in-a-function--passing-values\\\"><a href=\\\"#dumping-in-a-function--passing-values\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Dumping in a function &#x26; passing values</h2>\\n<p>We'll need a little knowledge about Bucklescript's runtime representation of various values for this to work.</p>\\n<ul>\\n<li><code>strings</code> are strings, <code>ints</code> and <code>floats</code> are just numbers</li>\\n<li>an <a href=\\\"/guide/language/list-and-array#list\\\">Array</a> is a mutable fixed-length list in OCaml, and is represented as a plain javascript array.</li>\\n<li>a <a href=\\\"/guide/language/list-and-array#array\\\">List</a> is an immutable functional-style linked list, and is definitely the more idiomatic one to use in most cases. However, it's representation is more complicated (try <code>Js.log [1,2,3,4]</code> to check it out). Because of this, I generally convert to &#x26; from <code>Array</code>s when I'm talking to javascript, via <code>Array.of_list</code> and <code>Array.to_list</code>.</li>\\n<li>If you want to go deeper, there's an exhaustive list <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_runtime_representation\\\">in the BuckleScript manual</a></li>\\n</ul>\\n<p>Knowing that, we can write a function in JavaScript that just accepts an array and returns a number, without much trouble at all.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> jsCalculate: <span class=\\\"hljs-built_in\\\">array</span> <span class=\\\"hljs-built_in\\\">int</span> =&gt; <span class=\\\"hljs-built_in\\\">int</span> =&gt; <span class=\\\"hljs-built_in\\\">int</span> = [%bs.raw {|\\n <span class=\\\"hljs-keyword\\\">function</span> (numbers, scaleFactor) {\\n   var result = <span class=\\\"hljs-number\\\">0</span>;\\n   numbers.forEach(number =&gt; {\\n     result += number;\\n   });\\n   return result * scaleFactor;\\n }\\n|}];\\n<span class=\\\"hljs-keyword\\\">let</span> calculate numbers scaleFactor =&gt;\\n  jsCalculate (<span class=\\\"hljs-type\\\">Array</span>.of_list numbers) scaleFactor;\\n<span class=\\\"hljs-type\\\">Js</span>.log (calculate [<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">3</span>] <span class=\\\"hljs-number\\\">10</span>); /* -&gt; <span class=\\\"hljs-number\\\">60</span> */</code></pre>\\n      </div>\\n<p>Of course, this function that I wrote in JavaScript could be ported over to Reason without much hassle.</p>\\n<p><strong>Remember</strong> that this is an escape hatch that's very useful for learning so you can jump in quickly and make something, but it's a good exercise to go back through and convert things back into nice type safe reason code.</p>\\n<p>I've run into more than a few bugs because of raw JavaScript that I added to save time 😅.</p>\\n<h2 id=\\\"settling-down-and-getting-disciplined-about-things\\\"><a href=\\\"#settling-down-and-getting-disciplined-about-things\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Settling down and getting disciplined about things</h2>\\n<p>So far we've been using <code>bs.raw</code>, which is a very fast and loose way to do it, and <strong>not</strong> suitable for production.</p>\\n<p>But what if we actually need to call a function that's in JavaScript? It's needed for interacting with the DOM, or using node modules. In BuckleScript, you use an <code>external</code> declaration (<a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_binding_to_simple_js_functions_values\\\">docs</a>).</p>\\n<p>Getting a value and getting a function are both pretty easy:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">external</span> pi: <span class=\\\"hljs-built_in\\\">float</span> = <span class=\\\"hljs-string\\\">\\\"Math.PI\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">val</span>];\\n<span class=\\\"hljs-keyword\\\">let</span> tau = pi *. <span class=\\\"hljs-number\\\">2.0</span>;\\n<span class=\\\"hljs-keyword\\\">external</span> alert: <span class=\\\"hljs-built_in\\\">string</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"alert\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">val</span>];\\nalert <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>;</code></pre>\\n      </div>\\n<p>But what about when we want something more complicated? Here's how we could call <code>getContext</code> on a Canvas DOM node:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">type</span> canvas;\\n<span class=\\\"hljs-keyword\\\">type</span> context;\\n/* we're leaving these types abstract, because we won't\\n * be using them directly anywhere */\\n<span class=\\\"hljs-keyword\\\">external</span> getContext: canvas =&gt; <span class=\\\"hljs-built_in\\\">string</span> =&gt; context = <span class=\\\"hljs-string\\\">\\\"\\\"</span> [@@bs.send];\\n<span class=\\\"hljs-keyword\\\">let</span> myCanvas: canvas = [%bs.raw {| document.getElementById(<span class=\\\"hljs-string\\\">\\\"mycanvas\\\"</span>) |}];\\n<span class=\\\"hljs-keyword\\\">let</span> ctx = getContext myCanvas <span class=\\\"hljs-string\\\">\\\"2d\\\"</span>;</code></pre>\\n      </div>\\n<p>So let's unpack what's going on. We created some abstract types for the Canvas DOM node and the associated RenderingContext object.</p>\\n<p>Then we made a <code>getContext</code> function, but instead of <code>@@bs.val</code> we used <code>@@bs.send</code>, and we used an empty string for the text of the external. <code>@@bs.send</code> means \\\"we're calling a method on the first argument\\\", which in this case is the canvas. Given the above, BuckleScript will translate <code>getContext theFirstArgument theSecondArgument</code> into <code>theFirstArgument.getContext(theSecondArgument, ...)</code>.</p>\\n<p>The empty string means \\\"the JS name is the same as the name we're giving the external in BuckleScript-land\\\" – in this case <code>getContext</code>. If we wanted to name it something else (like <code>getRenderingContext</code>), then we'd have to supply the string <code>\\\"getContext\\\"</code> so that BuckleScript calls the right function.</p>\\n<p>Let's add one more function just so it's interesting.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">external</span> fillRect: context =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"\\\"</span> [@@bs.send];</code></pre>\\n      </div>\\n<p>And now we can draw something!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code>fillRect ctx <span class=\\\"hljs-number\\\">0.0</span> <span class=\\\"hljs-number\\\">0.0</span> <span class=\\\"hljs-number\\\">100.0</span> <span class=\\\"hljs-number\\\">100.0</span>;</code></pre>\\n      </div>\\n<p>It's not much, but adding other canvas methods is similar, and then you can start doing some <a href=\\\"https://twitter.com/jaredforsyth/status/871062358076030976\\\">really fun things</a>.</p>\\n<p>So what does the compiled JavaScript look like?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-javascript\\\"><code>'use strict';\\n<span class=\\\"hljs-keyword\\\">var</span> tau = <span class=\\\"hljs-type\\\">Math</span>.<span class=\\\"hljs-type\\\">PI</span> * <span class=\\\"hljs-number\\\">2.0</span>;\\nalert(<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>);\\n<span class=\\\"hljs-keyword\\\">var</span> myCanvas = ( document.getElementById(<span class=\\\"hljs-string\\\">\\\"mycanvas\\\"</span>) );\\n<span class=\\\"hljs-keyword\\\">var</span> ctx = myCanvas.getContext(<span class=\\\"hljs-string\\\">\\\"2d\\\"</span>);\\nctx.fillRect(<span class=\\\"hljs-number\\\">0.0</span>, <span class=\\\"hljs-number\\\">0.0</span>, <span class=\\\"hljs-number\\\">100.0</span>, <span class=\\\"hljs-number\\\">100.0</span>);</code></pre>\\n      </div>\\n<p>Wow! Notice how BuckleScript just inlined our <code>pi</code> variable for us? And the output looks almost exactly like it was written by hand.</p>\\n<h2 id=\\\"using-existing-javascript-libraries\\\"><a href=\\\"#using-existing-javascript-libraries\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Using existing JavaScript libraries</h2>\\n<p>When folks write bindings for a particular JavaScript library, they'd usually publish it to npm. Head over to the <a href=\\\"/guide/javascript/libraries\\\">Libraries</a> to find out how to find these.</p>\\n<p>To use a library that does not have existing bindings, however, you'll want to first install the npm package as usual, e.g. using <code>npm install --save &#x3C;package-name></code>, then just go ahead and write your bindings. You'll probably find the <a href=\\\"https://bucklescript.github.io/bucklescript/Manual.html#_binding_to_a_value_from_a_module_code_bs_module_code\\\"><code>bs.module</code></a> FFI feature particularly useful; it emits the right <code>import</code>s or <code>require</code>s, depending on the JS compilation target's module format.</p>\\n<p>As an example, here's the entire source code of the <a href=\\\"https://github.com/reasonml-community/bs-glob\\\"><code>bs.glob</code></a> bindings (converted to Reason, the original is OCaml):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> error;\\n\\nexternal glob : string =&gt; (<span class=\\\"hljs-type\\\">Js</span>.nullable error =&gt; array string =&gt; unit) =&gt; unit = <span class=\\\"hljs-string\\\">\\\"\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span>];\\nexternal sync : string =&gt; array string = <span class=\\\"hljs-string\\\">\\\"\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">val</span>] [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"glob\\\"</span>];</code></pre>\\n      </div>\\n<p>And the relevant parts of <code>package.json</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-js\\\"><code>{\\n  <span class=\\\"hljs-string\\\">\\\"name\\\"</span>: <span class=\\\"hljs-string\\\">\\\"bs-glob\\\"</span>,\\n  <span class=\\\"hljs-string\\\">\\\"version\\\"</span>: <span class=\\\"hljs-string\\\">\\\"0.1.0\\\"</span>,\\n  ...\\n  <span class=\\\"hljs-string\\\">\\\"devDependencies\\\"</span>: {\\n    <span class=\\\"hljs-string\\\">\\\"bs-platform\\\"</span>: <span class=\\\"hljs-string\\\">\\\"^1.9.1\\\"</span>\\n  },\\n  <span class=\\\"hljs-string\\\">\\\"dependencies\\\"</span>: {\\n    <span class=\\\"hljs-string\\\">\\\"glob\\\"</span>: <span class=\\\"hljs-string\\\">\\\"^7.1.2\\\"</span>\\n  }\\n}</code></pre>\\n      </div>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/exception.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Exception\",\n\t\t\t\t\t\t\t\t\"order\": 175\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Exceptions are just a special kind of variant, \\\"thrown\\\" in <strong>exceptional</strong> cases (don't abuse them!).</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> getItem theList =&gt; {\\n  <span class=\\\"hljs-keyword\\\">if</span> (...) {\\n    <span class=\\\"hljs-comment\\\">/* return the found item here */</span>\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    raise <span class=\\\"hljs-type\\\">Not_found</span>\\n  }\\n};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> result = try (getItem [<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>]) {\\n| <span class=\\\"hljs-type\\\">Not_found</span> =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"Item not found!\\\"</span>\\n};</code></pre>\\n      </div>\\n<p>You can make your own exceptions like you'd make a variant (exceptions need to be capitalized too).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-keyword\\\">exception</span> <span class=\\\"hljs-type\\\">InputClosed</span> <span class=\\\"hljs-built_in\\\">string</span>;\\n...\\nraise (<span class=\\\"hljs-type\\\">InputClosed</span> <span class=\\\"hljs-string\\\">\\\"the stream has closed!\\\"</span>);</code></pre>\\n      </div>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p>When you have ordinary variants, you often don't <strong>need</strong> exceptions. For example, instead of throwing when <code>item</code> can't be found in a collection, try to return an <code>option item</code> (<code>None</code> in this case) instead.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>The above tip seems to contradict what's happening in the OCaml standard library; prominent functions in modules such as <a href=\\\"/api/List.html\\\">List</a> and <a href=\\\"/api/String.html\\\">String</a> seems to throw exceptions overly often. This is partially a historical sediment, and partially out of extreme care for performance. Native OCaml/Reason is extremely performant; exception throwing was designed to be very cheap, cheaper than allocation and returning e.g. an <code>option</code>. This is unfortunately not the case for JavaScript.</p>\\n<p>Newer standard library alternatives usually come with <code>option</code>-returning functions rather than exception-throwing ones.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/syntax-cheatsheet.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Syntax Cheatsheet\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>We've worked very hard to make Reason look like JS while preserving OCaml's great semantics &#x26; types. Hope you enjoy it!</p>\\n<h3 id=\\\"let-binding\\\"><a href=\\\"#let-binding\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Let Binding</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>const x = 5;</code></td>\\n<td><code>let x = 5;</code></td>\\n</tr>\\n<tr>\\n<td><code>var x = y;</code></td>\\n<td>No equivalent (thankfully)</td>\\n</tr>\\n<tr>\\n<td><code>let x = 5; x = x + 1;</code></td>\\n<td><code>let x = ref 5; x := !x + 1;</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"string--char\\\"><a href=\\\"#string--char\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>String &#x26; Char</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>\\\"Hello world!\\\"</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>'Hello world!'</code></td>\\n<td>Strings must use \\n<code>\\\"</code></td>\\n</tr>\\n<tr>\\n<td>Characters are strings</td>\\n<td><code>'a'</code></td>\\n</tr>\\n<tr>\\n<td><code>\\\"hello \\\" + \\\"world\\\"</code></td>\\n<td><code>\\\"hello \\\" ^ \\\"world\\\"</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"boolean\\\"><a href=\\\"#boolean\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Boolean</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>true</code>\\n, \\n<code>false</code></td>\\n<td><code>true</code>\\n, \\n<code>false</code>\\n \\n*</td>\\n</tr>\\n<tr>\\n<td><code>!true</code></td>\\n<td><code>not true</code></td>\\n</tr>\\n<tr>\\n<td><code>||</code>\\n, \\n<code>&#x26;&#x26;</code>\\n, \\n<code>&#x3C;=</code>\\n, \\n<code>>=</code>\\n, \\n<code>&#x3C;</code>\\n, \\n<code>></code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>a === b</code>\\n, \\n<code>a !== b</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td>No deep equality (recursive compare)</td>\\n<td><code>a == b</code>\\n, \\n<code>a != b</code></td>\\n</tr>\\n<tr>\\n<td><code>a == b</code></td>\\n<td>No equality with implicit casting (thankfully)</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* This is the Reason spiritual equivalent; it doesn't mean it compiles to JS' <code>true</code>/<code>false</code>! To compile to the latter, use <code>Js.true_</code>/<code>Js.false_</code>. See <a href=\\\"/guide/language/boolean#usage\\\">here</a>.</p>\\n<h3 id=\\\"number\\\"><a href=\\\"#number\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Number</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>3</code></td>\\n<td>Same \\n*</td>\\n</tr>\\n<tr>\\n<td><code>3.1415</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>3 + 4</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>3.0 + 4.5</code></td>\\n<td><code>3.0 +. 4.5</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* JS has no distinction between integer and float.</p>\\n<h3 id=\\\"objectrecord\\\"><a href=\\\"#objectrecord\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Object/Record</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>no static types</td>\\n<td><code>type point = {x: int, mutable y: int};</code></td>\\n</tr>\\n<tr>\\n<td><code>{x: 30, y: 20}</code></td>\\n<td>Same \\n*</td>\\n</tr>\\n<tr>\\n<td><code>point.x</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>point.y = 30;</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>{...point, x: 30}</code></td>\\n<td>Same</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* This is the Reason spiritual equivalent; it doesn't mean it compiles to JS' object! To compile to the latter, see <a href=\\\"/guide/language/object#tip--tricks\\\">here</a>.</p>\\n<h3 id=\\\"array\\\"><a href=\\\"#array\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Array</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>[1, 2, 3]</code></td>\\n<td><code>[|1, 2, 3|]</code></td>\\n</tr>\\n<tr>\\n<td><code>myArray[1] = 10</code></td>\\n<td><code>myArray.(1) = 10</code></td>\\n</tr>\\n<tr>\\n<td>No tuple</td>\\n<td><code>(1, 2, 3)</code></td>\\n</tr>\\n<tr>\\n<td>No immutable list</td>\\n<td><code>[1, 2, 3]</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"null\\\"><a href=\\\"#null\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Null</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>null</code>\\n, \\n<code>undefined</code></td>\\n<td><code>None</code>\\n \\n*</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* Again, only a spiritual equivalent; Reason doesn't have nulls, nor null bugs! But it does have <a href=\\\"/guide/examples#using-the-option-type\\\">an option type</a> for when you actually need nullability.</p>\\n<h3 id=\\\"function\\\"><a href=\\\"#function\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Function</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>arg => retVal</code></td>\\n<td><code>fun arg => retVal</code></td>\\n</tr>\\n<tr>\\n<td><code>function named(arg) {...}</code></td>\\n<td><code>fun named arg => ...</code></td>\\n</tr>\\n<tr>\\n<td><code>const f = function named(arg) {...}</code></td>\\n<td><code>let f = fun named arg => ...</code></td>\\n</tr>\\n<tr>\\n<td><code>add(4, add(5, 6))</code></td>\\n<td><code>add 4 (add 5 6)</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h4 id=\\\"blocks\\\"><a href=\\\"#blocks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Blocks</h4>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p >JavaScript</p></th> <th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nconst myFun = (x, y) => {\\n  const doubleX = x + x;\\n  const doubleY = y + y;\\n  return doubleX + doubleY\\n};</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet myFun = fun x y => {\\n  let doubleX = x + x;\\n  let doubleY = y + y;\\n  doubleX + doubleY\\n};</pre>\\n    </td>\\n  </tr>\\n</table>\\n<h4 id=\\\"currying\\\"><a href=\\\"#currying\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Currying</h4>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>let add = a => b => a + b</code></td>\\n<td><code>let add a b => a + b</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Both JavaScript and Reason support currying, but Reason currying is <strong>built-in and optimized to avoids intermediate function allocation &#x26; calls</strong>, whenever possible.</p>\\n<h3 id=\\\"if-else\\\"><a href=\\\"#if-else\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>If-else</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>if (a) {b} else {c}</code></td>\\n<td>Same \\n*</td>\\n</tr>\\n<tr>\\n<td><code>a ? b : c</code></td>\\n<td>Same</td>\\n</tr>\\n<tr>\\n<td><code>switch</code></td>\\n<td><code>switch</code>\\n but \\n<a href=\\\"/guide/language/pattern-matching\\\">super-powered!</a></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* Reason conditionals are always expressions!</p>\\n<h3 id=\\\"destructuring\\\"><a href=\\\"#destructuring\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Destructuring</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>const {a, b} = data</code></td>\\n<td><code>let {a, b} = data</code></td>\\n</tr>\\n<tr>\\n<td><code>const [a, b] = data</code></td>\\n<td><code>let [|a, b|] = data</code>\\n \\n*</td>\\n</tr>\\n<tr>\\n<td><code>const {a: aa, b: bb} = data</code></td>\\n<td><code>let {a: aa, b: bb} = data</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* Gives good compiler warning that <code>data</code> might not be of length 2. Switch to pattern-matching instead.</p>\\n<h3 id=\\\"loop\\\"><a href=\\\"#loop\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Loop</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>for (let i = 0; i &#x3C;= 10; i++) {...}</code></td>\\n<td><code>for i in 0 to 10 {...}</code></td>\\n</tr>\\n<tr>\\n<td><code>for (let i = 10; i >= 0; i--) {...}</code></td>\\n<td><code>for i in 10 downto 0 {...}</code></td>\\n</tr>\\n<tr>\\n<td><code>while (true) {...}</code></td>\\n<td>Same</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"jsx\\\"><a href=\\\"#jsx\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>JSX</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>&#x3C;Foo bar=1 baz=\\\"hi\\\" onClick={bla} /></code></td>\\n<td><code>&#x3C;Foo bar=1 baz=\\\"hi\\\" onClick=(bla) /></code></td>\\n</tr>\\n<tr>\\n<td><code>&#x3C;Foo bar=bar /></code></td>\\n<td><code>&#x3C;Foo bar /></code></td>\\n</tr>\\n<tr>\\n<td><code>&#x3C;input checked /></code></td>\\n<td><code>&#x3C;input checked=true /></code></td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"exception\\\"><a href=\\\"#exception\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Exception</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>JavaScript</th>\\n<th>Reason</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>throw new SomeError(...)</code></td>\\n<td><code>raise (SomeError ...)</code></td>\\n</tr>\\n<tr>\\n<td><code>try (a) {...} catch (Err) {...} finally {...}</code></td>\\n<td><code>try (a) { | Err => ...}</code>\\n \\n*</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>* No finally.</p>\\n<h3 id=\\\"blocks-1\\\"><a href=\\\"#blocks-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Blocks</h3>\\n<p>In Reason, \\\"sequence expressions\\\" are created with <code>{}</code> and evaluate to their last statement. In JavaScript, this can be simulated via a temporary variable which must be created in an invalid state, then later mutated.</p>\\n<table>\\n  <thead><tr> <th scope=\\\"col\\\"><p >JavaScript</p></th> <th scope=\\\"col\\\"><p>Reason</p></th></tr></thead>\\n  <tr>\\n    <td>\\n      <pre>\\nlet res = undefined;\\n{\\n  const x = 23;\\n  const y = 34;\\n  res = x + y;\\n};</pre>\\n    </td>\\n    <td>\\n      <pre>\\nlet res = {\\n  let x = 23;\\n  let y = 34;\\n  x + y\\n};</pre>\\n    </td>\\n  </tr>\\n</table>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/quickstart.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code>npm install -g bs-platform\\nbsb -init my-first-app -theme basic-reason</code></pre>\\n      </div>\\n<p>And then run it as usual:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code><span class=\\\"hljs-built_in\\\">cd</span> my-first-app\\nnpm run build</code></pre>\\n      </div>\\n<p>You can also build in watch mode:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code>npm run watch</code></pre>\\n      </div>\\n<p>That's all! This compiles Reason to Javascript in the <code>lib/js/</code> folder.</p>\\n<ul>\\n<li>\\n<p>Read more about how we compile to JavaScript through our partner project, <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html\\\">BuckleScript</a>.</p>\\n</li>\\n<li>\\n<p>Alternatively, <strong>to start a <a href=\\\"//reasonml.github.io/reason-react/gettingStarted.html\\\">ReasonReact</a> app</strong>, try <code>bsb -init my-react-app -theme react</code>.</p>\\n</li>\\n<li>\\n<p>Head over to <a href=\\\"/guide/editor-tools/global-installation\\\">Editor Setup</a> to get the Reason plugin for your favorite editor!</p>\\n</li>\\n</ul>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/boolean.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Boolean\",\n\t\t\t\t\t\t\t\t\"order\": 30\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>A boolean has the type <code>bool</code> and can be either <code>true</code> or <code>false</code>. Common operations:</p>\\n<ul>\\n<li><code>&#x26;&#x26;</code>: logical and</li>\\n<li><code>||</code>: logical or</li>\\n<li><code>not</code>: logical not. <strong>Note that ! is reserved for something else</strong></li>\\n<li><code>&#x3C;=</code>, <code>>=</code>, <code>&#x3C;</code>, <code>></code></li>\\n<li><code>==</code>: physical equal, compares data structures deeply: <code>(1, 2) == (1, 2)</code> is <code>true</code>. Convenient, but use with caution</li>\\n<li><code>===</code>: referential equal, compares shallowly. <code>(1, 2) === (1, 2)</code> is <code>false</code>. <code>let myTuple = (1, 2); myTuple === myTuple</code> is <code>true</code>.</li>\\n<li><code>!=</code>: physical unequal</li>\\n<li><code>!==</code>: referential unequal</li>\\n</ul>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p><strong>Note: BuckleScript provides bindings to the JavaScript</strong> <code>true</code> and <code>false</code>, which <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_boolean\\\">aren't the same as the Reason/OCaml <code>true</code> and <code>false</code></a>! Don't use them interchangeably without proper conversion (<code>Js.to_bool</code> and <code>Js.Boolean.to_js_boolean</code>).</p>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p><strong>Use physical equal tastefully</strong>. It's convenient, but might accidentally make you compare two deeply nested data structures and incur a big performance hit. It's also not always clear what counts as \\\"equal\\\". For example, is a piece of data <code>foo</code> equal to a lazy <code>foo</code>? Ideally, it'd have been pluggable. Future changes are coming to make this possible and reliable; if you're interested, check <a href=\\\"https://www.reddit.com/r/ocaml/comments/2vyk10/modular_implicits/\\\">modular implicit</a>.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p><em>This section assumes knowledge with <a href=\\\"/guide/language/variant\\\">variants</a>. If it's your first time reading this guide, feel free to come back to this later</em>!</p>\\n<p>Boolean is (only conceptually) a special case of a variant: <code>type bool = True | False</code>. Design-wise, this elegantly removes the need to hard-code a boolean type in the type system. The drawback is that, just like variants, the constructors are <a href=\\\"/try/?reason=DYUwLgBAhhC8FgE4FcRA\\\">compiled into a less readable but faster representation</a>. This is why BuckleScript lacks information, at a later stages, to compile Reason true/false into JavaScript's true/false.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/destructuring.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Destructuring\",\n\t\t\t\t\t\t\t\t\"order\": 130\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>\\\"Destructuring\\\" is a visually concise way of extracting fields from a data structure. You can use destructuring anywhere you'd normally use a variable.</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>The following binds variables: <code>ten = 10</code>, <code>twenty = 20</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> someInts = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> (ten, twenty) = someInts;</code></pre>\\n      </div>\\n<p>The following binds variables: <code>name = \\\"Guy\\\"</code>, <code>age = 30</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {name: string, age: int};\\n<span class=\\\"hljs-keyword\\\">let</span> somePerson = {name: <span class=\\\"hljs-string\\\">\\\"Guy\\\"</span>, age: <span class=\\\"hljs-number\\\">30</span>};\\n<span class=\\\"hljs-keyword\\\">let</span> {name, age} = somePerson;</code></pre>\\n      </div>\\n<p>When you pull out fields, you can optionally rename the fields. The following binds these instead: <code>n = \\\"Guy\\\"</code>, <code>a = 30</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> {name: n, age: a} = somePerson;</code></pre>\\n      </div>\\n<p>Destructuring also allows type annotations.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (ten: int, twenty: int) = someInts;\\n<span class=\\\"hljs-keyword\\\">let</span> {name: (n: string), age: (a: int)} = somePerson;</code></pre>\\n      </div>\\n<p>Destructuring a functions' labeled arguments is also possible.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {name: string, age: int};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> someFunction person::{name} =&gt; {\\n  <span class=\\\"hljs-comment\\\">/* you can use `name` here */</span>\\n}\\n\\n<span class=\\\"hljs-keyword\\\">let</span> otherFunction person::({name} <span class=\\\"hljs-keyword\\\">as</span> thePerson) =&gt; {\\n  <span class=\\\"hljs-comment\\\">/* you can use both `name` and the whole record as `thePerson` here */</span>\\n}</code></pre>\\n      </div>\\n<p><strong>Keep reading the section, pattern matching, for a crazier form of destructuring</strong>!</p>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p>Destructuring can make your code much more concise without requiring you to name intermediate variables. Do use them! But don't abuse them and make your code overly nested &#x26; terse.</p>\\n<p>If you're destructuring a record or a variant whose definition isn't in the current file, you need to explicitly annotate it. See <a href=\\\"/guide/language/record#record-needs-an-explicit-definition\\\">here</a> and <a href=\\\"/guide/language/variant#variant-needs-an-explicit-definition\\\">here</a>.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/external.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"External\",\n\t\t\t\t\t\t\t\t\"order\": 170\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p><code>external</code>, or \\\"FFI\\\" (foreign function interface), or simply \\\"interop\\\" (for \\\"interoperability\\\") is how Reason communicates with other languages, like C or JavaScript.</p>\\n<p>Imagine writing a let binding, but with its body omitted and its type mandatorily written down:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>external myCFunction: int =&gt; string = <span class=\\\"hljs-string\\\">\\\"theCFunction\\\"</span>;</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>external getElementsByClassName : string =&gt; array <span class=\\\"hljs-type\\\">Dom</span>.element =\\n  <span class=\\\"hljs-string\\\">\\\"document.getElementsByClassName\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">val</span>];</code></pre>\\n      </div>\\n<p>(The above is a <a href=\\\"https://bucklescript.github.io/bucklescript/Manual.html\\\">BuckleScript</a>-specific external that binds to a JavaScript function of the same name.)</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>You'd use an external value/function as if it was a normal let binding.</p>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p>If you come from a JavaScript background: <strong>do take some time to learn about the <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_binding_to_simple_js_functions_values\\\">BuckleScript externals</a></strong>! In the beginning, you'll likely encounter quite a few <code>external</code>s before you get to write 100% pure idiomatic Reason code.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>Reason takes interoperating with existing code very seriously. Our type system has very strong guarantees. However, such strong feature also means that, without a great interop system, it'd be very hard to gradually convert a codebase over to Reason. Fortunately, the FFI allows us to cooperate very well with <a href=\\\"/guide/javascript/converting\\\">dirty, existing code</a>. The combination of a sound type system + great interop means that we get the benefits of a traditional gradual type system regarding incremental codebase coverage &#x26; conversion, without the downside of such gradual type system: complex features to support existing patterns, slow analysis, diminishing return in terms of type coverage, etc.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/function.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Function\",\n\t\t\t\t\t\t\t\t\"order\": 100\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Can you believe we haven't covered function until now?</p>\\n<p>Functions are declared with <code>fun</code> and return the expression.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> greet = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> name<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; <span class=\\\"hljs-string\\\">\\\"Hello \\\"</span> ^ name;</code></pre>\\n      </div>\\n<p>This declares a function and assigns to it the name <code>greet</code>, which you can call like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>greet <span class=\\\"hljs-string\\\">\\\"world!\\\"</span>; <span class=\\\"hljs-comment\\\">/* \\\"Hello world!\\\" */</span></code></pre>\\n      </div>\\n<p>Multi-arguments functions have arguments separated by space:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> add = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> x<span class=\\\"hljs-params\\\"> y<span class=\\\"hljs-params\\\"> z<span class=\\\"hljs-params\\\"> </span></span></span></span></span>=&gt; x + y + z;\\nadd <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-number\\\">3</span>; <span class=\\\"hljs-comment\\\">/* 6 */</span></code></pre>\\n      </div>\\n<p>For longer functions, you'd surround the body with a block:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> greetMore = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> name<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; {\\n  <span class=\\\"hljs-keyword\\\">let</span> part1 = <span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>;\\n  part1 ^ <span class=\\\"hljs-string\\\">\\\" \\\"</span> ^ name\\n};</code></pre>\\n      </div>\\n<p><strong>Since function definitions occur often</strong>, we gave <code>let + fun</code> a shorthand:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> add x y z =&gt; x + y + z;\\n<span class=\\\"hljs-comment\\\">/* same as: let add = fun x y z =&gt; x + y + z; */</span></code></pre>\\n      </div>\\n<p><strong>Be mindful of function's precedence</strong>! You need to wrap the call with parentheses in some situations:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> increment x =&gt; x + <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> double x =&gt; x + x;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> eleven = increment (double <span class=\\\"hljs-number\\\">5</span>);</code></pre>\\n      </div>\\n<p>If you forget to wrap <code>double 5</code> in parentheses, you'd get <code>increment double 5</code>, as if the <code>increment</code> function wrongly takes two arguments.</p>\\n<h3 id=\\\"no-argument\\\"><a href=\\\"#no-argument\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>No Argument</h3>\\n<p>A function always takes an argument; but sometimes, we'd use it for e.g. side-effects, and don't have anything to pass to it. In other languages, we'd conceptually pass \\\"no argument\\\". In Reason, every function takes an argument; here we'd conventionally pass it the value <code>()</code>, called \\\"unit\\\".</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* receive &amp; destructure the unit argument */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> logSomething () =&gt; {\\n  print_endline <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>;\\n  print_endline <span class=\\\"hljs-string\\\">\\\"world\\\"</span>;\\n};\\n\\n<span class=\\\"hljs-comment\\\">/* call the function with the value of type unit */</span>\\nlogSomething ();</code></pre>\\n      </div>\\n<p><code>()</code> is a totally normal value, the single possible value in <code>unit</code>. Reason gave it a special syntax out of convenience.</p>\\n<h3 id=\\\"labeled-arguments\\\"><a href=\\\"#labeled-arguments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Labeled Arguments</h3>\\n<p>Multi-arguments functions, especially those whose arguments are of the same type, can be confusing to call.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> addCoordinates x y =&gt; {\\n  <span class=\\\"hljs-comment\\\">/* use x and y here */</span>\\n};\\n...\\naddCoordinates <span class=\\\"hljs-number\\\">5</span> <span class=\\\"hljs-number\\\">6</span>; <span class=\\\"hljs-comment\\\">/* which is x, which is y? */</span></code></pre>\\n      </div>\\n<p>In OCaml/Reason, you can attach labels to an argument:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> addCoordinates x::x y::y =&gt; {\\n  <span class=\\\"hljs-comment\\\">/* use x and y here */</span>\\n};\\n...\\naddCoordinates x::<span class=\\\"hljs-number\\\">5</span> y::<span class=\\\"hljs-number\\\">6</span>;</code></pre>\\n      </div>\\n<p>Since we have currying (more on that below), we can provide the arguments in any order:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>addCoordinates y::<span class=\\\"hljs-number\\\">6</span> x::<span class=\\\"hljs-number\\\">5</span>;</code></pre>\\n      </div>\\n<p>The <code>x::x</code> part during declaration means the function accepts an argument labeled <code>x</code> and can refer to it in the function body as the variable <code>x</code>. This is so that we can have the following pattern, where labeled arguments are renamed inside the function for conciseness:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> drawCircle radius::r color::<span class=\\\"hljs-built_in\\\">c</span> =&gt; {\\n  setColor <span class=\\\"hljs-built_in\\\">c</span>;\\n  startAt r r;\\n  ...\\n};\\n\\ndrawCircle radius::<span class=\\\"hljs-number\\\">10</span> color::<span class=\\\"hljs-string\\\">\\\"red\\\"</span>;</code></pre>\\n      </div>\\n<p>For the common case of <code>radius::radius</code> (where the label is the same as the local variable name), we have the syntax shorthand <code>::x</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> drawCircle ::radius ::color =&gt; {\\n  setColor color;\\n  startAt radius radius;\\n  ...\\n}</code></pre>\\n      </div>\\n<p>Here's the syntax for typing the arguments:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> drawCircle radius::(r: int) color::(<span class=\\\"hljs-built_in\\\">c</span>: string) =&gt; ...;</code></pre>\\n      </div>\\n<h3 id=\\\"optional-labeled-arguments\\\"><a href=\\\"#optional-labeled-arguments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Optional Labeled Arguments</h3>\\n<p>Labeled function arguments can be made optional during declaration. You can then omit them when calling the function.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* radius can be omitted */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> drawCircle ::color ::radius=? () =&gt; {\\n  setColor color;\\n  <span class=\\\"hljs-keyword\\\">switch</span> radius {\\n  | <span class=\\\"hljs-type\\\">None</span> =&gt; startAt <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-number\\\">1</span>;\\n  | <span class=\\\"hljs-type\\\">Some</span> r_ =&gt; startAt r_ r_;\\n  }\\n};</code></pre>\\n      </div>\\n<p>If omitted, <code>radius</code> is <strong>wrapped</strong> in the standard library's <code>option</code> type, defaulting to <code>None</code>. If provided, it'll be wrapped with a <code>Some</code>. So <code>radius</code>'s type value is either <code>None</code> or <code>Some int</code> here.</p>\\n<p><strong>Note</strong>: <code>None | Some foo</code> is a data structure type called variant, described <a href=\\\"/guide/language/variant\\\">below</a>. This particular variant type is provided by the standard library. It's called <code>option</code>. Its definition: <code>type option 'a = None | Some 'a</code>.</p>\\n<p><strong>Note</strong> the unit <code>()</code> at the end of <code>drawCircle</code>. Without it, since <code>radius</code> and <code>color</code> are both labeled, can be curried, and can be applied out-of-order, it's unclear what the following mean:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> whatIsThis = drawCircle ::color;</code></pre>\\n      </div>\\n<p>Is <code>whatIsThis</code> a curried <code>drawCircle</code> function, waiting for the optional <code>radius</code> to be applied? Or did it finish applying? To address this confusion, append a positional (aka non-labeled) argument to <code>drawCircle</code> (conventionally <code>()</code>), and OCaml will, as a rule of thumb, presume the optional labeled argument is omitted when the positional argument is provided.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> curriedFunction = drawCircle ::color;\\n<span class=\\\"hljs-keyword\\\">let</span> actualResultWithoutProvidingRadius = drawCircle ::color ();</code></pre>\\n      </div>\\n<h4 id=\\\"explicitly-passed-optional\\\"><a href=\\\"#explicitly-passed-optional\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Explicitly Passed Optional</h4>\\n<p>Sometimes, you might want to forward a value to a function without knowing whether the value is <code>None</code> or <code>Some a</code>. Naively, you'd do:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> result = <span class=\\\"hljs-keyword\\\">switch</span> payloadRadius {\\n| <span class=\\\"hljs-type\\\">None</span> =&gt; drawCircle ::color ()\\n| <span class=\\\"hljs-type\\\">Some</span> r =&gt; drawCircle ::color radius::r ()\\n};</code></pre>\\n      </div>\\n<p>This quickly gets tedious. We provide a shortcut:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> result = drawCircle ::color radius::?payloadRadius ();</code></pre>\\n      </div>\\n<p>This means \\\"I understand <code>radius</code> is optional, and that when I pass it a value it needs to be an <code>int</code>, but I don't know whether the value I'm passing is <code>None</code> or <code>Some val</code>, so I'll pass you the whole <code>option</code> wrapper\\\".</p>\\n<h4 id=\\\"optional-with-default-value\\\"><a href=\\\"#optional-with-default-value\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Optional with Default Value</h4>\\n<p>Optional labeled arguments can also be provided a default value. They aren't wrapped in an <code>option</code> type.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> drawCircle ::radius=<span class=\\\"hljs-number\\\">1</span> ::color () =&gt; {\\n  setColor color;\\n  startAt r r;\\n};</code></pre>\\n      </div>\\n<h4 id=\\\"recursive-functions\\\"><a href=\\\"#recursive-functions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Recursive Functions</h4>\\n<p>By default, values can't see a binding that points to it, but including the\\n<code>rec</code> keyword in a <code>let</code> binding makes this possible. This allows functions\\nto see and call themselves, giving us the power of recursion.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-keyword\\\">rec</span> neverTerminate = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> ()<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; neverTerminate ();</code></pre>\\n      </div>\\n<h4 id=\\\"mutually-recursive-functions\\\"><a href=\\\"#mutually-recursive-functions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mutually Recursive Functions</h4>\\n<p>Mutually recursive functions start like a single recursive function using the\\n<code>rec</code> keyword, and then are chained together with <code>and</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-keyword\\\">rec</span> callSecond = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> ()<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; callFirst ()\\nand callFirst = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> ()<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; callSecond ();</code></pre>\\n      </div>\\n<p><strong>Note</strong> that there's no semicolon ending the first line and no <code>let</code> on the second line.</p>\\n<h4 id=\\\"currying\\\"><a href=\\\"#currying\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Currying</h4>\\n<p>Reason functions can automatically be <strong>partially</strong> called:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> add = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> x<span class=\\\"hljs-params\\\"> y<span class=\\\"hljs-params\\\"> </span></span></span></span>=&gt; x + y;\\n<span class=\\\"hljs-keyword\\\">let</span> addFive = add <span class=\\\"hljs-number\\\">5</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> eleven = addFive <span class=\\\"hljs-number\\\">6</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> twelve = addFive <span class=\\\"hljs-number\\\">7</span>;</code></pre>\\n      </div>\\n<p>Actually, the above <code>add</code> is nothing but syntactic sugar for this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> add = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> x<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> y<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; x + y;</code></pre>\\n      </div>\\n<p>OCaml optimizes this to avoid the unnecessary function allocation (2 functions here, naively speaking) whenever it can! This way, we get</p>\\n<ul>\\n<li>Nice syntax</li>\\n<li>Currying for free (every function takes a single argument, actually!)</li>\\n<li>No performance cost</li>\\n</ul>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/if-else.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"If-Else\",\n\t\t\t\t\t\t\t\t\"order\": 110\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">if</span> (showMenu) {\\n  displayMenu ();\\n};</code></pre>\\n      </div>\\n<p>Reason <code>if</code>s are expressions; they're evaluated to their body's content:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-keyword\\\">if</span> (isMorning) {\\n  <span class=\\\"hljs-string\\\">\\\"Good morning!\\\"</span>\\n} <span class=\\\"hljs-keyword\\\">else</span> {\\n  <span class=\\\"hljs-string\\\">\\\"Hello!\\\"</span>\\n};</code></pre>\\n      </div>\\n<p>We also have ternary sugar.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = isMorning ? <span class=\\\"hljs-string\\\">\\\"Good morning!\\\"</span> : <span class=\\\"hljs-string\\\">\\\"Hello!\\\"</span>;</code></pre>\\n      </div>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p><strong><code>if-else</code> and ternary are much less used</strong> in Reason than in other languages; <a href=\\\"/guide/language/pattern-matching\\\">Pattern-matching</a> kills a whole category of code that previously required conditionals. Prefer <code>if-else</code> if you only have, say, 2 branches.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>Reason ternary is just a sugar for the <code>bool</code> variant and a switch:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">switch</span> isMorning {\\n| <span class=\\\"hljs-literal\\\">true</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Good morning!\\\"</span>\\n| <span class=\\\"hljs-literal\\\">false</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Hello!\\\"</span>\\n}</code></pre>\\n      </div>\\n<p>If you pass that through <a href=\\\"/guide/editor-tools/extra-goodies#refmt\\\"><code>refmt</code></a>, you'd get:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>isMorning ? <span class=\\\"hljs-string\\\">\\\"Good morning!\\\"</span> : <span class=\\\"hljs-string\\\">\\\"Hello!\\\"</span>;</code></pre>\\n      </div>\\n<p>Interested? Here's a <a href=\\\"https://medium.com/@chenglou/cool-things-reason-formatter-does-9e1f79e25a82\\\">blog post</a> about the spirit of our <code>refmt</code>.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Language basics\",\n\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Start your Reason learning journey here! A few pointers:</p>\\n<ul>\\n<li>Many sections have a \\\"Tip &#x26; Tricks\\\" and \\\"Design Decisions\\\" section. These are optional reads; feel free to skip them, but do come around and learn the extra tidbits!</li>\\n<li>If you need to bind to an existing JS library, <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_ffi\\\">BuckleScript's FFI</a> is your friend.</li>\\n<li>If you ever feel stuck, ask a question in <a href=\\\"/community\\\">our community</a> and/or submit a pull request by clicking the \\\"Suggest an edit\\\" button on the right.</li>\\n</ul>\\n<p>Enjoy!</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/imperative-loops.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Imperative Loops\",\n\t\t\t\t\t\t\t\t\"order\": 150\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"for-loops\\\"><a href=\\\"#for-loops\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>For Loops</h3>\\n<p>For loops iterate from a starting value up to (and including) the ending value.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">for</span> myBinding <span class=\\\"hljs-keyword\\\">in</span> (startValue) <span class=\\\"hljs-keyword\\\">to</span> (endValue) {\\n  <span class=\\\"hljs-comment\\\">/* use myBinding here */</span>\\n};</code></pre>\\n      </div>\\n<p>The parenthesis around <code>startValue</code> and <code>endValue</code> may be omitted if they are\\nunnecessary.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> xStart = <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> xEnd = <span class=\\\"hljs-number\\\">3</span>;\\n<span class=\\\"hljs-comment\\\">/* prints: 1 2 3 */</span>\\n<span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> xStart <span class=\\\"hljs-keyword\\\">to</span> xEnd {\\n  print_int x;\\n  print_string <span class=\\\"hljs-string\\\">\\\" \\\"</span>;\\n};</code></pre>\\n      </div>\\n<p>You can make the <code>for</code> loop count in the opposite direction by using <code>downto</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">for</span> myBinding <span class=\\\"hljs-keyword\\\">in</span> (startValue) <span class=\\\"hljs-keyword\\\">downto</span> (endValue) {\\n  statements\\n};</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> xStart = <span class=\\\"hljs-number\\\">3</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> xEnd = <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-comment\\\">/* prints: 3 2 1 */</span>\\n<span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> xStart <span class=\\\"hljs-keyword\\\">downto</span> xEnd {\\n  print_int x;\\n  print_string <span class=\\\"hljs-string\\\">\\\" \\\"</span>;\\n};</code></pre>\\n      </div>\\n<h3 id=\\\"while-loops\\\"><a href=\\\"#while-loops\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>While Loops</h3>\\n<p>While loops execute a code block while some condition is true. The form of a <code>while</code> loop includes a single expression, the condition to test.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">while</span> (<span class=\\\"hljs-forDocGrammarHighlighting\\\">testCondition</span>) {\\n  statements;\\n};</code></pre>\\n      </div>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p>There's no loop-breaking <code>break</code> keyword (nor early <code>return</code> from functions, for that matter) in Reason. In general, prefer <code>map</code>/<code>filter</code>/<code>reduce</code> over imperative loops. However, we can break out of a while loop easily through using a <a href=\\\"/guide/language/mutation\\\">mutable binding</a>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">Random</span>.self_init ();\\n<span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-keyword\\\">break</span> = <span class=\\\"hljs-keyword\\\">ref</span> <span class=\\\"hljs-literal\\\">false</span>;\\n<span class=\\\"hljs-keyword\\\">while</span> (not !<span class=\\\"hljs-keyword\\\">break</span>) {\\n  <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-type\\\">Random</span>.int <span class=\\\"hljs-number\\\">10</span> === <span class=\\\"hljs-number\\\">3</span>) {\\n    <span class=\\\"hljs-keyword\\\">break</span> := <span class=\\\"hljs-literal\\\">true</span>\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    print_endline <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>\\n  }\\n};</code></pre>\\n      </div>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/jsx.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"JSX\",\n\t\t\t\t\t\t\t\t\"order\": 160\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Would you like some HTML syntax in your Reason? If not, quickly skip over this section and pretend you didn't see anything!</p>\\n<p>Reason supports the JSX syntax, with some slight differences compared to the one in <a href=\\\"https://facebook.github.io/react/docs/introducing-jsx.html\\\">ReactJS</a>. Reason JSX isn't tied to ReactJS; they translate to normal function calls:</p>\\n<h3 id=\\\"capitalized-tag\\\"><a href=\\\"#capitalized-tag\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Capitalized Tag</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>&lt;<span class=\\\"hljs-type\\\">MyComponent</span> foo=bar /&gt;</code></pre>\\n      </div>\\n<p>becomes</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-type\\\">MyComponent</span>.make foo::bar children::[] ()</code></pre>\\n      </div>\\n<h3 id=\\\"uncapitalized-tag\\\"><a href=\\\"#uncapitalized-tag\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Uncapitalized Tag</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>&lt;div foo=bar&gt;child1 child2&lt;/div&gt;</code></pre>\\n      </div>\\n<p>becomes</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>div foo::bar children::[child1, child2] () [@<span class=\\\"hljs-type\\\">JSX</span>]</code></pre>\\n      </div>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>See <a href=\\\"//reasonml.github.io/reason-react/\\\">ReasonReact</a> for an example application of JSX.</p>\\n<p>Here's a JSX tag that shows most of the features.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>&lt;<span class=\\\"hljs-type\\\">MyComponent</span>\\n  booleanAttribute=<span class=\\\"hljs-literal\\\">true</span>\\n  stringAttribute=<span class=\\\"hljs-string\\\">\\\"string\\\"</span>\\n  intAttribute=<span class=\\\"hljs-number\\\">1</span>\\n  forcedOptional=?(<span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>)\\n  onClick={updater handleClick}\\n  onClickThisWorksToo=(updater handleClick)&gt;\\n  &lt;div&gt;\\n    (<span class=\\\"hljs-type\\\">ReasonReact</span>.stringToElement <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>)\\n  &lt;/div&gt;\\n&lt;/<span class=\\\"hljs-type\\\">MyComponent</span>&gt;</code></pre>\\n      </div>\\n<h3 id=\\\"departures-from-js-jsx\\\"><a href=\\\"#departures-from-js-jsx\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Departures From JS JSX</h3>\\n<ul>\\n<li>Attributes don't mandate curly braces, unless they're complex expressions (in which case they're formatted to parentheses).</li>\\n<li>There is no support for JSX spread attributes.</li>\\n<li>Punning!</li>\\n</ul>\\n<h4 id=\\\"punning\\\"><a href=\\\"#punning\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Punning</h4>\\n<p>ReactJS JSX's argument punning, e.g. <code>&#x3C;input checked /></code>, due to unfortunate historical reasons, desugars to <code>&#x3C;input checked=true /></code>, in order to conform to DOM's idioms. Reason doesn't have such baggage, so we've decided to desugar it to <code>&#x3C;input checked=checked /></code>. This allows folks to cram many more props into a ReasonReact component without it looking too bloated:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>&lt;<span class=\\\"hljs-type\\\">MyComponent</span> isLoading text onClick /&gt;</code></pre>\\n      </div>\\n<h3 id=\\\"tip--tricks\\\"><a href=\\\"#tip--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tip &#x26; Tricks</h3>\\n<p>For library authors wanting to take advantage of the JSX: the <code>[@JSX]</code> attribute above is a hook for potential ppx macros to spot a function wanting to format as JSX. Once you spot the function, you can turn it into any other expression.</p>\\n<p>This way, everyone gets to benefit the JSX syntax without needing to opt into a specific library using it, e.g. ReasonReact.</p>\\n<p>JSX calls supports the features of <a href=\\\"/guide/language/function#labeled-arguments\\\">labeled functions</a>: optional, explicitly passed optional and optional with default.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>The way we designed this JSX is related to how we'd like to help the language evolve. See the section \\\"What's the point?\\\" in <a href=\\\"https://medium.com/@chenglou/cool-things-reason-formatter-does-9e1f79e25a82\\\">this blog post</a>.</p>\\n<p>The ability to have macros in the language + the library-agnostic JSX syntax allows every library to potentially have JSX without hassle. This way, we add some visual familiarities to the underlying OCaml language without compromising on its semantics (aka how it executes). One big goal of Reason is to let more folks take advantage of the beautiful language that is OCaml, while discarding the time-consuming debates around syntax and formatting.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/integer-and-float.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Integer & Float\",\n\t\t\t\t\t\t\t\t\"order\": 40\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"integers\\\"><a href=\\\"#integers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Integers</h3>\\n<p>32-bits, truncated when necessary. Reason provides the usual operations on them: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, etc.</p>\\n<h4 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h4>\\n<p>See the <a href=\\\"/api/Int32.html\\\">Int32 module</a> in the standard library. For JS compilation, see <a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.Int.html\\\">Js.Int</a>.</p>\\n<h4 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h4>\\n<p><strong>Careful when you bind to JavaScript numbers</strong>! Long ones might be truncated. Bind JS number as float instead.</p>\\n<h3 id=\\\"floats\\\"><a href=\\\"#floats\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Floats</h3>\\n<p>Float requires other operators: <code>+.</code>, <code>-.</code>, <code>*.</code>, <code>/.</code>, etc. Like <code>0.5 +. 0.6</code>.</p>\\n<h4 id=\\\"usage-1\\\"><a href=\\\"#usage-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h4>\\n<p>There's no Float module in the current standard library. For JS compilation, see <a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.Float.html\\\">Js.Float</a>.</p>\\n<h4 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h4>\\n<p>\\\"Why the heck can't I just use an overloaded <code>+</code> for both int and float? Why is it that each time I find a performant language with great types and interop and community, I find these kind of flaws?\\\"</p>\\n<p>There, there. Polymorphic operators, under the current type system, would need to be hard-coded into the compiler. The physical polymorphic equal, <code>==</code>, is such an operator; <code>+</code> and the rest aren't. <a href=\\\"https://www.reddit.com/r/ocaml/comments/2vyk10/modular_implicits/\\\">Improvements are under way</a> to make them work as desired. In the meantime, let's keep shipping =).</p>\\n<p>Additionally, floats are rather special in Reason/OCaml native. <a href=\\\"http://www.lexifi.com/blog/unboxed-floats-ocaml\\\">Check here</a> if you're interested in learning some rather interesting optimizations!</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/more-on-type.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"More on Type\",\n\t\t\t\t\t\t\t\t\"order\": 120\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"type-argument\\\"><a href=\\\"#type-argument\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Type Argument!</h3>\\n<p>Types can accept parameters, akin to generics in other languages. It's as if a type is a function that takes in arguments and returns a new type! The parameters <strong>need</strong> to start with <code>'</code>.</p>\\n<p>The use-case of a parameterized type is to kill duplications. Before:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* this is a tuple of 3 items, explained next */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> intCoordinates = (int, int, int);\\n<span class=\\\"hljs-keyword\\\">type</span> floatCoordinates = (float, float, float);\\n\\n<span class=\\\"hljs-keyword\\\">let</span> buddy: intCoordinates = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-number\\\">20</span>);</code></pre>\\n      </div>\\n<p>After:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> coordinates 'a = ('a, 'a, 'a);\\n\\n<span class=\\\"hljs-comment\\\">/* apply the coordinates \\\"type function\\\" and return the type (int, int, int) */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> intCoordinatesAlias = coordinates int;\\n<span class=\\\"hljs-keyword\\\">let</span> buddy: intCoordinatesAlias = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-number\\\">20</span>);\\n\\n<span class=\\\"hljs-comment\\\">/* or, more commonly, write it inline */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> buddy: coordinates float = (<span class=\\\"hljs-number\\\">10.5</span>, <span class=\\\"hljs-number\\\">20.5</span>, <span class=\\\"hljs-number\\\">20.5</span>);</code></pre>\\n      </div>\\n<p>In practice, types are inferred for you. So the more concise version of the above example would be nothing but:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> buddy = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-number\\\">20</span>);</code></pre>\\n      </div>\\n<p>The type system infers that it's a <code>(int, int, int)</code>. Nothing else needed to be written down.</p>\\n<p>Type arguments appear everywhere.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* inferred as `list string` */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> greetings = [<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>, <span class=\\\"hljs-string\\\">\\\"world\\\"</span>, <span class=\\\"hljs-string\\\">\\\"how are you\\\"</span>];</code></pre>\\n      </div>\\n<p>If types didn't accept parameters (aka, if we didn't have \\\"type functions\\\"), the standard library will need to define the types <code>listOfString</code>, <code>listOfInt</code>, <code>listOfTuplesOfInt</code>, etc.</p>\\n<p>Types can receive more arguments, and be composable.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> result 'a 'b =\\n| <span class=\\\"hljs-type\\\">Ok</span> 'a\\n| <span class=\\\"hljs-type\\\">Error</span> 'b;\\n\\n<span class=\\\"hljs-keyword\\\">type</span> myPayload = {data: string};\\n\\n<span class=\\\"hljs-keyword\\\">type</span> myPayloadResults 'errorType = list (result myPayload 'errorType);\\n\\n<span class=\\\"hljs-keyword\\\">let</span> payloadResults: myPayloadResults string = [\\n  <span class=\\\"hljs-type\\\">Ok</span> {data: <span class=\\\"hljs-string\\\">\\\"hi\\\"</span>},\\n  <span class=\\\"hljs-type\\\">Ok</span> {data: <span class=\\\"hljs-string\\\">\\\"bye\\\"</span>},\\n  <span class=\\\"hljs-type\\\">Error</span> <span class=\\\"hljs-string\\\">\\\"Something wrong happened!\\\"</span>\\n];</code></pre>\\n      </div>\\n<h3 id=\\\"mutually-recursive-types\\\"><a href=\\\"#mutually-recursive-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mutually Recursive Types</h3>\\n<p>Just like functions, types can be mutually recursive through <code>and</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> student = {taughtBy: teacher}\\nand teacher = {students: list student};</code></pre>\\n      </div>\\n<p><strong>Note</strong> that there's no semicolon ending the first line and no <code>type</code> on the second line.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>A type system allowing type argument is basically allowing type-level functions. <code>list int</code> is really the <code>list</code> type function taking in the <code>int</code> type, and returning the final, concrete type you'd use in some places. You might have noticed that in other languages, this is more or less called \\\"generics\\\". For example, <code>ArrayList&#x3C;Integer></code> in Java.</p>\\n<p><a href=\\\"https://en.wikipedia.org/wiki/Rule_of_least_power\\\">The principle of least power</a> applies when you're trying to \\\"Get Things Done\\\". If the problem domain allows, definitely pick the least abstract (aka, the most concrete) solution available, so that the solution is reached faster and has fewer unstable indirections you'd have to traverse. For example, prefer types over free-form data, prefer data-driven configuration over turing-complete function calls, prefer function calls over macros, prefer macros over project forks, etc. When you constraint your domain and power, things become easier to analyze. That is, <em>if</em> the domain is constrained enough to allow it.</p>\\n<p>When a type system is an all-encompassing aspect of your program, we need to make sure we leave enough power order not to overly constrain your expressiveness; without \\\"type functions\\\", you'd end up with quite a bit of boilerplate, e.g. hard-coded <code>listOfInt</code>, <code>listOfString</code>, <code>listOfArrayOfFloat</code>, their respective helper functions, etc. However, please also make sure you don't overly abuse the power given to you through a rather powerful type system. Sometimes, it's fine to write a <em>little</em> bit of boilerplate to reduce the need for otherwise extra powerful types. If anything, tasteful tradeoffs might show your pragmatism and judgement more than fancy types!</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/let-binding.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Let Binding\",\n\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>A \\\"let binding\\\", in other languages, might be called a \\\"variable declaration/assignment\\\". <code>let</code> gives names to values. They can be seen and referenced by code that comes after them.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> greeting = <span class=\\\"hljs-string\\\">\\\"hello!\\\"</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> score = <span class=\\\"hljs-number\\\">10</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> newScore = <span class=\\\"hljs-number\\\">10</span> + score;\\n...</code></pre>\\n      </div>\\n<h3 id=\\\"block-scope\\\"><a href=\\\"#block-scope\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Block Scope</h3>\\n<p>Bindings can be scoped through <code>{}</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">if</span> (displayGreeting) {\\n  <span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-string\\\">\\\"Enjoying the docs so far?\\\"</span>;\\n  print_endline message;\\n};\\n<span class=\\\"hljs-comment\\\">/* `message` not accessible here! */</span></code></pre>\\n      </div>\\n<h3 id=\\\"bindings-are-immutable\\\"><a href=\\\"#bindings-are-immutable\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Bindings Are Immutable</h3>\\n<p>\\\"Immutable\\\" as in, \\\"doesn't change\\\". Once a binding refers to a value, it cannot refer to anything else (unless it\\nexplicitly contains a mutable value, discussed later). However, you may create a new binding of the same name which <em>shadows</em> the previous binding; from that point onward, the binding will refer to the newly assigned value.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>;\\nprint_endline message; <span class=\\\"hljs-comment\\\">/* Prints \\\"hello\\\" */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-string\\\">\\\"bye\\\"</span>;\\nprint_endline message; <span class=\\\"hljs-comment\\\">/* Prints \\\"bye\\\" */</span></code></pre>\\n      </div>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p>Since bindings are scoped through <code>{}</code>, you can create an anonymous scope around them:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = {\\n  <span class=\\\"hljs-keyword\\\">let</span> part1 = <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>;\\n  <span class=\\\"hljs-keyword\\\">let</span> part2 = <span class=\\\"hljs-string\\\">\\\"world\\\"</span>;\\n  part1 ^ <span class=\\\"hljs-string\\\">\\\" \\\"</span> ^ part2\\n};\\n<span class=\\\"hljs-comment\\\">/* `part1` and `part2` not accessible here! */</span></code></pre>\\n      </div>\\n<p>This prevents misuse of the bindings after these lines.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>Reason is backed by OCaml under the hood. a let binding, in OCaml syntax, looks like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-keyword\\\">in</span>\\n<span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-keyword\\\">in</span>\\na + b</code></pre>\\n      </div>\\n<p>This could be conceptually read in this format instead:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-keyword\\\">in</span>\\n  <span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-keyword\\\">in</span>\\n    a + b</code></pre>\\n      </div>\\n<p>Which is the following in Reason:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-number\\\">2</span>;\\na + b;</code></pre>\\n      </div>\\n<p>Which might remind you of:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Reason syntax */</span>\\n<span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> a<span class=\\\"hljs-params\\\"> </span></span></span>=&gt;\\n  <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> b<span class=\\\"hljs-params\\\"> </span></span></span>=&gt;\\n    a + b;</code></pre>\\n      </div>\\n<p>Though they're not strictly the same, hopefully you can see that <code>let</code> is just an expression and akin to a function! In Reason, we've turned <code>in</code> into <code>;</code> for visual familiarity; but don't let that hide the underlying elegance of expressions.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/list-and-array.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"List & Array\",\n\t\t\t\t\t\t\t\t\"order\": 80\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"list\\\"><a href=\\\"#list\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>List</h3>\\n<p>Lists are:</p>\\n<ul>\\n<li>homogeneous</li>\\n<li>immutable</li>\\n<li>fast at prepending items</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myList = [<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>];</code></pre>\\n      </div>\\n<p>Reason lists are simple, singly linked list.</p>\\n<h4 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h4>\\n<p>You'd use list for its resizability, its fast prepend (adding at the head), and its fast split, all of which are immutable yet efficient!</p>\\n<p>The standard lib provides a <a href=\\\"/api/List.html\\\">List module</a> (and its counterpart with labeled arguments, <code>ListLabels</code>).</p>\\n<h5 id=\\\"immutable-prepend\\\"><a href=\\\"#immutable-prepend\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Immutable Prepend</h5>\\n<p>Use the spread syntax, which is just <code>List.cons</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myList = [<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>];\\n<span class=\\\"hljs-keyword\\\">let</span> anotherList = [<span class=\\\"hljs-number\\\">0</span>, ...myList];</code></pre>\\n      </div>\\n<p><code>myList</code> didn't mutate. <code>anotherList</code> is now <code>[0, 1, 2, 3]</code>. This is efficient (constant time, not linear). <code>anotherList</code>'s last 3 elements are shared with <code>myList</code>!</p>\\n<p><strong>Note that <code>[a, ...b, ...c]</code> is a syntax error</strong>. We don't support multiple spread for a list. That'd be an accidental linear operation (<code>O(b)</code>), since each item of b would be one-by-one added to the head of <code>c</code>. You can use <code>List.concat</code> for this.</p>\\n<p>Updating an arbitrary item in the middle of a list is discouraged, since its performance and allocation overhead would be linear (<code>O(n)</code>).</p>\\n<h5 id=\\\"access\\\"><a href=\\\"#access\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Access</h5>\\n<p><code>switch</code> (described in the <a href=\\\"/guide/language/pattern-matching\\\">pattern matching section</a>) is usually used to access list items:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = switch myList {\\n| <span class=\\\"hljs-literal\\\">[]</span> =&gt; <span class=\\\"hljs-string\\\">\\\"This list is empty\\\"</span>\\n| [a, ...rest] =&gt; <span class=\\\"hljs-string\\\">\\\"The head of the list is the string \\\"</span> ^ a\\n}</code></pre>\\n      </div>\\n<p>To access an arbitrary list item, use <code>List.nth</code>.</p>\\n<h4 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h4>\\n<p>Feel free to allocate as many empty lists as you'd like. As explained in the <a href=\\\"/guide/language/variant#list\\\">variant section for list</a>, an empty list is actually a parameter-less variant constructor under the hood, which compiles to a mere integer. No extra memory allocation needed.</p>\\n<p>To understand how prepend can be immutable and <code>O(1)</code> at the same time, see the explanation of <a href=\\\"/guide/language/variant#list\\\">list's underlying representation</a>.</p>\\n<h4 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h4>\\n<p>In the future, we might provide an out-of-the-box list data structure that's immutable, resizable and features all-around fast operations, such as <a href=\\\"https://github.com/facebookincubator/immutable-re\\\">Immutable-re</a> (still work in progress!).</p>\\n<h3 id=\\\"array\\\"><a href=\\\"#array\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Array</h3>\\n<p>Arrays are like lists, except they are:</p>\\n<ul>\\n<li>mutable</li>\\n<li>fast at random access &#x26; updates</li>\\n<li>fix-sized on native (flexibly sized on JavaScript)</li>\\n</ul>\\n<p>You'd surround them with <code>[|</code> and <code>|]</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myArray = [|<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>, <span class=\\\"hljs-string\\\">\\\"world\\\"</span>, <span class=\\\"hljs-string\\\">\\\"how are you\\\"</span>|];</code></pre>\\n      </div>\\n<h4 id=\\\"usage-1\\\"><a href=\\\"#usage-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h4>\\n<p>Standard library <a href=\\\"/api/Array.html\\\">Array</a> and <a href=\\\"/api/ArrayLabels.html\\\">ArrayLabel</a> module. For JS compilation, you also have the familiar <a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.Array.html\\\">Js.Array</a> bindings API.</p>\\n<p>Access &#x26; update an array item like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myArray = [|<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>, <span class=\\\"hljs-string\\\">\\\"world\\\"</span>, <span class=\\\"hljs-string\\\">\\\"how are you\\\"</span>|];\\n\\n<span class=\\\"hljs-keyword\\\">let</span> firstItem = myArray.(<span class=\\\"hljs-number\\\">0</span>); <span class=\\\"hljs-comment\\\">/* \\\"hello\\\" */</span>\\n\\nmyArray.(<span class=\\\"hljs-number\\\">0</span>) = <span class=\\\"hljs-string\\\">\\\"hey\\\"</span>;\\n\\n<span class=\\\"hljs-comment\\\">/* now [|\\\"hey\\\", \\\"world\\\", \\\"how are you\\\"|] */</span></code></pre>\\n      </div>\\n<p>The above array access/update is just syntax sugar for <code>Array.get</code>/<code>Array.set</code>.</p>\\n<h4 id=\\\"tips--tricks-1\\\"><a href=\\\"#tips--tricks-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h4>\\n<p>If you're compiling to JavaScript, know that Reason arrays map straightforwardly to JavaScript arrays, and vice-versa. Thus, even though arrays are fix-sized on native, you can still use the <code>Js.Array</code> API to resize them. This is fine.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/module.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Module\",\n\t\t\t\t\t\t\t\t\"order\": 180\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"basics\\\"><a href=\\\"#basics\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Basics</h3>\\n<p><strong>Modules are like mini files</strong>! They can contain type definitions, <code>let</code>\\nbindings, nested modules, etc.</p>\\n<h4 id=\\\"creation\\\"><a href=\\\"#creation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creation</h4>\\n<p>To create a module, use the <code>module</code> keyword. The module name must start with a\\n<strong>capital letter</strong>. Whatever you could place in a <code>.re</code> file, you may place\\ninside a module definition's <code>{}</code> block.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">School</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> profession = <span class=\\\"hljs-type\\\">Teacher</span> | <span class=\\\"hljs-type\\\">Director</span>;\\n\\n  <span class=\\\"hljs-keyword\\\">let</span> person1 = <span class=\\\"hljs-type\\\">Teacher</span>;\\n  <span class=\\\"hljs-keyword\\\">let</span> getProfession person =&gt;\\n    <span class=\\\"hljs-keyword\\\">switch</span> person {\\n    | <span class=\\\"hljs-type\\\">Teacher</span> =&gt; <span class=\\\"hljs-string\\\">\\\"A teacher\\\"</span>\\n    | <span class=\\\"hljs-type\\\">Director</span> =&gt; <span class=\\\"hljs-string\\\">\\\"A director\\\"</span>\\n    };\\n};</code></pre>\\n      </div>\\n<p>A module's contents (including types!) can be accessed much like a record's,\\nusing the <code>.</code> notation. This demonstrates modules' utility for namespacing.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> anotherPerson: <span class=\\\"hljs-type\\\">School</span>.profession = <span class=\\\"hljs-type\\\">School</span>.<span class=\\\"hljs-type\\\">Teacher</span>;\\nprint_endline (<span class=\\\"hljs-type\\\">School</span>.getProfession anotherPerson); <span class=\\\"hljs-comment\\\">/* \\\"A teacher\\\" */</span></code></pre>\\n      </div>\\n<p>Nested modules work too.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">MyModule</span> = </span>{\\n  <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">NestedModule</span> = </span>{\\n     <span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-string\\\">\\\"hello\\\"</span>;\\n  };\\n};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-type\\\">MyModule</span>.<span class=\\\"hljs-type\\\">NestedModule</span>.message;</code></pre>\\n      </div>\\n<h4 id=\\\"opening-a-module\\\"><a href=\\\"#opening-a-module\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>open</code>ing a module</h4>\\n<p>Constantly referring to a value/type in a module can be tedious. We can open a\\nmodule's definition and refer to its contents without prepending them with the\\nmodule's name. Two ways:</p>\\n<p>Local open.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message =\\n  <span class=\\\"hljs-type\\\">School</span>.(\\n    <span class=\\\"hljs-keyword\\\">switch</span> person1 {\\n    | <span class=\\\"hljs-type\\\">Teacher</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Hello teacher!\\\"</span>\\n    | <span class=\\\"hljs-type\\\">Director</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Hello director!\\\"</span>\\n    }\\n  );</code></pre>\\n      </div>\\n<p>Global open. <strong>Use this sparingly as it allows convenience at the cost of ease\\nof reasoning</strong>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>open <span class=\\\"hljs-type\\\">School</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> anotherPerson: profession = <span class=\\\"hljs-type\\\">Teacher</span>;\\nprintProfession anotherPerson;</code></pre>\\n      </div>\\n<h4 id=\\\"extending-modules\\\"><a href=\\\"#extending-modules\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Extending modules</h4>\\n<p>Using <code>include</code> in a module statically \\\"spreads\\\" a module's content into\\na new one, thus often fulfill the role of \\\"inheritance\\\" or \\\"mixin\\\".</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">BaseComponent</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">let</span> defaultGreeting = <span class=\\\"hljs-string\\\">\\\"Hello\\\"</span>;\\n  <span class=\\\"hljs-keyword\\\">let</span> getAudience ::excited =&gt; excited ? <span class=\\\"hljs-string\\\">\\\"world!\\\"</span> : <span class=\\\"hljs-string\\\">\\\"world\\\"</span>;\\n};\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">ActualComponent</span> = </span>{\\n  <span class=\\\"hljs-comment\\\">/* the content is copied over */</span>\\n  <span class=\\\"hljs-keyword\\\">include</span> <span class=\\\"hljs-type\\\">BaseComponent</span>;\\n  <span class=\\\"hljs-comment\\\">/* overrides BaseComponent.defaultGreeting */</span>\\n  <span class=\\\"hljs-keyword\\\">let</span> defaultGreeting = <span class=\\\"hljs-string\\\">\\\"Hey\\\"</span>;\\n  <span class=\\\"hljs-keyword\\\">let</span> render () =&gt; defaultGreeting ^ <span class=\\\"hljs-string\\\">\\\" \\\"</span> ^ getAudience excited::<span class=\\\"hljs-literal\\\">true</span>;\\n};</code></pre>\\n      </div>\\n<p><strong>Note</strong>: <code>include</code> and <code>open</code> are very different! The former literally copies\\nover definitions into the new module for it to appropriate. The latter simply\\nallows refering to items (values, types, constructors, etc.) in the <code>open</code>ed\\nmodule's scope in an \\\"unqualified\\\" way (aka, <code>foo</code> instead of the qualified\\n<code>MyModule.foo</code>).</p>\\n<h4 id=\\\"every-re-file-is-a-module\\\"><a href=\\\"#every-re-file-is-a-module\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Every <code>.re</code> file is a module</h4>\\n<p>An OCaml/Reason file maps to a module; this unlocks some interesting\\nexpressivity that'd previously require code generation in other languages. The\\nfile <code>react.re</code> implicitly forms a module <code>React</code>, which can be seen by other\\nsource files.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* fileA.re. This typically compiles to module FileA below */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-number\\\">2</span>;\\n\\n<span class=\\\"hljs-comment\\\">/* fileB.re */</span>\\n<span class=\\\"hljs-comment\\\">/* Maps fileA's implementation to a new API */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> alpha = <span class=\\\"hljs-type\\\">FileA</span>.a;\\n<span class=\\\"hljs-keyword\\\">let</span> beta = <span class=\\\"hljs-type\\\">FileA</span>.b;</code></pre>\\n      </div>\\n<p>This contrived snippet expresses \\\"copying\\\" a file:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* fileA.re. This typically compiles to module FileA below */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-number\\\">2</span>;\\n\\n<span class=\\\"hljs-comment\\\">/* fileB.re */</span>\\n<span class=\\\"hljs-comment\\\">/* compiles to exactly fileA.re's content with no runtime overhead! */</span>\\n<span class=\\\"hljs-keyword\\\">include</span> <span class=\\\"hljs-type\\\">FileA</span>;</code></pre>\\n      </div>\\n<h2 id=\\\"signatures\\\"><a href=\\\"#signatures\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Signatures</h2>\\n<p>A module's type is called a \\\"signature\\\", and can be written explicitly. If a\\nmodule is like a <code>.re</code> (implementation) file, then a module's signature is like\\na <code>.rei</code> (interface) file.</p>\\n<h4 id=\\\"creation-1\\\"><a href=\\\"#creation-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creation</h4>\\n<p>To create a signature, use the <code>module type</code> keyword. The signature name must start with a\\n<strong>capital letter</strong>. Whatever you could place in a <code>.rei</code> file, you may place\\ninside a signature definition's <code>{}</code> block.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Picking up previous section's example */</span>\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">type</span> <span class=\\\"hljs-title\\\">EstablishmentType</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> profession;\\n  <span class=\\\"hljs-keyword\\\">let</span> getProfession: profession =&gt; string;\\n};</code></pre>\\n      </div>\\n<p>A signature defines the list of requirements that a module must satisfy in order\\nfor that module to match the signature. Those requirements are of the form:</p>\\n<ul>\\n<li>\\n<p><code>let x: int;</code> requires a <code>let</code> binding named <code>x</code>, of type <code>int</code>.</p>\\n</li>\\n<li>\\n<p><code>type t = someType;</code> requires a type field <code>t</code> to be equal to <code>someType</code>.</p>\\n</li>\\n<li>\\n<p><code>type t;</code> requires a type field <code>t</code>, but without imposing any requirements on\\nthe actual, concrete type of <code>t</code>. We'd use <code>t</code> in other entries in the\\nsignature to describe relationships, e.g. <code>let makePair: t -> (t, t)</code> but we\\ncannot, for example, assume that <code>t</code> is an <code>int</code>. This gives us great,\\nenforced abstraction abilities.</p>\\n</li>\\n</ul>\\n<p>To illustrate the various kinds of type entries, consider the above signature\\n<code>EstablishmentType</code> which requires that a module:</p>\\n<ul>\\n<li>Declare a type named <code>profession</code>.</li>\\n<li>Must include a function that takes in a value of the type <code>profession</code> and\\nreturns a string.</li>\\n</ul>\\n<p><strong>Note</strong>:</p>\\n<p>Modules of the type <code>EstablishmentType</code> can contain more fields than the\\nsignature declares, just like the module <code>School</code> in the previous section (if we\\nchoose to assign it the type <code>EstablishmentType</code>. Otherwise, <code>School</code> exposes\\nevery field). This effectively makes the <code>person1</code> field an enforced\\nimplementation detail! Outsiders can't access it, since it's not present in the\\nsignature; the signature <strong>constrained</strong> what others can access.</p>\\n<p>The type <code>EstablishmentType.profession</code> is <strong>abstract</strong>: it doesn't have a\\nconcrete type; it's saying \\\"I don't care what the actual type is, but it's used\\nas input to <code>getProfession</code>\\\". This is useful to fit many modules under the same\\ninterface:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">Company</span>: <span class=\\\"hljs-title\\\">EstablishmentType</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> profession = <span class=\\\"hljs-type\\\">CEO</span> | <span class=\\\"hljs-type\\\">Designer</span> | <span class=\\\"hljs-type\\\">Engineer</span> | ...;\\n\\n  <span class=\\\"hljs-keyword\\\">let</span> getProfession person =&gt; ...\\n  <span class=\\\"hljs-keyword\\\">let</span> person1 = ...;\\n  <span class=\\\"hljs-keyword\\\">let</span> person2 = ...;\\n};</code></pre>\\n      </div>\\n<p>It's also useful to hide the underlying type as an implementation detail others\\ncan't rely on. If you ask what the type of <code>Company.profession</code> is, instead of\\nexposing the variant, it'll only tell you \\\"it's <code>Company.profession</code>\\\".</p>\\n<h4 id=\\\"every-rei-file-is-a-signature\\\"><a href=\\\"#every-rei-file-is-a-signature\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Every <code>.rei</code> file is a signature</h4>\\n<p>Similar to how a <code>react.re</code> file implicitly defines a module <code>React</code>, a file\\n<code>react.rei</code> implicitly defines a signature for <code>React</code>. If <code>react.rei</code> isn't\\nprovided, the signature of <code>react.re</code> defaults to exposing all the fields of the\\nmodule. Because they don't contain implementation files, <code>.rei</code> files are used\\nin the ecosystem to also document the public API of their corresponding modules.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* file react.re (implementation. Compiles to module React) */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> state = int;\\n<span class=\\\"hljs-keyword\\\">let</span> render = <span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> str<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; str;</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* file react.rei (interface. Compiles to signature of module React) */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> state = int;\\n<span class=\\\"hljs-keyword\\\">let</span> render: str =&gt; str;</code></pre>\\n      </div>\\n<h2 id=\\\"module-functions-functors\\\"><a href=\\\"#module-functions-functors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Module Functions (functors)</h2>\\n<p>Modules can be passed to functions! It would be the equivalent of passing a file\\nas a first-class item. However, modules are at a different \\\"layer\\\" of the\\nlanguage than other common concepts, so we can't pass them to <em>regular</em>\\nfunctions. Instead, we pass them to special functions called \\\"functors\\\".</p>\\n<p>The syntax for defining and using functors is very much like the syntax\\nfor defining and using regular functions. The primary differences are:</p>\\n<ul>\\n<li>Functors use the <code>module</code> keyword instead of <code>let</code> and the <code>fun</code>\\nkeyword designates \\\"functor\\\" rather than \\\"function\\\" in this case.</li>\\n<li>Functors take modules as arguments and return a module.</li>\\n<li>Functors <em>require</em> annotating arguments.</li>\\n<li>Functors must start with a capital letter (just like modules/signatures).</li>\\n</ul>\\n<p>Here's an example <code>MakeSet</code> functor, that takes in a module of the type\\n<code>Comparable</code> and returns a new set that can contain such comparable items.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">type</span> <span class=\\\"hljs-title\\\">Comparable</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> t;\\n  <span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-built_in\\\">equal</span>: t =&gt; t =&gt; bool;\\n};\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">MakeSet</span> = <span class=\\\"hljs-title\\\">fun</span> (<span class=\\\"hljs-title\\\">Item</span>: <span class=\\\"hljs-title\\\">Comparable</span>) =&gt; </span>{\\n  <span class=\\\"hljs-comment\\\">/* let's use a list as our naive backing data structure */</span>\\n  <span class=\\\"hljs-keyword\\\">type</span> backingType = list <span class=\\\"hljs-type\\\">Item</span>.t;\\n  <span class=\\\"hljs-keyword\\\">let</span> empty = [];\\n  <span class=\\\"hljs-keyword\\\">let</span> add (currentSet: backingType) (newItem: <span class=\\\"hljs-type\\\">Item</span>.t) :backingType =&gt;\\n    <span class=\\\"hljs-comment\\\">/* if item exists */</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-type\\\">List</span>.exists (<span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> x<span class=\\\"hljs-params\\\"> </span></span></span>=&gt; <span class=\\\"hljs-type\\\">Item</span>.<span class=\\\"hljs-built_in\\\">equal</span> x newItem) currentSet) {\\n      currentSet <span class=\\\"hljs-comment\\\">/* return the same (immutable) set (a list really) */</span>\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n      [newItem, ...currentSet]; <span class=\\\"hljs-comment\\\">/* prepend to the set and return it */</span>\\n    }\\n};</code></pre>\\n      </div>\\n<p>Functors can be applied using function application syntax. In this case, we're\\ncreating a set, whose items are pairs of integers.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">IntPair</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> t = (int, int);\\n  <span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-built_in\\\">equal</span> (x1, y1) (x2, y2) =&gt; x1 == x2 &amp;&amp; y1 == y2;\\n  <span class=\\\"hljs-keyword\\\">let</span> create x y =&gt; (x, y);\\n};\\n\\n<span class=\\\"hljs-comment\\\">/* IntPair abides by the Comparable signature required by MakeSet */</span>\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">SetOfIntPairs</span> = <span class=\\\"hljs-title\\\">MakeSet</span> <span class=\\\"hljs-title\\\">IntPair</span>;</span></code></pre>\\n      </div>\\n<h4 id=\\\"module-functions-types\\\"><a href=\\\"#module-functions-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Module functions types</h4>\\n<p>Like with module types, functor types also act to constrain and hide what we may\\nassume about functors. The syntax for functor types are consistent with those\\nfor function types, but with types capitalized to represent the signatures of\\nmodules the functor accepts as arguments and return values. In the\\nprevious example, we're exposing the backing type of a set; by giving <code>MakeSet</code>\\na functor signature, we can hide the underlying data structure!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">type</span> <span class=\\\"hljs-title\\\">Comparable</span> = ...\\n\\n<span class=\\\"hljs-title\\\">module</span> <span class=\\\"hljs-title\\\">type</span> <span class=\\\"hljs-title\\\">MakeSetType</span> = (<span class=\\\"hljs-title\\\">Item</span>: <span class=\\\"hljs-title\\\">Comparable</span>) =&gt; </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> backingType;\\n  <span class=\\\"hljs-keyword\\\">let</span> empty: backingType;\\n  <span class=\\\"hljs-keyword\\\">let</span> add: backingType =&gt; <span class=\\\"hljs-type\\\">Item</span>.t =&gt; backingType;\\n};\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">MakeSet</span>: <span class=\\\"hljs-title\\\">MakeSetType</span> = <span class=\\\"hljs-title\\\">fun</span> (<span class=\\\"hljs-title\\\">Item</span>: <span class=\\\"hljs-title\\\">Comparable</span>) =&gt; </span>{\\n  ...\\n};</code></pre>\\n      </div>\\n<h2 id=\\\"drawbacks\\\"><a href=\\\"#drawbacks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Drawbacks</h2>\\n<p>Modules and functors are at a different \\\"layer\\\" of language than the rest (\\nfunctions, let bindings, data structures, etc.). For example, you can't easily\\npass them into a tuple or record. Use them judiciously! Lots of times, just a\\nrecord or a function is enough.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">School</span> = </span>{...};\\n\\n<span class=\\\"hljs-comment\\\">/* this will straight up give you a syntax error! */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> schools = (<span class=\\\"hljs-type\\\">School</span>, <span class=\\\"hljs-type\\\">School</span>);</code></pre>\\n      </div>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/mutation.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Mutation\",\n\t\t\t\t\t\t\t\t\"order\": 140\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Reason has great traditional imperative &#x26; mutative programming capabilities. You should use these features sparingly, but sometimes they allow your code to be more performant and written in a more familiar pattern.</p>\\n<h3 id=\\\"mutate-let-binding\\\"><a href=\\\"#mutate-let-binding\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mutate Let-binding</h3>\\n<p>Let-bindings are immutable, but you can wrap it with a <code>ref</code>, which is like a box whose content can change:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> foo = <span class=\\\"hljs-keyword\\\">ref</span> <span class=\\\"hljs-number\\\">5</span>;</code></pre>\\n      </div>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>You can get the actual value of a <code>ref</code> through the <code>!</code> operator:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-keyword\\\">let</span> five = !foo; <span class=\\\"hljs-comment\\\">/* 5 */</span></code></pre>\\n      </div>\\n<p>Assign a new value to <code>foo</code> like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code>foo := 6;</code></pre>\\n      </div>\\n<p>Note that the previous binding <code>five</code> stays <code>5</code>, since it got the underlying item on the <code>ref</code> box, not the <code>ref</code> itself.</p>\\n<h3 id=\\\"tip--tricks\\\"><a href=\\\"#tip--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tip &#x26; Tricks</h3>\\n<p><strong>Just kidding</strong>! <code>ref</code> isn't actually a special feature! It's just an ordinary syntax sugar for a <a href=\\\"/api/Pervasives.html#TYPEref\\\">predefined mutable record type called <code>ref</code></a> in the standard library (search \\\"References\\\" in that page). Here's the desugared version:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> foo = {contents: <span class=\\\"hljs-number\\\">5</span>};\\n<span class=\\\"hljs-keyword\\\">let</span> five = foo.contents;\\nfoo.contents = <span class=\\\"hljs-number\\\">5</span>;</code></pre>\\n      </div>\\n<p>Before reaching for <code>ref</code>, know that you can achieve lightweight, local \\\"mutations\\\" through overriding let bindings:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> foo = <span class=\\\"hljs-number\\\">10</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> foo = someCondition ? foo + <span class=\\\"hljs-number\\\">5</span> : foo;\\nprint_int foo; <span class=\\\"hljs-comment\\\">/* either 15 or 10 */</span></code></pre>\\n      </div>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/overview.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Overview\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<table>\\n<thead>\\n<tr>\\n<th>Primitive</th>\\n<th>Example</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Strings</td>\\n<td><code>\\\"Hello\\\"</code></td>\\n</tr>\\n<tr>\\n<td>Characters</td>\\n<td><code>'x'</code></td>\\n</tr>\\n<tr>\\n<td>Integers</td>\\n<td><code>23</code>\\n, \\n<code>-23</code></td>\\n</tr>\\n<tr>\\n<td>Floats</td>\\n<td><code>23.0</code>\\n, \\n<code>-23.0</code></td>\\n</tr>\\n<tr>\\n<td>Integer Addition</td>\\n<td><code>23 + 1</code></td>\\n</tr>\\n<tr>\\n<td>Float Addition</td>\\n<td><code>23.0 +. 1.0</code></td>\\n</tr>\\n<tr>\\n<td>Integer Division/Multiplication</td>\\n<td><code>2 / 23 * 1</code></td>\\n</tr>\\n<tr>\\n<td>Float Division/Multiplication</td>\\n<td><code>2.0 /. 23.0 *. 1.0</code></td>\\n</tr>\\n<tr>\\n<td>String Concatenation</td>\\n<td><code>\\\"Hello \\\" ^ \\\"World\\\"</code></td>\\n</tr>\\n<tr>\\n<td>Comparison</td>\\n<td><code>></code>\\n, \\n<code>&#x3C;</code>\\n, \\n<code>>=</code>\\n, \\n<code>=&#x3C;</code></td>\\n</tr>\\n<tr>\\n<td>Boolean operations</td>\\n<td><code>not</code>\\n, \\n<code>&#x26;&#x26;</code>\\n, \\n<code>||</code></td>\\n</tr>\\n<tr>\\n<td>Reference, Physical (deep) Equality</td>\\n<td><code>===</code>\\n, \\n<code>==</code></td>\\n</tr>\\n<tr>\\n<td>Immutable Lists</td>\\n<td><code>[1, 2, 3]</code></td>\\n</tr>\\n<tr>\\n<td>Immutable Prepend</td>\\n<td><code>[item1, item2, ...theRest]</code></td>\\n</tr>\\n<tr>\\n<td>Arrays</td>\\n<td><code>[|1, 2, 3|]</code></td>\\n</tr>\\n<tr>\\n<td>Records</td>\\n<td><code>type player = {score: int}; {score: 100}</code></td>\\n</tr>\\n</tbody>\\n</table>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/object.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Object\",\n\t\t\t\t\t\t\t\t\"order\": 175\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Most of time in Reason, you'd be using record to group named values together. In certain niche situations, however, you might want to use a similar feature called object; they're a bit more flexible and come with different tradeoffs.</p>\\n<p><strong>If you come from JavaScript</strong>, you're mostly likely <strong>not</strong> looking for plain Reason objects. Skip right to the Tip &#x26; Tricks section below.</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<h4 id=\\\"type-declaration\\\"><a href=\\\"#type-declaration\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Type Declaration</h4>\\n<p>An object <strong>doesn't need a type declaration</strong>, though it can have one. It looks like a record, except with a <code>.</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tesla = {\\n  .\\n  color: string\\n};</code></pre>\\n      </div>\\n<p>The dot at the beginning indicates that this is a \\\"closed\\\" object type, which means that an object based on this type must have exactly this shape.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> car 'a = {\\n  ..\\n  color: string\\n} <span class=\\\"hljs-keyword\\\">as</span> 'a;</code></pre>\\n      </div>\\n<p>Two dots, also called an elision, indicate that this is an \\\"open\\\" object type, and therefore can also contain other values and methods. An open object is also polymorphic and therefore requires a parameter.</p>\\n<h4 id=\\\"creation\\\"><a href=\\\"#creation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creation</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tesla = {\\n  .\\n  drive: int =&gt; int\\n};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> obj :tesla = {\\n  <span class=\\\"hljs-keyword\\\">val</span> hasEnvy = <span class=\\\"hljs-keyword\\\">ref</span> <span class=\\\"hljs-literal\\\">false</span>;\\n  <span class=\\\"hljs-keyword\\\">pub</span> drive speed =&gt; {\\n    this#enableEnvy <span class=\\\"hljs-literal\\\">true</span>;\\n    speed\\n  };\\n  <span class=\\\"hljs-keyword\\\">pri</span> enableEnvy envy =&gt; {\\n    hasEnvy := envy\\n  };\\n};</code></pre>\\n      </div>\\n<p>This object is of object type tesla and has a public method <code>drive</code>. It also contains a private method <code>enableEnvy</code> that is only accessible from within the object.</p>\\n<p>As you can see, a Reason object can also access <code>this</code>. Just like a JavaScript object's <code>this</code>, our <code>this</code> has very erratic behavior depending on the context. Just kidding. Our <code>this</code> always points to the object itself correctly. Gotta learn from history.</p>\\n<p>The following example shows an open object type which uses a type as parameter. The object type parameter is required to implement all the methods of the open object type.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tesla 'a = {\\n  ..\\n  drive: int =&gt; int\\n} <span class=\\\"hljs-keyword\\\">as</span> 'a;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> obj:\\n  tesla {. drive: int =&gt; int, doYouWant: unit =&gt; bool}\\n  = {\\n  <span class=\\\"hljs-keyword\\\">val</span> hasEnvy = <span class=\\\"hljs-keyword\\\">ref</span> <span class=\\\"hljs-literal\\\">false</span>;\\n  <span class=\\\"hljs-keyword\\\">pub</span> drive speed =&gt; {\\n    this#enableEnvy <span class=\\\"hljs-literal\\\">true</span>;\\n    speed\\n  };\\n  <span class=\\\"hljs-keyword\\\">pub</span> doYouWant () =&gt; !hasEnvy;\\n  <span class=\\\"hljs-keyword\\\">pri</span> enableEnvy envy =&gt; {\\n    hasEnvy := envy\\n  };\\n};</code></pre>\\n      </div>\\n<h3 id=\\\"tip--tricks\\\"><a href=\\\"#tip--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tip &#x26; Tricks</h3>\\n<p>If you come from JavaScript, you're probably not looking for vanilla Reason objects, but BuckleScript's <a href=\\\"https://bucklescript.github.io/bucklescript/Manual.html#_binding_to_js_objects\\\">special object</a>. These are different in that they:</p>\\n<ul>\\n<li>access fields through <code>##</code></li>\\n<li>always come with with <code>Js.t</code> (as a type parameter to the <code>Js.t</code> type).</li>\\n<li>compile to actual JS objects.</li>\\n</ul>\\n<p>Because they're used so often, Reason give the BS object value <code>[%bs.obj {foo: bar}]</code> a special syntax sugar: <code>{\\\"foo\\\": bar}</code>. It looks like a quoted record, basically.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/pattern-matching.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Pattern Matching!\",\n\t\t\t\t\t\t\t\t\"order\": 135\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p><em>Make sure you've read on <a href=\\\"/guide/language/variant\\\">Variant</a> first</em>.</p>\\n<p><strong>We're finally here</strong>! Pattern matching is one of <em>the</em> best features of the language. It's like destructuring, but comes with even more help from the type system.</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>Consider a variant:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> payload =\\n| <span class=\\\"hljs-type\\\">BadResult</span> int\\n| <span class=\\\"hljs-type\\\">GoodResult</span> string\\n| <span class=\\\"hljs-type\\\">NoResult</span>;</code></pre>\\n      </div>\\n<p>While using the <code>switch</code> expression on it, you can \\\"destructure\\\" it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> data = <span class=\\\"hljs-type\\\">GoodResult</span> <span class=\\\"hljs-string\\\">\\\"Product shipped!\\\"</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> message =\\n  <span class=\\\"hljs-keyword\\\">switch</span> data {\\n  | <span class=\\\"hljs-type\\\">GoodResult</span> theMessage =&gt; <span class=\\\"hljs-string\\\">\\\"Success! \\\"</span> ^ theMessage\\n  | <span class=\\\"hljs-type\\\">BadResult</span> errorCode =&gt;\\n    <span class=\\\"hljs-string\\\">\\\"Something's wrong. The error code is: \\\"</span> ^ (string_of_int errorCode)\\n  };</code></pre>\\n      </div>\\n<p>Notice how we've destructured <code>data</code> while handling each different case. The above <code>switch</code> will give you a compiler warning:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-type\\\">Warning</span> <span class=\\\"hljs-number\\\">8</span>: this pattern-matching <span class=\\\"hljs-keyword\\\">is</span> not exhaustive.\\n<span class=\\\"hljs-type\\\">Here</span> <span class=\\\"hljs-keyword\\\">is</span> an example <span class=\\\"hljs-keyword\\\">of</span> a value that <span class=\\\"hljs-keyword\\\">is</span> not matched:\\n<span class=\\\"hljs-type\\\">NoResult</span></code></pre>\\n      </div>\\n<p>Isn't that great? While matching on the shape of your data, the type system warned of an unhandled case. This <strong>conditional</strong> aspect is what makes it pattern matching rather than plain destructuring. Most data structures with a \\\"<strong>if this then that</strong>\\\" aspect works with it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">switch</span> myList {\\n| [] =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"Empty list\\\"</span>\\n| [a, ...theRest] =&gt; print_endline (<span class=\\\"hljs-string\\\">\\\"list with the head value \\\"</span> ^ a)\\n};\\n\\n<span class=\\\"hljs-keyword\\\">switch</span> myArray {\\n| [|<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>|] =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"This is an array with item 1 and 2\\\"</span>\\n| [||] =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"This array has no element\\\"</span>\\n| <span class=\\\"hljs-number\\\">_</span> =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"This is an array\\\"</span>\\n}</code></pre>\\n      </div>\\n<p>The <code>_</code> case is a special fall-through case that allows all unmatched conditions to go to that branch.</p>\\n<p>You can even switch on string, int and others. You can even have many patterns going to the same result!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> reply =\\n  <span class=\\\"hljs-keyword\\\">switch</span> message {\\n  | <span class=\\\"hljs-string\\\">\\\"Reason's pretty cool\\\"</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Yep\\\"</span>\\n  | <span class=\\\"hljs-string\\\">\\\"good night\\\"</span> =&gt; <span class=\\\"hljs-string\\\">\\\"See ya!\\\"</span>\\n  | <span class=\\\"hljs-string\\\">\\\"hello\\\"</span> | <span class=\\\"hljs-string\\\">\\\"hi\\\"</span> | <span class=\\\"hljs-string\\\">\\\"heya\\\"</span> | <span class=\\\"hljs-string\\\">\\\"hey\\\"</span> =&gt; <span class=\\\"hljs-string\\\">\\\"hello to you too!\\\"</span>\\n  | <span class=\\\"hljs-number\\\">_</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Nice to meet you!\\\"</span>\\n  };</code></pre>\\n      </div>\\n<p>Combined with other data structures, pattern matching can produce extremely concise, compiler-verified, performant code:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message =\\n  <span class=\\\"hljs-keyword\\\">switch</span> data {\\n  | <span class=\\\"hljs-type\\\">GoodResult</span> theMessage =&gt; <span class=\\\"hljs-string\\\">\\\"Success! \\\"</span> ^ theMessage\\n  | <span class=\\\"hljs-type\\\">BadResult</span> (<span class=\\\"hljs-number\\\">0</span> | <span class=\\\"hljs-number\\\">1</span> | <span class=\\\"hljs-number\\\">5</span>) =&gt; <span class=\\\"hljs-string\\\">\\\"Something's wrong. It's a server side problem.\\\"</span>\\n  | <span class=\\\"hljs-type\\\">BadResult</span> errorCode =&gt; <span class=\\\"hljs-string\\\">\\\"Unknown error occurred. Code: \\\"</span> ^ string_of_int errorCode\\n  | <span class=\\\"hljs-type\\\">NoResult</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Things look fine\\\"</span>\\n  };</code></pre>\\n      </div>\\n<h4 id=\\\"when-clauses\\\"><a href=\\\"#when-clauses\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>When clauses</h4>\\n<p>When you really need to use arbitrary logic with an otherwise clean pattern match, you can slip in some <code>when</code> clauses, which are basically <code>if</code> sugar:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message =\\n  <span class=\\\"hljs-keyword\\\">switch</span> data {\\n  | <span class=\\\"hljs-type\\\">GoodResult</span> theMessage =&gt; ...\\n  | <span class=\\\"hljs-type\\\">BadResult</span> errorCode when isServerError errorCode =&gt; ...\\n  | <span class=\\\"hljs-type\\\">BadResult</span> errorCode =&gt; ... <span class=\\\"hljs-comment\\\">/* otherwise */</span>\\n  | <span class=\\\"hljs-type\\\">NoResult</span> =&gt; ...\\n  };</code></pre>\\n      </div>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p><strong>Flatten your pattern-match whenever you can</strong>. This is a real bug remover. Example below.</p>\\n<p>Do not abuse the fall-through <code>_</code> case too much. This prevents the compiler from telling you that you've forgotten to cover a case (exhaustiveness check), which would be especially helpful after a refactoring where you add a new case to a variant. Try only using <code>_</code> against infinite possibilities, e.g. string, int, etc.</p>\\n<p>Here's a series of examples, from worst to best:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> optionBoolToJsBoolean opt =&gt; \\n  <span class=\\\"hljs-keyword\\\">if</span> (opt == <span class=\\\"hljs-type\\\">None</span>) {\\n    <span class=\\\"hljs-type\\\">Js</span>.false_\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (opt == <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-literal\\\">true</span>) {\\n      <span class=\\\"hljs-type\\\">Js</span>.true_\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n      <span class=\\\"hljs-type\\\">Js</span>.false_\\n    }\\n  };</code></pre>\\n      </div>\\n<p>Now that's just silly =). Let's turn it into pattern-matching:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> optionBoolToJsBoolean opt =&gt; <span class=\\\"hljs-keyword\\\">switch</span> opt {\\n| <span class=\\\"hljs-type\\\">None</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.false_\\n| <span class=\\\"hljs-type\\\">Some</span> a =&gt; <span class=\\\"hljs-keyword\\\">switch</span> a {\\n  | <span class=\\\"hljs-literal\\\">true</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.true_\\n  | <span class=\\\"hljs-literal\\\">false</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.false_\\n  }\\n};</code></pre>\\n      </div>\\n<p>Slightly better, but still nested. Pattern-matching allows you to do this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> optionBoolToJsBoolean opt =&gt; <span class=\\\"hljs-keyword\\\">switch</span> opt {\\n| <span class=\\\"hljs-type\\\">None</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.false_\\n| <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-literal\\\">true</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.true_\\n| <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-literal\\\">false</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.false_\\n};</code></pre>\\n      </div>\\n<p>Much more linear-looking! Now, you might be tempted to do this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> optionBoolToJsBoolean opt =&gt; <span class=\\\"hljs-keyword\\\">switch</span> opt {\\n| <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-literal\\\">true</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.true_\\n| <span class=\\\"hljs-number\\\">_</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.false_\\n};</code></pre>\\n      </div>\\n<p>Which is much more concise, but kills the exhaustiveness check mentioned above. This is the best:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> optionBoolToJsBoolean opt =&gt; <span class=\\\"hljs-keyword\\\">switch</span> opt {\\n| <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-literal\\\">true</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.true_\\n| <span class=\\\"hljs-type\\\">Some</span> <span class=\\\"hljs-literal\\\">false</span> | <span class=\\\"hljs-type\\\">None</span> =&gt; <span class=\\\"hljs-type\\\">Js</span>.false_\\n};</code></pre>\\n      </div>\\n<p>Pretty darn hard to make a mistake in this code at this point! Whenever you'd like to use an if-else with many branches, prefer pattern matching instead. It's more concise and <a href=\\\"/guide/language/variant#design-decisions\\\">performant</a> too.</p>\\n<p>See another example, with switch + tuple <a href=\\\"/guide/language/tuple#tips--tricks\\\">here</a>.</p>\\n<h3 id=\\\"design-notes\\\"><a href=\\\"#design-notes\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Notes</h3>\\n<p>The notorious <a href=\\\"https://en.wikipedia.org/wiki/Fizz_buzz#Programming_interviews\\\">fizzbuzz problem</a> strangely trips some people up, partially due its nature of paralyzing the programmer who hopes to simplify/unify the few condition branches in search of elegance where there's none. While fizzbuzz is slightly too dynamic to be solved in <code>when</code>-less switches, hopefully you can see that usually, pattern-matching's visual conciseness allows us to overcome decision paralysis, while keeping all the benefits (and more, as you've seen) of a bunch of brute-forced <code>if-else</code>s. There's really nothing wrong with explicitly listing out all the possibilities; Pattern matching corresponds to <strong>case analysis</strong> in math, a valid problem-solving technique that proves to be extremely convenient.</p>\\n<p>Using a Reason <code>switch</code> for the first time might make you feel like you've been missing out all these years. Careful, for it might ruin other languages for you =).</p>\\n<p>If you've tried to refactor a big, nested if-else logic, you might realize it's very hard to get the logic right. On the other hand, pattern matching + tuple conceptually maps to a 2D table, where each cell can be independently filled. This ensures that whenever you need to add a case in the <code>switch</code>, you can target that and only that table cell, without messing other cells up.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> animal = <span class=\\\"hljs-type\\\">Dog</span> | <span class=\\\"hljs-type\\\">Cat</span> | <span class=\\\"hljs-type\\\">Bird</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> result = <span class=\\\"hljs-keyword\\\">switch</span> (isBig, myAnimal) {\\n| (<span class=\\\"hljs-literal\\\">true</span>, <span class=\\\"hljs-type\\\">Dog</span>) =&gt; <span class=\\\"hljs-number\\\">1</span>\\n| (<span class=\\\"hljs-literal\\\">true</span>, <span class=\\\"hljs-type\\\">Cat</span>) =&gt; <span class=\\\"hljs-number\\\">2</span>\\n| (<span class=\\\"hljs-literal\\\">true</span>, <span class=\\\"hljs-type\\\">Bird</span>) =&gt; <span class=\\\"hljs-number\\\">3</span>\\n| (<span class=\\\"hljs-literal\\\">false</span>, <span class=\\\"hljs-type\\\">Dog</span> | <span class=\\\"hljs-type\\\">Cat</span>) =&gt; <span class=\\\"hljs-number\\\">4</span>\\n| (<span class=\\\"hljs-literal\\\">false</span>, <span class=\\\"hljs-type\\\">Bird</span>) =&gt; <span class=\\\"hljs-number\\\">5</span>\\n};</code></pre>\\n      </div>\\n<table>\\n<thead>\\n<tr>\\n<th>isBig \\\\ myAnimal</th>\\n<th>Dog</th>\\n<th>Cat</th>\\n<th>Bird</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>true</td>\\n<td>1</td>\\n<td>2</td>\\n<td>3</td>\\n</tr>\\n<tr>\\n<td>false</td>\\n<td>4</td>\\n<td>4</td>\\n<td>5</td>\\n</tr>\\n</tbody>\\n</table>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/type.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Type!\",\n\t\t\t\t\t\t\t\t\"order\": 15\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Types are the highlight of Reason! Here, you get a glimpse of why so many are excited about them.</p>\\n<p>This section briefly introduces the types syntax so that you can power through the subsequent sections without getting confused. More advanced topics on types can be found in the <a href=\\\"/guide/language/more-on-type\\\">More On Types</a> section.</p>\\n<h3 id=\\\"annotations\\\"><a href=\\\"#annotations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Annotations</h3>\\n<p>This let-binding doesn't contain any written type:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> score = <span class=\\\"hljs-number\\\">10</span>;</code></pre>\\n      </div>\\n<p>Reason knows that <code>score</code> is an <code>int</code>, judging by the value <code>10</code>. This is called <strong>inference</strong>.</p>\\n<p>But types can also be explicitly written down by choice:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> score: int = <span class=\\\"hljs-number\\\">10</span>;</code></pre>\\n      </div>\\n<p>You can also wrap any expression in parentheses and annotate it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myInt = <span class=\\\"hljs-number\\\">5</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> myInt = (<span class=\\\"hljs-number\\\">5</span>: int);\\n<span class=\\\"hljs-keyword\\\">let</span> myInt = (<span class=\\\"hljs-number\\\">5</span>: int) + (<span class=\\\"hljs-number\\\">4</span>: int);\\n<span class=\\\"hljs-keyword\\\">let</span> add (x: int) (y: int) :int =&gt; x + y;\\n<span class=\\\"hljs-keyword\\\">let</span> drawCircle radius::(r: int) :unit =&gt; ...;</code></pre>\\n      </div>\\n<p>Note: in the last line, <code>radius::(r: int)</code> is a labeled argument. More on this <a href=\\\"/guide/language/function\\\">here</a>.</p>\\n<h3 id=\\\"aliases\\\"><a href=\\\"#aliases\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Aliases</h3>\\n<p>You can refer to a type by a different name. They'll be equivalent:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> scoreType = int;\\n<span class=\\\"hljs-keyword\\\">let</span> x: scoreType = <span class=\\\"hljs-number\\\">10</span>;</code></pre>\\n      </div>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>Reason is backed by OCaml, whose type system has received decades of engineering. Here are a few highlights:</p>\\n<ul>\\n<li>\\n<p><strong>Types can be inferred</strong>. The type system deduces the types for you even if you don't manually write them down. This speeds up the prototyping phase. Additionally, editor features like <a href=\\\"https://github.com/reasonml-editor/vscode-reasonml\\\">VSCode's codelens</a> show you all the types while you write code.</p>\\n</li>\\n<li>\\n<p><strong>The type coverage is always 100%</strong>. We don't need a \\\"type coverage\\\" tool! Every piece of Reason code has a type.</p>\\n</li>\\n<li>\\n<p><strong>The type system is completely \\\"sound\\\"</strong>. This means that, as long as your code compiles fine, every type guarantees that it's not lying about itself. In a conventional, best-effort type system, just because the type says it's e.g. \\\"an integer that's never null\\\", doesn't mean it's actually never null. In contrast, a pure Reason program has no null bugs.</p>\\n</li>\\n</ul>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/record.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Record\",\n\t\t\t\t\t\t\t\t\"order\": 60\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Records are like JavaScript objects but are</p>\\n<ul>\\n<li>lighter</li>\\n<li>immutable by default</li>\\n<li>fixed in field names and types</li>\\n<li>veeery fast</li>\\n<li>veeeery nicely typed</li>\\n</ul>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>Type (mandatory):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {\\n  age: int,\\n  name: string\\n};</code></pre>\\n      </div>\\n<p>Value (this will be inferred to be of type <code>person</code>):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> me = {\\n  age: <span class=\\\"hljs-number\\\">5</span>,\\n  name: <span class=\\\"hljs-string\\\">\\\"Big Reason\\\"</span>\\n};</code></pre>\\n      </div>\\n<p>Access (the familiar dot notation):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> name = me.name;</code></pre>\\n      </div>\\n<h4 id=\\\"record-needs-an-explicit-definition\\\"><a href=\\\"#record-needs-an-explicit-definition\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Record Needs an Explicit Definition</h4>\\n<p>If you only write <code>{age: 5, name: \\\"Baby Reason\\\"}</code> without an explicit declaration somewhere above, the type system will give you an error. If the type definition resides in another file, you need to explicitly indicate which file it is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* School.re */</span>\\n\\n<span class=\\\"hljs-keyword\\\">type</span> person = {age: int, name: string};</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* example.re */</span>\\n\\n<span class=\\\"hljs-keyword\\\">let</span> me: <span class=\\\"hljs-type\\\">School</span>.person = {age: <span class=\\\"hljs-number\\\">20</span>, name: <span class=\\\"hljs-string\\\">\\\"Big Reason\\\"</span>};\\n<span class=\\\"hljs-comment\\\">/* or */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> me = <span class=\\\"hljs-type\\\">School</span>.{age: <span class=\\\"hljs-number\\\">20</span>, name: <span class=\\\"hljs-string\\\">\\\"Big Reason\\\"</span>};\\n<span class=\\\"hljs-comment\\\">/* or */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> me = {<span class=\\\"hljs-type\\\">School</span>.age: <span class=\\\"hljs-number\\\">20</span>, name: <span class=\\\"hljs-string\\\">\\\"Big Reason\\\"</span>};</code></pre>\\n      </div>\\n<p>Either of the above 3 says \\\"this record's definition is found in the School file\\\". The first one, the regular type annotation, is preferred.</p>\\n<h4 id=\\\"immutable-update\\\"><a href=\\\"#immutable-update\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Immutable Update</h4>\\n<p>New records can be created from old records with the <code>...</code> spread operator. The original record isn't mutated.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> meNextYear = {...me, age: me.age + <span class=\\\"hljs-number\\\">1</span>};</code></pre>\\n      </div>\\n<p>This update is very efficient! Try a few in our <a href=\\\"/try\\\">playground</a> to see how records are compiled.</p>\\n<p><strong>Note</strong>: spread cannot add new fields, as a record's shape is fixed by its type.</p>\\n<h4 id=\\\"mutable-update\\\"><a href=\\\"#mutable-update\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mutable Update</h4>\\n<p>Record fields can optionally be mutable. This allows you to update those fields in-place with the <code>=</code> operator.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {\\n  name: string,\\n  <span class=\\\"hljs-keyword\\\">mutable</span> age: int\\n};\\n<span class=\\\"hljs-keyword\\\">let</span> baby = {name: <span class=\\\"hljs-string\\\">\\\"Baby Reason\\\"</span>, age: <span class=\\\"hljs-number\\\">5</span>};\\nbaby.age = baby.age + <span class=\\\"hljs-number\\\">1</span>; <span class=\\\"hljs-comment\\\">/* alter `baby`. Happy birthday! */</span></code></pre>\\n      </div>\\n<h3 id=\\\"syntax-shorthand\\\"><a href=\\\"#syntax-shorthand\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Syntax shorthand</h3>\\n<p>To reduce redundancy, we provide <strong>punning</strong> for a record's types and values. You can use it when the name of a record field matches the name of its value/type.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> horsePower = {power: int, metric: bool};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> metric = <span class=\\\"hljs-literal\\\">true</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> someHorsePower = {power: <span class=\\\"hljs-number\\\">10</span>, metric};\\n<span class=\\\"hljs-comment\\\">/* same as the value {power: 10, metric: metric}; */</span>\\n\\n<span class=\\\"hljs-keyword\\\">type</span> car = {name: string, horsePower};\\n<span class=\\\"hljs-comment\\\">/* same as the type {name: string, horsePower: horsePower}; */</span></code></pre>\\n      </div>\\n<p><strong>Note that there's no punning for a single record field</strong>! <code>{foo}</code> doesn't do what you expect (it's a block that returns the value <code>foo</code>).</p>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<h4 id=\\\"interop-with-javascript\\\"><a href=\\\"#interop-with-javascript\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Interop with JavaScript</h4>\\n<p>If you're working with JavaScript, the record syntax &#x26; operations should feel familiar, and you might be tempted to interop with JS by converting a JS object to a record, and vice-versa. This is fine, but we have an <strong>even better way without conversion overhead</strong>! See <a href=\\\"https://bucklescript.github.io/bucklescript/Manual.html#_binding_to_js_objects\\\">here</a> which talks about <strong><a href=\\\"/guide/language/object\\\">Reason objects</a></strong>. Here's an example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> payload = <span class=\\\"hljs-type\\\">Js</span>.t {\\n    .\\n    name: string\\n};\\nexternal sendQuery: payload =&gt; unit = <span class=\\\"hljs-string\\\">\\\"sendQuery\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"myAjaxLibrary\\\"</span>];\\nsendQuery {<span class=\\\"hljs-string\\\">\\\"name\\\"</span>: <span class=\\\"hljs-string\\\">\\\"Reason\\\"</span>};</code></pre>\\n      </div>\\n<p>Notice the dot in the type definiton. That's is an object type notation, and has nothing to do with a record! Objects will be described in a later section.</p>\\n<h4 id=\\\"record-types-are-found-by-field-name\\\"><a href=\\\"#record-types-are-found-by-field-name\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Record Types Are Found By Field Name</h4>\\n<p>With records, you <strong>cannot</strong> say \\\"I'd like this function to take any record type, as long as they have the field <code>age</code>\\\". The following <em>works</em>, but not as expected:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {age: int, name: string};\\n<span class=\\\"hljs-keyword\\\">type</span> monster = {age: int, hasTentacles: bool};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> getAge entity =&gt; entity.age;</code></pre>\\n      </div>\\n<p>The last line's function will infer that the parameter <code>entity</code> must be of type <code>monster</code>. So the follow code's last line fails:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> kraken = {age: <span class=\\\"hljs-number\\\">9999</span>, hasTentacles: <span class=\\\"hljs-literal\\\">true</span>};\\n<span class=\\\"hljs-keyword\\\">let</span> me = {age: <span class=\\\"hljs-number\\\">5</span>, name: <span class=\\\"hljs-string\\\">\\\"Baby Reason\\\"</span>};\\n\\ngetAge kraken;\\ngetAge me;</code></pre>\\n      </div>\\n<p>The type system will complain that <code>me</code> is a <code>person</code>, and that <code>getAge</code> only works on <code>monster</code>. If you need such capability, use Reason objects, mentioned in the previous section.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>After reading the constraints in the previous sections, and if you're coming from a dynamic language background, you might be wondering why one would bother with record in the first place instead of straight using object, since the former needs explicit typing and doesn't allow different records with the same field name to be passed to the same function, etc.</p>\\n<ol>\\n<li>\\n<p>The truth is that most of the times in your app, your data's shape is actually fixed, and if it's not, it can potentially be better represented as a combination of variant (introduced next) + record instead*.</p>\\n</li>\\n<li>\\n<p>Record, since its fields are fixed, is compiled to an array with array index accesses instead of JS object (try it in the playground!). On native, it compiles to basically a region of memory where a field access is just one field lookup + one actual access, aka <strong>2 assembly instructions</strong>. The good old days where folks measured in nanoseconds...</p>\\n</li>\\n</ol>\\n<!--TODO: sharable playground  -->\\n<ol start=\\\"3\\\">\\n<li>Finally, since a record type is resolved through finding that single explicit type declaration (we call this \\\"nominal typing\\\"), the type error messages end up better than the counterpart (\\\"structural typing\\\", like for tuples). This makes refactoring easier; changing a record type's fields naturally allows the compiler to know that it's still the same record, just misused in some places. Otherwise, under structural typing, it might get hard to tell whether the definition site or the usage site is wrong.</li>\\n</ol>\\n<p>* And we're not just finding excuses for ourselves! Reason objects do support these features.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/tuple.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Tuple\",\n\t\t\t\t\t\t\t\t\"order\": 50\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Tuples are</p>\\n<ul>\\n<li>immutable</li>\\n<li>ordered</li>\\n<li>fix-sized at creation time</li>\\n<li>heterogeneous (can contain different types of values)</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> ageAndName = (<span class=\\\"hljs-number\\\">24</span>, <span class=\\\"hljs-string\\\">\\\"Lil' Reason\\\"</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> my3dCoordinates = (<span class=\\\"hljs-number\\\">20.0</span>, <span class=\\\"hljs-number\\\">30.5</span>, <span class=\\\"hljs-number\\\">100.0</span>);</code></pre>\\n      </div>\\n<p>Tuples' types can be used in type annotations as well. Tuple types visually resemble tuples values.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> ageAndName: (int, string) = (<span class=\\\"hljs-number\\\">24</span>, <span class=\\\"hljs-string\\\">\\\"Lil' Reason\\\"</span>);\\n<span class=\\\"hljs-comment\\\">/* a tuple type alias */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> coord3d = (float, float, float);\\n<span class=\\\"hljs-keyword\\\">let</span> my3dCoordinates: coord3d = (<span class=\\\"hljs-number\\\">20.0</span>, <span class=\\\"hljs-number\\\">30.5</span>, <span class=\\\"hljs-number\\\">100.0</span>);</code></pre>\\n      </div>\\n<p><strong>Note</strong>: there's no tuple of size 1. You'd just use the value itself.</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>The standard library provides <code>fst</code> and <code>snd</code> (<a href=\\\"/api/Pervasives.html\\\">here</a>, under \\\"Pair operations\\\"), convenience functions that allow you to access the first and second element of a 2-tuple. Generally, you'd access n-tuple members through destructuring (described later in the sidebar):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> (<span class=\\\"hljs-number\\\">_</span>, y, <span class=\\\"hljs-number\\\">_</span>) = my3dCoordinates; <span class=\\\"hljs-comment\\\">/* now you've retrieved y */</span></code></pre>\\n      </div>\\n<p>The <code>_</code> means you're ignoring the indicated members of the tuple.</p>\\n<p>Tuples aren't meant to be updated mutatively; you'd create new ones by destructuring the old ones.</p>\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p>You'd use tuples in handy situations that pass around multiple values without too much ceremony. For example, to return many values:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> getCenterCoordinates () =&gt; {\\n  <span class=\\\"hljs-keyword\\\">let</span> x = doSomeOperationsHere ();\\n  <span class=\\\"hljs-keyword\\\">let</span> y = doSomeMoreOperationsHere ();\\n  (x, y)\\n};</code></pre>\\n      </div>\\n<p>Or to \\\"pattern-match\\\" (covered later) on the conjunction of possibilities:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">switch</span> (isWindowOpen, isDoorOpen) { <span class=\\\"hljs-comment\\\">/* this is a 2-tuple */</span>\\n| (<span class=\\\"hljs-literal\\\">true</span>, <span class=\\\"hljs-literal\\\">true</span>) =&gt; ...\\n| (<span class=\\\"hljs-literal\\\">true</span>, <span class=\\\"hljs-literal\\\">false</span>) =&gt; ...\\n| (<span class=\\\"hljs-literal\\\">false</span>, <span class=\\\"hljs-literal\\\">true</span>) =&gt; ...\\n| (<span class=\\\"hljs-literal\\\">false</span>, <span class=\\\"hljs-literal\\\">false</span>) =&gt; ...\\n}</code></pre>\\n      </div>\\n<p>Try to keep the usage of tuple <strong>local</strong>. For data structures that are long-living and passed around often, prefer a <strong>record</strong>, which has named fields.</p>\\n<p>A tuple type might also be called a \\\"product type\\\", and <code>(string, int)</code> is written as <code>string * int</code> in some places. The idea is that a tuple is really a \\\"cartesian product\\\"; imagine a 2D grid, with <code>string</code> on the x axis and <code>int</code> on the y axis!</p>\\n<p>The combination of tuple + <code>switch</code> is very powerful and concise, and <strong>wipes out an entire category of bugs</strong>. Together, they cleanly list out all the possible combinations of values. A tuple of type <code>(bool, bool)</code> indeed has <code>2 * 2 = 4</code> possibilities, and the type system asks you to cover all 4. This lends itself well to code refactors; instead of informally adding a few if-else on arbitrary values here and there, you can directly pinpoint the exact <code>switch</code> branch you need to alter, no more and no less.</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>Tuple's existence might seem odd for those coming from untyped languages. \\\"Why not just use a list/array?\\\"</p>\\n<p>A type system isn't all-powerful, nor should it be; some tasteful trade-offs need to be applied in order to keep the language simple, performant (both compilation and running speed) and easy to understand. Reason lists, for example, are more flexible in size; they can be concatenated, appended, sliced, etc. In return, they need to be homogenous (can only contain a single type of value per list), and random index access on them might not always be valid*. Tuple, on the other hand, through its constraint on size, is faster, gives the type system the leeway to exhaustively track all its items' types, and guarantees safe access. In general, you'll notice a few prominent, tasteful tradeoffs in a type system: record fields are fixed but can be heterogenous, while a map's fields are flexible but homogenous, etc.</p>\\n<p>A Reason tuple is typed \\\"structurally\\\". This means that even if you don't annotate your data with an explicit type, the compiler can still deduce it by looking at its content, its usage, etc. As long as the declarations and the usages' inferred shapes match up, you're all good!</p>\\n<p>* It's not that the Reason type system cannot accept heterogenous, dynamically-sized lists; it actually can (hint: GADT)! But making such feature the default increases both the first-time learning overhead and the understandability of code. Just because the types can accomplish it doesn't mean it's always a good idea to let some pieces of code grow unboundedly complex!</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/string-and-char.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"String & Char\",\n\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"string\\\"><a href=\\\"#string\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>String</h3>\\n<p>Reason strings are delimited using <strong>double</strong> quotes (single quotes are reserved for the character type below).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>let greeting = \\\"Hello world!\\\";\\nlet multilineGreeting = \\\"Hello\\n world!\\\";</code></pre>\\n      </div>\\n<p>Special characters in the string need to be escaped:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> oneSlash = <span class=\\\"hljs-string\\\">\\\"\\\\\\\\\\\"</span>;</code></pre>\\n      </div>\\n<p>To concatenate strings, use <code>^</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> greetings = <span class=\\\"hljs-string\\\">\\\"Hello \\\"</span> ^ <span class=\\\"hljs-string\\\">\\\"world!\\\"</span>;</code></pre>\\n      </div>\\n<h4 id=\\\"quoted-string\\\"><a href=\\\"#quoted-string\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Quoted String</h4>\\n<p>There's a special syntax for string that allows</p>\\n<ul>\\n<li>multiline string just like before</li>\\n<li>no special character escaping</li>\\n<li>hooks for special pre-processors</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> greetingAndOneSlash = {|<span class=\\\"hljs-type\\\">Hello</span>\\n<span class=\\\"hljs-type\\\">World</span>\\n\\\\\\n<span class=\\\"hljs-type\\\">Hehe</span>...\\n|};</code></pre>\\n      </div>\\n<p>Analogically speaking, it's like JavaScript's backtick string interpolation, except without needing to escape special chars, and without built-in interpolation of variables. Though you can trivially restore the latter functionality, <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_unicode_support_with_string_interpolation_since_1_7_0\\\">as BuckleScript has done</a>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> world = {js|世界|js}; <span class=\\\"hljs-comment\\\">/* Supports Unicode characters */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> helloWorld = {j|你好，$world|j}; <span class=\\\"hljs-comment\\\">/* Supports Unicode and interpolation variables */</span></code></pre>\\n      </div>\\n<p>BuckleScript's special pre-processor can then look for such <code>js</code> and <code>j</code> markers around the string and transforms it into something else.</p>\\n<h4 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h4>\\n<p><a href=\\\"/api/String.html\\\">More string operations can be found in the standard library</a>. For JS compilation, see the familiar <code>JS.String</code> API bindings in the <a href=\\\"http://bucklescript.github.io/bucklescript/api/Js_string.html\\\">BuckleScript API docs</a>. Since a Reason string maps to a JavaScript string, you can mix &#x26; match the string operations in both standard libraries.</p>\\n<h4 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h4>\\n<p><a href=\\\"https://twitter.com/jusrin00/status/875238742621028355\\\">https://twitter.com/jusrin00/status/875238742621028355</a></p>\\n<p><strong>You have an expressive type system now</strong>! In an untyped language, you'd often overload the meaning of string by using it as:</p>\\n<ul>\\n<li>a unique id: <code>var BLUE_COLOR = \\\"blue\\\"</code></li>\\n<li>an identifier into a data structure: <code>var BLUE = \\\"blue\\\"; var RED = \\\"red\\\"; var colors = [BLUE, RED]</code></li>\\n<li>the name of an object field: <code>person[\\\"age\\\"] = 24</code></li>\\n<li>an enum: <code>if (audio.canPlayType() === 'probably') {...}</code> <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType#Return_value\\\">(ಠ_ಠ)</a></li>\\n<li>other crazy patterns you'll soon find horrible, after getting used to Reason's alternatives.</li>\\n</ul>\\n<p>The more you overload the poor string type, the less the type system can help you! Reason provides concise, fast and maintainable types &#x26; data structures alternatives to the use-cases above (e.g. variants, in a later section).</p>\\n<p>Under native compilation, Reason strings compile to a simple representation whose performance is straightforward to analyze, at the expense of sometimes requiring manual performance tuning. For example, naively concatenating strings like <code>\\\"hi \\\" ^ \\\"how \\\" ^ \\\"are \\\" ^ \\\"you?\\\"</code> unnecessarily allocates the intermediate strings <code>\\\"are you?\\\"</code> and <code>\\\"how are you?\\\"</code>. In this case, prefer <a href=\\\"/api/String.html\\\"><code>String.concat</code></a>. In a way, it's somewhat nice that the traditional runtime analysis we've learned in school can finally be useful again.</p>\\n<p>Under JavaScript compilation, a Reason string maps to a JavaScript string and vice-versa, so no such above concern or analysis opportunities.</p>\\n<h4 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h4>\\n<p>Quoted string's feature of not escaping special characters enables neat DSLs like <a href=\\\"/api/Str.html\\\">regular expression</a>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> r = <span class=\\\"hljs-type\\\">Str</span>.regexp {|hello \\\\([<span class=\\\"hljs-type\\\">A</span>-<span class=\\\"hljs-type\\\">Za</span>-z]+\\\\)|};</code></pre>\\n      </div>\\n<p>as opposed to</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> r = <span class=\\\"hljs-type\\\">Str</span>.regexp <span class=\\\"hljs-string\\\">\\\"hello \\\\\\\\([A-Za-z]+\\\\\\\\)\\\"</span>;</code></pre>\\n      </div>\\n<p>Though for JS compilation, you'd use <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_regex_support\\\"><code>[%bs.re]</code></a> and <a href=\\\"https://bucklescript.github.io/bucklescript/api/Js.Re.html\\\"><code>Js.Re</code></a> instead, since <code>Str</code> is not available.</p>\\n<p>Reason/OCaml's emphasis on simplicity over cleverness can be seen here through its straightforward native string implementation. An overly sophisticated string implementation can sometimes <a href=\\\"http://mrale.ph/blog/2016/11/23/making-less-dart-faster.html\\\">backfire</a>.</p>\\n<h3 id=\\\"char\\\"><a href=\\\"#char\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Char</h3>\\n<p>Reason has a type for a string with a single letter:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> firstLetterOfAlphabet = 'a';</code></pre>\\n      </div>\\n<p><strong>Note</strong>: Char doesn't support Unicode or UTF-8.</p>\\n<h4 id=\\\"tips--tricks-1\\\"><a href=\\\"#tips--tricks-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h4>\\n<p>A character <a href=\\\"/try/?reason=DYUwLgBAhhC8EHIoKA\\\">compiles to an integer ranging from 0 to 255</a>, for extra speed. You can also pattern-match (covered later) on it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-func\\\"><span class=\\\"hljs-keyword\\\">fun</span><span class=\\\"hljs-params\\\"> isVowel<span class=\\\"hljs-params\\\"> theChar<span class=\\\"hljs-params\\\"> </span></span></span></span>=&gt; <span class=\\\"hljs-keyword\\\">switch</span> theChar {\\n| 'a' | 'e' | 'i' | 'o' | 'u' | 'y' =&gt; <span class=\\\"hljs-literal\\\">true</span>\\n| <span class=\\\"hljs-number\\\">_</span> =&gt; <span class=\\\"hljs-literal\\\">false</span>\\n};</code></pre>\\n      </div>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/native/convert-from-ocaml.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Converting from OCaml\",\n\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Since Reason is just another syntax for OCaml, converting an OCaml project over is straightforward and doesn't require semantic changes. However, there are a few build setup and miscellaneous changes required.</p>\\n<h4 id=\\\"ocamlbuild---rebuild\\\"><a href=\\\"#ocamlbuild---rebuild\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>OCamlBuild -> Rebuild</h4>\\n<p>Reason comes with a drop in replacement for <code>ocamlbuild</code> called <code>rebuild</code>, that\\nwill automatically build any Reason file along with your OCaml files, with\\nno additional configuration. This allows you to add Reason files to your existing\\nOCaml project bit by bit. Wherever your script refers to <code>ocamlbuild</code>, just replace\\nit with <code>rebuild</code>.</p>\\n<h4 id=\\\"makefile\\\"><a href=\\\"#makefile\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Makefile</h4>\\n<p>If your build system executes explicit build commands, then the easiest way to\\nuse Reason with <code>ocamlopt/ocamlc</code> is by adding the following flags to each\\ncompilation step:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code><span class=\\\"hljs-comment\\\"># intf-suffix tells the compiler where to look for corresponding interface files</span>\\nocamlopt -pp refmt -intf-suffix rei -impl myFile.re\\nocamlopt -pp refmt -intf myFile.rei</code></pre>\\n      </div>\\n<p>If you are using <code>ocamlbuild</code> without <code>rebuild</code>, add the following to your\\n<code>_tags</code> file, but this likely won't be enough because <code>ocamlc</code>/<code>ocamlopt</code> will\\nneed the <code>-intf/-impl/-intf-suffix</code> flags:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code>&lt;**/*.{re,.rei}&gt;: package(reason), syntax(utf8)</code></pre>\\n      </div>\\n<h4 id=\\\"constructor-syntax-fix\\\"><a href=\\\"#constructor-syntax-fix\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Constructor Syntax Fix</h4>\\n<p>The converted Reason code may attach <code>[@implicit_arity]</code> to variant constructors, like so: <code>C 1 2 [@implicit_arity]</code>.\\nThis is due to the fact that OCaml has the ambiguous syntax where a multi-arguments\\nconstructor is expecting argument in a tuple form. So at parsing time we don't\\nknow if <code>C (1, 2)</code> in OCaml should be translated to <code>C (1, 2)</code> or <code>C 1 2</code> in Reason.\\nBy default, we will convert it to <code>C 1 2 [@implicit_arity]</code>, which tells the compiler\\nthis can be either <code>C 1 2</code> or <code>C (1, 2)</code>.</p>\\n<p>To prevent <code>[@implicit_arity]</code> from being generated, one can supply <code>--assume-explicit-arity</code>\\nto <code>refmt</code>. This forces the formatter to generate <code>C 1 2</code> instead of <code>C 1 2 [@implicit_arity]</code>.</p>\\n<p>However, since <code>C 1 2</code> requires multiple arguments, it may fail the compilation if it is actually\\na constructor with a single tuple as an argument (e.g., <code>Some</code>).\\nWe already have some internal exception rules to cover the common constructors who requires a single tuple\\nas argument so that they will be converted correctly (e.g., <code>Some (1, 2)</code> will be converted\\nto <code>Some (1, 2)</code> instead of <code>Some 1 2</code>, which doesn't compile).</p>\\n<p>To provide your own exception list, create a line-separated file that contains all constructors (without module prefix)\\nin your project that expects a single tuple as argument, and use <code>--heuristics-file &#x3C;filename></code>\\nto tell <code>refmt</code> that all constructors\\nlisted in the file will be treated as constructor with a single tuple as argument:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code>&gt; cat heuristics.txt\\n  TupleConstructor\\n  And\\n  Or</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code>&gt; cat test.ml</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-ocaml\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tm =\\n  <span class=\\\"hljs-type\\\">TupleConstructor</span> <span class=\\\"hljs-keyword\\\">of</span> (<span class=\\\"hljs-built_in\\\">int</span> * <span class=\\\"hljs-built_in\\\">int</span>)\\n| <span class=\\\"hljs-type\\\">MultiArgumentsConstructor</span> <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-built_in\\\">int</span> * <span class=\\\"hljs-built_in\\\">int</span>\\n<span class=\\\"hljs-keyword\\\">let</span> x = <span class=\\\"hljs-type\\\">TupleConstructor</span>(<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>)\\n<span class=\\\"hljs-keyword\\\">let</span> y = <span class=\\\"hljs-type\\\">MultiArgumentsConstructor</span>(<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>)\\n<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-type\\\">Test</span> = <span class=\\\"hljs-keyword\\\">struct</span>\\n  <span class=\\\"hljs-keyword\\\">type</span> a = | <span class=\\\"hljs-type\\\">And</span> <span class=\\\"hljs-keyword\\\">of</span> (<span class=\\\"hljs-built_in\\\">int</span> * <span class=\\\"hljs-built_in\\\">int</span>) | <span class=\\\"hljs-type\\\">Or</span> <span class=\\\"hljs-keyword\\\">of</span> (<span class=\\\"hljs-built_in\\\">int</span> * <span class=\\\"hljs-built_in\\\">int</span>)\\n<span class=\\\"hljs-keyword\\\">end</span>;;\\n<span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-type\\\">Test</span>.<span class=\\\"hljs-type\\\">And</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>)\\n<span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-type\\\">Test</span>.<span class=\\\"hljs-type\\\">Or</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>)\\n<span class=\\\"hljs-keyword\\\">let</span> c = <span class=\\\"hljs-type\\\">Some</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>)</code></pre>\\n      </div>\\n<p>Then only the constructor identifiers that were listed will be assumed to accept tuples instead of multiple arguments.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code>&gt; refmt --heuristics-file \\\\\\n    ./heuristics.txt --assume-explicit-arity \\\\\\n    --parse ml --print re test.ml</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>  <span class=\\\"hljs-keyword\\\">type</span> tm =\\n    | <span class=\\\"hljs-type\\\">TupleConstructor</span> <span class=\\\"hljs-keyword\\\">of</span> (int, int)\\n    | <span class=\\\"hljs-type\\\">MultiArgumentsConstructor</span> <span class=\\\"hljs-keyword\\\">of</span> int int;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> x = <span class=\\\"hljs-type\\\">TupleConstructor</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> y = <span class=\\\"hljs-type\\\">MultiArgumentsConstructor</span> <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-number\\\">2</span>;\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-title\\\">Test</span> = </span>{\\n  <span class=\\\"hljs-keyword\\\">type</span> a = | <span class=\\\"hljs-type\\\">And</span> <span class=\\\"hljs-keyword\\\">of</span> (int, int) | <span class=\\\"hljs-type\\\">Or</span> <span class=\\\"hljs-keyword\\\">of</span> (int, int);\\n};\\n<span class=\\\"hljs-keyword\\\">let</span> a = <span class=\\\"hljs-type\\\">Test</span>.<span class=\\\"hljs-type\\\">And</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> b = <span class=\\\"hljs-type\\\">Test</span>.<span class=\\\"hljs-type\\\">Or</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-built_in\\\">c</span> = <span class=\\\"hljs-type\\\">Some</span> (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>);</code></pre>\\n      </div>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/native/quickstart.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p><strong>Note: the native workflow is heavily work-in-progress</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-sh\\\"><code><span class=\\\"hljs-comment\\\"># On OSX, install opam via Homebrew:</span>\\nbrew update\\nbrew install opam\\n<span class=\\\"hljs-comment\\\"># On Linux, see here (you'll need opam &gt;= 1.2.2): http://opam.ocaml.org/doc/Install.html</span>\\nopam init\\n<span class=\\\"hljs-comment\\\"># **Note**: add the line below to your ~/.bashrc or ~/.zshrc too; it's needed at every shell startup</span>\\n<span class=\\\"hljs-built_in\\\">eval</span> $(opam config env)\\nopam update\\nopam switch <span class=\\\"hljs-number\\\">4.02</span>.<span class=\\\"hljs-number\\\">3</span></code></pre>\\n      </div>\\n<p>Then clone our example <a href=\\\"https://github.com/reasonml/ReasonNativeProject\\\"><code>ReasonNativeProject</code></a> repo, and you're good to go!</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/native/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Native\",\n\t\t\t\t\t\t\t\t\"order\": 40\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>We currently use the default OCaml workflow to compile to native, although <a href=\\\"https://github.com/bsansouci/bsb-native\\\">there's work underway</a> to bring native compilation support to the BuckleScript builder.</p>\\n<blockquote>\\n<p><strong>Note</strong>: some parts of the native workflow likely don't work on Windows. The native workflow is currently <strong>work in progress</strong>, as we're currently focusing on polishing the JS workflow. Contribution welcome!</p>\\n</blockquote>\\n<p>Reason integrates well into existing toolchains such as <code>ocamlbuild</code>, and ships\\nwith a binary called <code>rebuild</code>, a thin wrapper around <a href=\\\"http://ocaml.org/learn/tutorials/ocamlbuild/\\\"><code>ocamlbuild</code></a>\\nthat ensures the right flags to be passed to the compiler for any files ending\\nin <code>.re</code>.</p>\\n<p>For native compilation, we use <a href=\\\"https://opam.ocaml.org\\\">OPAM</a>.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/variant.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Variant!\",\n\t\t\t\t\t\t\t\t\"order\": 70\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>Behold, the crown jewel of Reason data structures!</p>\\n<p>Most data structures in most languages are about \\\"this <strong>and</strong> that\\\". A variant allows us to express \\\"this <strong>or</strong> that\\\".</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> myResponseVariant =\\n| <span class=\\\"hljs-type\\\">Yes</span>\\n| <span class=\\\"hljs-type\\\">No</span>\\n| <span class=\\\"hljs-type\\\">PrettyMuch</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> areYouCrushingIt = <span class=\\\"hljs-type\\\">Yes</span>;</code></pre>\\n      </div>\\n<p><code>Yes</code>, <code>No</code> and <code>PrettyMuch</code> aren't strings, nor references, nor some special data type. They're called \\\"constructors\\\" (or \\\"tag\\\"). The <code>|</code> bar separates each constructor.</p>\\n<p><strong>Note</strong>: a variant's constructors need to be capitalized.</p>\\n<h3 id=\\\"usage\\\"><a href=\\\"#usage\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Usage</h3>\\n<p>Along with a variant comes one of the most important features of Reason, the <code>switch</code> expression.</p>\\n<p>A Reason <code>switch</code> is visually similar to other languages' <code>switch</code> (aka a large <code>if/elseif/elseif...</code>). It allows you to check every possible case of a variant. To use it, enumerate every variant constructor of the particular variant you'd like to use, each followed by an <code>=></code> and the expression corresponding to that case.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-keyword\\\">switch</span> (areYouCrushingIt) {\\n| <span class=\\\"hljs-type\\\">No</span> =&gt; <span class=\\\"hljs-string\\\">\\\"No worries. Keep going!\\\"</span>\\n| <span class=\\\"hljs-type\\\">Yes</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Great!\\\"</span>\\n| <span class=\\\"hljs-type\\\">PrettyMuch</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Nice!\\\"</span>\\n};\\n<span class=\\\"hljs-comment\\\">/* message is \\\"Great!\\\" */</span></code></pre>\\n      </div>\\n<p>A variant has an extremely rich amount of type system assistance. For example, we'll give you a type error if you've forgotten to cover a case of your variant, or if two cases are redundant. Be sure to check out switch and pattern-matching in a <a href=\\\"/guide/language/pattern-matching\\\">later section</a>!</p>\\n<h4 id=\\\"variant-needs-an-explicit-definition\\\"><a href=\\\"#variant-needs-an-explicit-definition\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Variant Needs an Explicit Definition</h4>\\n<p>If the variant you're using is in a different file, bring it into scope like you'd do <a href=\\\"/guide/language/record#record-needs-an-explicit-definition\\\">for a record</a>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* Zoo.re */</span>\\n\\n<span class=\\\"hljs-keyword\\\">type</span> animal = <span class=\\\"hljs-type\\\">Dog</span> | <span class=\\\"hljs-type\\\">Cat</span> | <span class=\\\"hljs-type\\\">Bird</span>;</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* example.re */</span>\\n\\n<span class=\\\"hljs-keyword\\\">let</span> pet: <span class=\\\"hljs-type\\\">Zoo</span>.animal = <span class=\\\"hljs-type\\\">Dog</span>; <span class=\\\"hljs-comment\\\">/* preferred */</span>\\n<span class=\\\"hljs-comment\\\">/* or */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> pet = <span class=\\\"hljs-type\\\">Zoo</span>.<span class=\\\"hljs-type\\\">Dog</span>;</code></pre>\\n      </div>\\n<h4 id=\\\"constructor-arguments\\\"><a href=\\\"#constructor-arguments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Constructor Arguments</h4>\\n<p>A variant's constructors can hold extra data separated by space.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> account =\\n| <span class=\\\"hljs-type\\\">None</span>\\n| <span class=\\\"hljs-type\\\">Instagram</span> string\\n| <span class=\\\"hljs-type\\\">Facebook</span> string int;</code></pre>\\n      </div>\\n<p>Here, <code>Instagram</code> holds a <code>string</code>, and <code>Facebook</code> holds a <code>string</code> and an <code>int</code>. Usage:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myAccount = <span class=\\\"hljs-type\\\">Facebook</span> <span class=\\\"hljs-string\\\">\\\"Josh\\\"</span> <span class=\\\"hljs-number\\\">26</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> friendAccount = <span class=\\\"hljs-type\\\">Instagram</span> <span class=\\\"hljs-string\\\">\\\"Jenny\\\"</span>;</code></pre>\\n      </div>\\n<p><strong>Notice how using a constructor is like calling a function</strong>? It's as if <code>Facebook</code> was a function that accepts two arguments. This isn't a coincidence; there's a reason why a constructor's data is called \\\"constructor argument\\\".</p>\\n<p>Using <code>switch</code>, you can pattern-match (again, described in a later section) a constructor's arguments:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> greeting = <span class=\\\"hljs-keyword\\\">switch</span> (myAccount) {\\n| <span class=\\\"hljs-type\\\">None</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Hi!\\\"</span>\\n| <span class=\\\"hljs-type\\\">Facebook</span> name age =&gt;\\n  <span class=\\\"hljs-string\\\">\\\"Hi \\\"</span> ^ name ^ <span class=\\\"hljs-string\\\">\\\", you're \\\"</span> ^ (string_of_int age) ^ <span class=\\\"hljs-string\\\">\\\"-year-old.\\\"</span>\\n| <span class=\\\"hljs-type\\\">Instagram</span> name =&gt; <span class=\\\"hljs-string\\\">\\\"Hello \\\"</span> ^ name ^ <span class=\\\"hljs-string\\\">\\\"!\\\"</span>\\n}</code></pre>\\n      </div>\\n<h4 id=\\\"honorable-mentions\\\"><a href=\\\"#honorable-mentions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Honorable Mentions</h4>\\n<p>The <a href=\\\"/api/index.html\\\">standard library</a> exposes two important variants you'll come to hear a lot.</p>\\n<h5 id=\\\"option\\\"><a href=\\\"#option\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>option</code></h5>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> option 'a = <span class=\\\"hljs-type\\\">None</span> | <span class=\\\"hljs-type\\\">Some</span> 'a;</code></pre>\\n      </div>\\n<p>This is the convention used to simulate a \\\"nullable\\\" (aka <code>undefined</code> or <code>null</code>) value in other languages. Thanks to this convenience type definition, Reason can default every value to be non-nullable. An <code>int</code> will always be an int, never \\\"<code>int</code> <strong>or</strong> <code>null</code> <strong>or</strong> <code>undefined</code>\\\". If you do want to express a \\\"nullable int\\\", you'd use <code>option int</code>, whose possible values are <code>None</code> or <code>Some int</code>. <code>switch</code> forces you to handle both cases; therefore, <strong>a pure Reason program doesn't have null errors</strong>.</p>\\n<h5 id=\\\"list\\\"><a href=\\\"#list\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code>list</code></h5>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> list 'a = <span class=\\\"hljs-type\\\">Empty</span> | <span class=\\\"hljs-type\\\">Head</span> 'a (list 'a);</code></pre>\\n      </div>\\n<p><em>Not the actual type definition. Just an illustration</em>.</p>\\n<p>This says: \\\"a list that holds a value of type <code>a</code> (whatever it is) is either empty, or holds that value plus another list\\\".</p>\\n<p>Reason gave <code>list</code> a syntax sugar. <code>[1, 2, 3]</code> is conceptually equivalent to <code>Head 1 (Head 2 (Head 3 Empty))</code>. Once again, <code>switch</code> forces you to handle every case of this variant, including <code>Empty</code> (aka <code>[]</code>). <strong>This eliminates another big category of access bugs</strong>.</p>\\n<h5 id=\\\"other-variant-like-types\\\"><a href=\\\"#other-variant-like-types\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Other Variant-like Types</h5>\\n<p>Did you know that you can use <code>switch</code> on string, int, float, array, and most other data structures? Try it!</p>\\n<!-- TODO playground link -->\\n<h3 id=\\\"tips--tricks\\\"><a href=\\\"#tips--tricks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tips &#x26; Tricks</h3>\\n<p><strong>Be careful</strong> not to confuse a constructor carrying 2 arguments with a constructor carrying a single tuple argument:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> account =\\n| <span class=\\\"hljs-type\\\">Facebook</span> string int <span class=\\\"hljs-comment\\\">/* 2 arguments */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> account2 =\\n| <span class=\\\"hljs-type\\\">Instagram</span> (string, int) <span class=\\\"hljs-comment\\\">/* 1 argument - happens to be a 2-tuple */</span></code></pre>\\n      </div>\\n<h4 id=\\\"variants-must-have-constructors\\\"><a href=\\\"#variants-must-have-constructors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Variants Must Have constructors</h4>\\n<p>If you come from an untyped language, you might be tempted to try <code>type foo = int | string</code>. This isn't possible in Reason; you'd have to give each branch a constructor: <code>type foo = Int int | String int</code>. Though usually, needing this might be an anti-pattern. The Design Decisions section below explains more.</p>\\n<h4 id=\\\"interop-with-javascript\\\"><a href=\\\"#interop-with-javascript\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Interop with JavaScript</h4>\\n<p><em>This section assumes knowledge about BuckleScript's <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_ffi\\\">FFI</a>. Skip this if you haven't felt the itch to use variants for binding to JS functions yet</em>.</p>\\n<p>Quite a few JS libraries use functions that can accept many types of arguments. In these cases, it's very tempting to model them as variants. For example, suppose there's a <code>myLibrary.draw</code> JS function that takes in either a <code>number</code> or a <code>string</code>. You might be tempted to bind it like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code>/* reserved <span class=\\\"hljs-keyword\\\">for</span> internal usage */\\n<span class=\\\"hljs-keyword\\\">external</span> draw: <span class=\\\"hljs-symbol\\\">'a</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"draw\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"myLibrary\\\"</span>];\\n\\n<span class=\\\"hljs-keyword\\\">type</span> animal =\\n  | <span class=\\\"hljs-type\\\">MyFloat</span> <span class=\\\"hljs-built_in\\\">float</span>\\n  | <span class=\\\"hljs-type\\\">MyString</span> <span class=\\\"hljs-built_in\\\">string</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> betterDraw animal =&gt;\\n  switch animal {\\n  | <span class=\\\"hljs-type\\\">MyFloat</span> f =&gt; draw f\\n  | <span class=\\\"hljs-type\\\">MyString</span> s =&gt; draw s\\n  };</code></pre>\\n      </div>\\n<p>You could definitely do that, but there are better ways! For example, simply two <code>external</code>s that both compile to the same JS call:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-keyword\\\">external</span> drawFloat: <span class=\\\"hljs-built_in\\\">float</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"draw\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"myLibrary\\\"</span>];\\n<span class=\\\"hljs-keyword\\\">external</span> drawString: <span class=\\\"hljs-built_in\\\">string</span> =&gt; <span class=\\\"hljs-built_in\\\">unit</span> = <span class=\\\"hljs-string\\\">\\\"draw\\\"</span> [@@bs.<span class=\\\"hljs-keyword\\\">module</span> <span class=\\\"hljs-string\\\">\\\"myLibrary\\\"</span>];</code></pre>\\n      </div>\\n<p>Or, get fancy and use an advanced feature of variant called GADT, then use BuckleScript's <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html#_phantom_arguments_and_ad_hoc_polymorphism\\\">phantom argument FFI feature</a>. If these words mean absolutely nothing to you, no worries; just use the previous suggestion.</p>\\n<h4 id=\\\"variant-types-are-found-by-field-name\\\"><a href=\\\"#variant-types-are-found-by-field-name\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Variant Types Are Found By Field Name</h4>\\n<p>Please refer to this <a href=\\\"/guide/language/record#record-types-are-found-by-field-name\\\">record section</a>. Variants are the same: a function can't accept an arbitrary constructor shared by two different variants. Again, such feature exists, it's called a polymorphic variant. We'll talk about this in the future =).</p>\\n<h3 id=\\\"design-decisions\\\"><a href=\\\"#design-decisions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Design Decisions</h3>\\n<p>Variant in its many forms (polymorphic variant, open variant, GADT, etc.) are likely <em>the</em> feature of a type system such as Reason's. The aforementioned <code>option</code> variant, for example, obliterates the need for nullable types, a major source of bugs in other languages. Philosophically speaking, a problem is composed of many possible branches/conditions. Mishandling these conditions is the majority of what we call bugs. <strong>A type system doesn't magically eliminates bugs; it points out the unhandled conditions and asks you to cover them</strong>*. The ability to model \\\"this or that\\\" correctly is crucial.</p>\\n<p>For example, some folks wonder how the type system can safety eliminate badly formatted JSON data from propagating into their program. They don't, not by themselves! But if the parser returns the <code>option</code> type <code>None | Some actualData</code>, then you'd have to handle the <code>None</code> case explicitly in later call sites. That's all there is.</p>\\n<p>Performance-wise, a variant can potentially tremendously speed up your program's logic. Here's a piece of JavaScript:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-js\\\"><code><span class=\\\"hljs-built_in\\\">let</span> data = <span class=\\\"hljs-string\\\">'dog'</span>;\\n<span class=\\\"hljs-keyword\\\">if</span> (data === <span class=\\\"hljs-string\\\">'dog'</span>) {\\n  ...\\n} <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (data === <span class=\\\"hljs-string\\\">'cat'</span>) {\\n  ...\\n} <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (data === <span class=\\\"hljs-string\\\">'bird'</span>) {\\n  ...\\n}</code></pre>\\n      </div>\\n<p>There's a linear amount of branch checking here (<code>O(n)</code>). Compare this to using a Reason variant:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> animal = <span class=\\\"hljs-type\\\">Dog</span> | <span class=\\\"hljs-type\\\">Cat</span> | <span class=\\\"hljs-type\\\">Bird</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> data = <span class=\\\"hljs-type\\\">Dog</span>;\\n<span class=\\\"hljs-keyword\\\">switch</span> data {\\n| <span class=\\\"hljs-type\\\">Dog</span> =&gt; ...\\n| <span class=\\\"hljs-type\\\">Cat</span> =&gt; ...\\n| <span class=\\\"hljs-type\\\">Bird</span> =&gt; ...\\n}</code></pre>\\n      </div>\\n<p>The compiler sees the variant, then</p>\\n<ol>\\n<li>\\n<p>conceptually turns them into <code>type animal = 0 | 1 | 2</code></p>\\n</li>\\n<li>\\n<p>compiles <code>switch</code> to a constant-time format (<code>O(1)</code>).</p>\\n</li>\\n</ol>\\n<p>You might wonder why typed functional languages are used so often for parsing; switching on a large tree efficiently and safely is pretty much the best-case scenario for variants.</p>\\n<!-- TODO: playground link -->\\n<p>Mind blown yet? Variants have a deep connection to other fields of mathematics; <a href=\\\"https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types\\\">See here</a> for an interesting exploration.</p>\\n<p>* It's always nicer to design away the problem rather than resorting to a type system to cover the pitfalls; In reality, it's unrealistic to do so for every problem, or even just to understand every problem fully in order to design a solution. A type system allows you to safely make a big category of changes to codebases without needing to understand the whole thing upfront. In this regard, types also allows us not needing to overly design an API just to circumvent callers' simple pitfalls. They reduce the layers of abstractions needed to \\\"get things done\\\", which in return reduces callers' cognitive burden.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/editor-tools/extra-goodies.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Extra Goodies\",\n\t\t\t\t\t\t\t\t\"order\": 30\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<h3 id=\\\"browser-extension-reason-tools\\\"><a href=\\\"#browser-extension-reason-tools\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Browser Extension: Reason-tools</h3>\\n<p><a href=\\\"https://github.com/reasonml/reason-tools\\\">Reason-tools</a> lets you quickly toggle between OCaml syntax and Reason syntax when you're browsing tutorials and documentations written in either syntax.</p>\\n<h3 id=\\\"bucklescript\\\"><a href=\\\"#bucklescript\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>BuckleScript</h3>\\n<p>You'll be seeing <a href=\\\"http://bucklescript.github.io/bucklescript/Manual.html\\\">BuckleScript</a> extensively throughout the rest of this documentation, since it's the engine that powers our JS compilation. Its global binaries are installed through <code>npm install -g bs-platform</code>.</p>\\n<h3 id=\\\"other-utilities\\\"><a href=\\\"#other-utilities\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Other Utilities</h3>\\n<p>The global installation you've done in the <a href=\\\"/guide/editor-tools/global-installation\\\">past section</a> comes with a few extra useful tools, described here.</p>\\n<h4 id=\\\"refmt\\\"><a href=\\\"#refmt\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refmt</h4>\\n<p><code>refmt</code> (\\\"Reason format\\\") is the binary that powers our editors' auto-formatting feature. It takes in your code and spits it out, nicely formatted. It also serves to convert to/from Reason/OCaml syntax. The Reason community uses it to achieve a consistent code style throughout different projects, and to avoid time-consuming manual formatting &#x26; stylistic debates. Here it is, used inside Vim:</p>\\n<img src=\\\"https://user-images.githubusercontent.com/1909539/28570942-3bd962a2-70f5-11e7-8934-1b7f249d7814.gif\\\">\\n<p>It <strong>responsively</strong> formatted the code based on the editor width (just to show a point). In other words, it doesn't just naively break to the next line at a certain characters limit; it solves the layout constrains and arranges your code accordingly.</p>\\n<p><code>refmt</code> can be used directly in the terminal. For example, to format your code outside of the editor, do <code>refmt --in-place myFile.re</code>. <strong>See <code>refmt --help</code> for all the options</strong>.</p>\\n<h4 id=\\\"merlin\\\"><a href=\\\"#merlin\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Merlin</h4>\\n<p><a href=\\\"https://github.com/ocaml/merlin\\\">Merlin</a> is the underlying engine powering type hint, refactor, real-time errors, jump to definitions, etc. to our editors. Its command line name is called <code>ocamlmerlin</code>, though you wouldn't call it manually (editors start it themselves and query it).</p>\\n<p>To configure Merlin to understand your project, you'd write a <code>.merlin</code> file at the root (documentation <a href=\\\"https://github.com/ocaml/merlin/wiki/project-configuration\\\">here</a>). <strong>For the JS workflow, this configuration is generated for you automatically by BuckleScript's <code>bsb</code>.</strong></p>\\n<h4 id=\\\"repl\\\"><a href=\\\"#repl\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>REPL</h4>\\n<p>Reason comes with a REPL called <code>rtop</code> which, once invoked, lets you interactively evaluate code. It features intelligent, type-driven autocompletion.</p>\\n<img src=\\\"https://user-images.githubusercontent.com/1909539/28570943-3bd9eb00-70f5-11e7-981c-4846719c0943.gif\\\">\\n<p>Use <code>#quit;</code> to close your REPL session.</p>\\n<p><strong>Note that <code>rtop</code> currently doesn't work easily with packages and <code>external</code>s</strong>. We recommend evaluating code inside our <a href=\\\"/try\\\">Try</a> playground.</p>\\n<h4 id=\\\"ocamlc-ocamlopt-ocamlrun-rebuild\\\"><a href=\\\"#ocamlc-ocamlopt-ocamlrun-rebuild\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ocamlc, ocamlopt, ocamlrun, rebuild</h4>\\n<p><code>ocamlc</code> and <code>ocamlopt</code> are the bare ocaml compilers.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/editor-tools/editors-plugins.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Editors Plugins\",\n\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p><strong>Make sure you've installed reason-cli from the previous section.</strong></p>\\n<p>Reason's nature lends itself to great editor support. Most of our editor plugins provides at minimum:</p>\\n<ul>\\n<li>Types display.</li>\\n<li>Programmatic code formatting through <code>refmt</code>.</li>\\n<li>Errors &#x26; warnings display.</li>\\n<li>Syntax highlighting.</li>\\n<li>Type-driven autocomplete.</li>\\n<li>Jump to definition.</li>\\n</ul>\\n<p>And other features. See, for example, our VSCode plugin's <a href=\\\"https://github.com/reasonml-editor/vscode-reasonml#features\\\">feature section</a>!</p>\\n<h3 id=\\\"officially-supported-editors\\\"><a href=\\\"#officially-supported-editors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Officially Supported Editors</h3>\\n<ul>\\n<li><a href=\\\"https://github.com/reasonml-editor/vscode-reasonml\\\">VSCode</a>: <strong>recommended</strong>.</li>\\n<li>\\n<p><a href=\\\"https://github.com/314eter/atom-ocaml-merlin\\\">Atom</a></p>\\n<ul>\\n<li>Please install the related packages with <code>apm install language-reason linter linter-refmt reason-refmt</code>.</li>\\n<li>Alternatively, if you use <a href=\\\"https://nuclide.io/\\\">Nuclide</a>, Reason support comes by default.</li>\\n<li>True to the spirit of JavaScript, <a href=\\\"https://github.com/zaaack/atom-ide-reason\\\">here's yet another Atom Reason plugin</a>! Actually, this one's the prospective de-facto Atom Reason plugin. If you feel adventurous, please dog food it!</li>\\n</ul>\\n</li>\\n<li><a href=\\\"https://github.com/reasonml-editor/vim-reason\\\">Vim</a></li>\\n<li><a href=\\\"https://github.com/reasonml-editor/reason-mode\\\">Emacs</a></li>\\n<li><a href=\\\"https://github.com/reasonml-editor/sublime-reason\\\">Sublime Text</a></li>\\n<li><a href=\\\"https://github.com/reasonml-editor/reasonml-idea-plugin\\\">IDEA</a></li>\\n</ul>\\n<p>The GitHub <a href=\\\"https://github.com/reasonml-editor/\\\">reasonml-editor</a> community hosts most of these plugins. If you'd like to add your favorite editor's plugin here, send us a <a href=\\\"https://github.com/reasonml/reasonml.github.io\\\">pull request</a>!</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/editor-tools/global-installation.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Global Installation\",\n\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p><strong>Before setting up the editor plugins</strong>, you need to install the global binaries needed by them.</p>\\n<h3 id=\\\"recommended-through-npmyarn\\\"><a href=\\\"#recommended-through-npmyarn\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>(Recommended) Through Npm/Yarn</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Platform</th>\\n<th>Install command</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>OSX</strong></td>\\n<td><code>npm install -g https://github.com/reasonml/reason-cli/archive/beta-v-1.13.6-bin-darwin.tar.gz</code></td>\\n</tr>\\n<tr>\\n<td><strong>Linux</strong></td>\\n<td><code>npm install -g https://github.com/reasonml/reason-cli/archive/beta-v-1.13.6-bin-linux.tar.gz</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p><strong><code>reason-cli</code> currently doesn't work on Windows</strong>, but it's not a hard requirement for using Reason; you still have great CLI build system diagnosis messages through BuckleScript, whose npm global package <a href=\\\"https://www.npmjs.com/package/bs-platform\\\"><code>bs-platform</code></a> does work on Windows.</p>\\n<h3 id=\\\"alternative-through-opam\\\"><a href=\\\"#alternative-through-opam\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>(Alternative) Through OPAM</h3>\\n<p><a href=\\\"https://opam.ocaml.org\\\">OPAM</a> is the native package manager for OCaml. If you come from OCaml and don't have npm/yarn, you can optionally install this way, but be careful!</p>\\n<p><strong>Make sure you're on OCaml <code>4.02.3</code></strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code>opam update\\nopam install reason.1.13.6\\nopam install merlin.2.5.4</code></pre>\\n      </div>\\n<h3 id=\\\"troubleshooting\\\"><a href=\\\"#troubleshooting\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Troubleshooting</h3>\\n<p>If your editor isn't behaving as expected with the above install, do the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-built_in\\\">which</span> ocamlmerlin refmt ocamlmerlin-reason</code></pre>\\n      </div>\\n<p>It should spit out three paths that contain the word <code>reason-cli</code>. Note: during <code>npm/yarn</code> installation, the <code>node_modules/reason-cli</code> paths may be symlinked to <code>/usr/local/bin</code> (if so, the latter will display).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code>ocamlmerlin -version</code></pre>\\n      </div>\\n<p>It should say \\\"The Merlin toolkit version 2.5.x, for Ocaml 4.02.3\\\". Not OCaml 4.03, not 4.04, etc.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/editor-tools/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Editor Setup\",\n\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"html\": \"<p>This section describes the tools you need to install to get a nice, friendly Reason editing environment.</p>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"section\": \"guide\",\n\t\t\"sectionTitle\": \"Guide\",\n\t\t\"relatedFiles\": \"/^guide\\\\/.*\\\\.md$/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/guide-search.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/guide-search.json\n// module chunks = 13"],"sourceRoot":""}